<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Elizabeth Zagroba: Organizational Anarchist</title><link>https://elizabethzagroba.com/</link><description>Elizabeth Zagroba: Organizational Anarchist</description><atom:link href="https://elizabethzagroba.com/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>© 2022 &lt;a href="mailto:me@elizabethzagroba.com"&gt;Elizabeth Zagroba&lt;/a&gt; Mozilla Public License 2.0</copyright><lastBuildDate>Sun, 28 Aug 2022 14:47:49 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>From API Challenges to a Playwright Cookbook</title><link>https://elizabethzagroba.com/posts/2022/08_28_from_api_challenges_to_a_playwright_cookbook/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;figure&gt;&lt;img src="https://elizabethzagroba.com/images/posts/2022/playwright.png"&gt;&lt;/figure&gt; &lt;p&gt;Soon after &lt;a href="https://twitter.com/maaretp"&gt;Maaret Pyhäjärvi&lt;/a&gt; and &lt;a href="https://twitter.com/alex_schl"&gt;Alex Schladebeck&lt;/a&gt; began their endeavor to practice testing APIs using the &lt;a href="https://www.eviltester.com/page/tools/apichallenges/"&gt;API Challeges&lt;/a&gt; from &lt;a href="https://twitter.com/eviltester"&gt;Alan Richardson (aka The Evil Tester)&lt;/a&gt;, they looped me into their periodic practice sessions. Why? To make Past Elizabeth jealous, presumably. &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Continuing on the api challenges from &lt;a href="https://twitter.com/eviltester?ref_src=twsrc%5Etfw"&gt;@eviltester&lt;/a&gt; with &lt;a href="https://twitter.com/alex_schl?ref_src=twsrc%5Etfw"&gt;@alex_schl&lt;/a&gt; and &lt;a href="https://twitter.com/ezagroba?ref_src=twsrc%5Etfw"&gt;@ezagroba&lt;/a&gt; after weeks of being otherwise engaged, always happy to have see where we left off with a test. Simple thing for our future selves in group learning activity. &lt;a href="https://t.co/D99nC2PDVX"&gt;pic.twitter.com/D99nC2PDVX&lt;/a&gt;&lt;/p&gt;— Maaret Pyhäjärvi (@maaretp) &lt;a href="https://twitter.com/maaretp/status/1468883485205147652?ref_src=twsrc%5Etfw"&gt;December 9, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;h2&gt;API Testing Challenges&lt;/h2&gt;
&lt;p&gt;We gathered for an hour every few weeks to work through the challenges. The tools we were using (&lt;a href="https://docs.pytest.org/en/7.1.x/"&gt;pytest&lt;/a&gt;, the &lt;a href="https://pypi.org/project/requests/"&gt;Python requests library&lt;/a&gt;, and &lt;a href="https://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt;) were like home for Maaret and me. I'd been writing in a framework with these tools for my job for a few years already. &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Today in API testing adventures with &lt;a href="https://twitter.com/maaretp?ref_src=twsrc%5Etfw"&gt;@maaretp&lt;/a&gt; : We're profiting greatly from &lt;a href="https://twitter.com/ezagroba?ref_src=twsrc%5Etfw"&gt;@ezagroba&lt;/a&gt; 's python syntax expertise, and we're learning to doubt our oracles ;)&lt;/p&gt;— Alex Schladebeck (she/her) (@alex_schl) &lt;a href="https://twitter.com/alex_schl/status/1447894251384233984?ref_src=twsrc%5Etfw"&gt;October 12, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;I wasn't the only one. These tools were free to use and available for a number of years already. What the three of us combined couldn't figure out by trial-and-error, reading the error message, reading the darn description of what we were supposed to do again, or relying on patterns from previous exercises, we were able to Google. With one notable exception of course, as we are testers after all: &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Today's API testing challenges with &lt;a href="https://twitter.com/ezagroba?ref_src=twsrc%5Etfw"&gt;@ezagroba&lt;/a&gt; and &lt;a href="https://twitter.com/maaretp?ref_src=twsrc%5Etfw"&gt;@maaretp&lt;/a&gt; : the python requests library does not support TRACE...&lt;/p&gt;— Alex Schladebeck (she/her) (@alex_schl) &lt;a href="https://twitter.com/alex_schl/status/1468892681715822593?ref_src=twsrc%5Etfw"&gt;December 9, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;It may not &lt;em&gt;seem&lt;/em&gt; like you'd need three people to do the work that one person could do. But I assure you, having extra pairs of eyes to catch a typo, remember whether we were expecting it to pass or fail this time, see immediately that it's a whitespace issue making PyCharm angry, crack a joke, or help decide whether to keep going in the same direction makes the work go more smoothly. &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Observation from today's API testing session with &lt;a href="https://twitter.com/ezagroba?ref_src=twsrc%5Etfw"&gt;@ezagroba&lt;/a&gt; and &lt;a href="https://twitter.com/maaretp?ref_src=twsrc%5Etfw"&gt;@maaretp&lt;/a&gt; - it takes multiple people to remember all the details. A very succint way of summarising why we need to collaborate &lt;/p&gt;— Alex Schladebeck (she/her) (@alex_schl) &lt;a href="https://twitter.com/alex_schl/status/1478297685039976449?ref_src=twsrc%5Etfw"&gt;January 4, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;More than once, we'd end a session a few minutes early because we were stuck and lost, only to come back a couple weeks later with fresh eyes, able to understand where we were stuck and what to do about it. After several months meeting infrequently, we got through all of the API Testing Challenges! &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;We survived! Success! All of the &lt;a href="https://twitter.com/eviltester?ref_src=twsrc%5Etfw"&gt;@eviltester&lt;/a&gt;'s API Test Challenges complete! I love working with this team &lt;a href="https://twitter.com/ezagroba?ref_src=twsrc%5Etfw"&gt;@ezagroba&lt;/a&gt; &lt;a href="https://twitter.com/maaretp?ref_src=twsrc%5Etfw"&gt;@maaretp&lt;/a&gt; &lt;a href="https://t.co/xGKQOkW3gb"&gt;pic.twitter.com/xGKQOkW3gb&lt;/a&gt;&lt;/p&gt;— Alex Schladebeck (she/her) (@alex_schl) &lt;a href="https://twitter.com/alex_schl/status/1488520727649206288?ref_src=twsrc%5Etfw"&gt;February 1, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;Then we were like...now what? We like learning together, but we'd achieved our goal. &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Now we're talking about our next learning goals: mine are 'learning anything with awesome people' &lt;a href="https://twitter.com/maaretp?ref_src=twsrc%5Etfw"&gt;@maaretp&lt;/a&gt; &lt;a href="https://twitter.com/ezagroba?ref_src=twsrc%5Etfw"&gt;@ezagroba&lt;/a&gt;&lt;/p&gt;— Alex Schladebeck (she/her) (@alex_schl) &lt;a href="https://twitter.com/alex_schl/status/1488521161923252224?ref_src=twsrc%5Etfw"&gt;February 1, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;h2&gt;Starting out with Playwright&lt;/h2&gt;
&lt;p&gt;After a bit of brainstorming, we landed on a skill Alex and I were both still building: UI automation. Naturally, Maaret was way ahead of us, and pointed us towards Playwright framework and &lt;a href="http://selenium.thinkcode.se/"&gt;a practice site&lt;/a&gt; from &lt;a href="https://twitter.com/thomassundberg"&gt;Thomas Sundberg&lt;/a&gt; of all the greatest hits: radio buttons, drop-downs, alerts, you name it. &lt;/p&gt;
&lt;p&gt;Our experience with UIs, DOMs, automation, Selenium, exploration helped us, but didn't prevent every pickle we got ourselves into with Playwright. Though &lt;a href="https://playwright.dev/python/docs/intro"&gt;their documentation&lt;/a&gt; will tell you a lot of what you need to know (if you've correctly selected Python instead of Java or Node.js at the top), our desperation kept exceeding our patience. We escalated to the Playwright champion &lt;a href="https://twitter.com/AutomationPanda/"&gt;Andrew Knight&lt;/a&gt; and the Playwright community Slack channel.  &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;I'm not sure about that. Can anyone from &lt;a href="https://twitter.com/playwrightweb?ref_src=twsrc%5Etfw"&gt;@playwrightweb&lt;/a&gt; help answer?&lt;/p&gt;— Pandy Knight (@AutomationPanda) &lt;a href="https://twitter.com/AutomationPanda/status/1511346210434654219?ref_src=twsrc%5Etfw"&gt;April 5, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;Several times, it wasn't only the code that needed changing, but our perception of how Playwright wanted to interact with the website. These are a few I remember: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;an API response from a browser context can't be collected from a page context&lt;/li&gt;
&lt;li&gt;setting different contexts for a page and an alert on that page&lt;/li&gt;
&lt;li&gt;having that alert knowledge not help us when we also had to fill in a prompt&lt;/li&gt;
&lt;li&gt;expecting something in the DOM to tell us when an item in drop-down was checked&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;&lt;a href="https://twitter.com/maaretp?ref_src=twsrc%5Etfw"&gt;@maaretp&lt;/a&gt; &lt;a href="https://twitter.com/alex_schl?ref_src=twsrc%5Etfw"&gt;@alex_schl&lt;/a&gt; A kind gentleman in the Playwright Slack pointed us here: &lt;a href="https://t.co/e12v4nhth5"&gt;https://t.co/e12v4nhth5&lt;/a&gt;&lt;br&gt;&lt;br&gt;It returns the value `milk` but not the visible text `Milk` of what's selected. Perhaps that's good enough!&lt;/p&gt;— Elizabeth Zagroba (@ezagroba) &lt;a href="https://twitter.com/ezagroba/status/1528999806928048130?ref_src=twsrc%5Etfw"&gt;May 24, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;For the first three, wrapping our heads around a different way of thinking got us through the problem. For the last on, we lowered our expectations about what we could check. (Pun intended.) &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Learning more on &lt;a href="https://twitter.com/hashtag/playwright?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#playwright&lt;/a&gt; with &lt;a href="https://twitter.com/ezagroba?ref_src=twsrc%5Etfw"&gt;@ezagroba&lt;/a&gt; and &lt;a href="https://twitter.com/alex_schl?ref_src=twsrc%5Etfw"&gt;@alex_schl&lt;/a&gt; and coming to realisation we are modelling the world wrong and thus having harder time discovering info on the API documentation. We need to remodel our worlds.&lt;/p&gt;— Maaret Pyhäjärvi (@maaretp) &lt;a href="https://twitter.com/maaretp/status/1537423632632266752?ref_src=twsrc%5Etfw"&gt;June 16, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;h2&gt;Playwright Cookbook&lt;/h2&gt;
&lt;p&gt;We've tested what we can and should test on our first practice site. In upgrading to a more challenging one, we realized that we'd benefit from the knowledge our past selves gained. And that you could too. &lt;/p&gt;
&lt;p&gt;We've published our progress on github as the &lt;a href="https://github.com/ezagroba/playwright-cookbook"&gt;Playwright Cookbook&lt;/a&gt;. It's a Python repository of what we found that worked for different UI situations. It's one step beyond the Python documentation on the Playwright website, it lets you compare an actual page to a test where we were able to select the element. &lt;/p&gt;
&lt;h2&gt;Fun was had by all&lt;/h2&gt;
&lt;p&gt;Trying to quickly get something done with a new UI automation tool had been my white whale, something I knew was annoying enough that I wouldn't know how to get unstuck. Working in an ensemble meant either (1) the knowledge we needed was in the room and just had to be shared, or (2) two brilliant, successful ladies known for their testing prowess also didn't have a clue what was happening. Either way, it made things better and achievable. &lt;/p&gt;
&lt;p&gt;I am notoriously opposed to fun. But this has been fun. &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;"You only get to do fun exploratory testing after you have first automated it. That is the rule." Making fun of us exploring continuously when playing with &lt;a href="https://twitter.com/hashtag/Playwright?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Playwright&lt;/a&gt; with &lt;a href="https://twitter.com/alex_schl?ref_src=twsrc%5Etfw"&gt;@alex_schl&lt;/a&gt; &lt;a href="https://twitter.com/ezagroba?ref_src=twsrc%5Etfw"&gt;@ezagroba&lt;/a&gt;&lt;/p&gt;— Maaret Pyhäjärvi (@maaretp) &lt;a href="https://twitter.com/maaretp/status/1542443256977424391?ref_src=twsrc%5Etfw"&gt;June 30, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;The added fun and energy in learning hands-on things together creates an environment where we want to show up and learn. Social software testing for learning, FTW!&lt;/p&gt;— Maaret Pyhäjärvi (@maaretp) &lt;a href="https://twitter.com/maaretp/status/1542451911676272640?ref_src=twsrc%5Etfw"&gt;June 30, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;h2&gt;What's next&lt;/h2&gt;
&lt;p&gt;What is next for us? We know we want to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;keep learning together&lt;/li&gt;
&lt;li&gt;add more recipes for &lt;a href="https://the-internet.herokuapp.com/"&gt;our next testing target&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Have we reflected on what's valuable and not valuable to test on an API? Will we share more about this beyond this blog post? A conference talk or workshop? A Twitch stream?? Only time will tell. For now, enjoy the github repo. :)&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Perhaps instead of proposing to show up in conferences to do our learning sessions, we should start a twitch stream on our learning sessions &lt;a href="https://twitter.com/alex_schl?ref_src=twsrc%5Etfw"&gt;@alex_schl&lt;/a&gt; &lt;a href="https://twitter.com/ezagroba?ref_src=twsrc%5Etfw"&gt;@ezagroba&lt;/a&gt; :D&lt;/p&gt;— Maaret Pyhäjärvi (@maaretp) &lt;a href="https://twitter.com/maaretp/status/1542471658220527617?ref_src=twsrc%5Etfw"&gt;June 30, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;hr&gt;
&lt;p&gt;Editor's Note: The emojis have been edited out of these tweets because I still haven't bothered to track down why upgrading the version of my static site generator caused emojis to cause entire pages not to render. :bug: :magnet: &lt;/p&gt;</description><category>automation</category><category>playwright</category><category>python</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2022/08_28_from_api_challenges_to_a_playwright_cookbook/</guid><pubDate>Sat, 27 Aug 2022 22:00:00 GMT</pubDate></item><item><title>Amateur Professional Career Coach</title><link>https://elizabethzagroba.com/posts/2022/08_13_amateur_professional_career_coach/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;figure&gt;&lt;img src="https://elizabethzagroba.com/images/posts/2022/rose.jpeg"&gt;&lt;/figure&gt; &lt;p&gt;People come to me for career advice. It's been everybody -- colleagues, former colleagues, testers from the community, friends I know outside of software, younger family members -- everybody. I am not completely sure why. I have a job I enjoy, but I'm not a professional coach. I seem to be an amateur coach of professionals. &lt;/p&gt;
&lt;p&gt;I do have (and am happy to share) strong opinions about what people should do when they describe particular situations they're in. I can immediately tell them what I would do. But figuring out what &lt;em&gt;they&lt;/em&gt; should do is much more useful. So in response to tough questions, I ask them tough questions back. &lt;/p&gt;
&lt;h2&gt;Why is this so hard?&lt;/h2&gt;
&lt;p&gt;People come to me with tricky situations with their current roles. For some, venting is enough. But I might ask someone who seems exhausted, sick of it, checked-out, or seems stuck for too long: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How much longer could you let things stay the way they are? Another six weeks? Another six months? &lt;/li&gt;
&lt;li&gt;It sounds like you're having {X} trouble with {Y} person. Have you told them this directly?&lt;/li&gt;
&lt;li&gt;I don't have the skills to mentor you in {Z}. Do you know someone who does? Or where could you find someone like that?&lt;/li&gt;
&lt;li&gt;Would aligning expectations help? &lt;/li&gt;
&lt;li&gt;Is saying "no" an option here? (I've been called the "&lt;a href="https://twitter.com/aahunsberger/status/1534974206680629248"&gt;No Coach&lt;/a&gt;" for this.)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What should I do next?&lt;/h2&gt;
&lt;p&gt;I don't know what you should do next, or even if you should change what you're doing now! But here's what I will ask you about so you can decide: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What do you like about what you do now?&lt;/li&gt;
&lt;li&gt;What parts of your current job do you want to stay the same? &lt;/li&gt;
&lt;li&gt;What do you avoid or dread? What keeps you in bed in the morning?&lt;/li&gt;
&lt;li&gt;What do people come to you for help with?&lt;/li&gt;
&lt;li&gt;What is there no hope of changing in your current situation?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I know &lt;a href="https://twitter.com/estherderby"&gt;Esther Derby&lt;/a&gt; gave a webinar in March of 2021 describing the tipping point between whether you can reconcile your needs and values with your employer, or whether you should leave. But unforunately both the webinar and her name for this zone is lost to me. &lt;/p&gt;
&lt;h2&gt;What do you think of my CV?&lt;/h2&gt;
&lt;p&gt;I've written both for the &lt;a href="https://www.ministryoftesting.com/dojo/lessons/how-to-interview-like-a-tester"&gt;Minsitry of Testing&lt;/a&gt; and on my own blog about &lt;a href="https://elizabethzagroba.com/posts/2022/05_27_cvs_from_a_hiring_perspective/"&gt;resumes&lt;/a&gt; and &lt;a href="https://elizabethzagroba.com/posts/2017/2017-08-06_doubt-builds-trust/"&gt;how they relate to the interview&lt;/a&gt;. TL;DR: Tell me about the &lt;em&gt;impact&lt;/em&gt; of what you've done, and give me some indication of how fluent vs. on the shelf the skill is for you. Other things I end up asking people:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I know you {did this other thing} or {have this other skill} too. Don't you want to brag about that?&lt;/li&gt;
&lt;li&gt;It sounds like your skills would be a great match for {this kind of job}. Is that the kind of role you're applying for?&lt;/li&gt;
&lt;li&gt;If a recruiter were trying to find someone like you on LinkedIn, what keywords would they search for?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of the feedback I've received after recent resume reviews: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"Thanks again for your feedback on my CV, it was INCREDIBLY useful and very gentle at that."&lt;/li&gt;
&lt;li&gt;"You are a great feedback provider."&lt;/li&gt;
&lt;li&gt;"Elizabeth was so good in helping me with my resume!!"&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;I'm curious who you've gone to for career advice. Were they in your industry? What made you seek them over other people for advice or wisdom? What question or piece of advice has changed the way you look at your current job or for a new one?&lt;/p&gt;</description><category>career</category><category>coaching</category><category>humans</category><guid>https://elizabethzagroba.com/posts/2022/08_13_amateur_professional_career_coach/</guid><pubDate>Fri, 12 Aug 2022 22:00:00 GMT</pubDate></item><item><title>The Power of Separating Setup and Teardown From Your Tests</title><link>https://elizabethzagroba.com/posts/2022/07_30_the_power_of_separating_setup_and_teardown_from_your_tests/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;p&gt;This week, I was trying to find an explanation for my colleagues about when it's better to separate the setup and teardown of your tests from the test code itself. I was hoping that pytest's own documentation would have a recommendation, since our test code for this particular repository is written in Python with pytest as a test runner. Pytest does explain &lt;a href="https://docs.pytest.org/en/7.1.x/how-to/fixtures.html"&gt;many features of fixtures&lt;/a&gt;, and &lt;a href="https://docs.pytest.org/en/7.1.x/how-to/fixtures.html"&gt;what different test output can look like&lt;/a&gt;, but not the power of combining them. That's what I'd like to explain here. &lt;/p&gt;
&lt;h3&gt;An example&lt;/h3&gt;
&lt;p&gt;I can't show you the code I was looking at from work, so here is a relatively trivial and useless example I was able to contrive in an hour. (Sidebar: I once tested an address field that truncated the leading zeroes of post codes, so though this test may be trivial, testing that the post code made it to the database intact can provide value.)&lt;/p&gt;
&lt;p&gt;There's an API called Zippopotamus that can either:
1. take a city and state, and return you details about matching places; or
2. take a post code, and return you details about matching places.&lt;/p&gt;
&lt;p&gt;I've got two tests below, both trying to accomplish the same thing: see if all the post codes returned for the city of Waterville in the state of Maine also include Waterville in their results. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Setup: get list of post codes for Waterville, Maine&lt;/li&gt;
&lt;li&gt;Test: for each post code, check that &lt;code&gt;Waterville&lt;/code&gt; is in the list of matching places&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="n"&gt;zippopotamus_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"https://api.zippopotam.us/us"&lt;/span&gt;


&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post_codes&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;zippopotamus_url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;/me/waterville'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
    &lt;span class="n"&gt;places&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s1"&gt;'places'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;post_codes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'post code'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;places&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;post_codes&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestZippopotamus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_setup_included_waterville_maine_included_in_each_post_code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;zippopotamus_url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;/me/waterville'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
        &lt;span class="n"&gt;places&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s1"&gt;'places'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;post_codes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'post code'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;places&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;post_code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;post_codes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;zippopotamus_url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;post_code&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
            &lt;span class="n"&gt;places&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s1"&gt;'places'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'place name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'Waterville'&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;places&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_setup_separated_waterville_maine_included_in_each_post_code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;post_codes&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;post_code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;post_codes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;zippopotamus_url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;post_code&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
            &lt;span class="n"&gt;places&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s1"&gt;'places'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'place name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'Waterville'&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;places&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The first test shows the setup included in the test. The second test has the setup separated from the test. It appears in the fixture called &lt;code&gt;post_codes&lt;/code&gt;. &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt; ez@EZ-mini blog-examples % &lt;span class="nv"&gt;pytest&lt;/span&gt;                     
&lt;span class="o"&gt;==========================&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; session &lt;span class="nv"&gt;starts&lt;/span&gt; &lt;span class="o"&gt;===========================&lt;/span&gt;
platform darwin -- Python &lt;span class="m"&gt;3&lt;/span&gt;.10.1, pytest-7.1.2, pluggy-1.0.0
rootdir: /Users/ez/blog-examples
collected &lt;span class="m"&gt;2&lt;/span&gt; items                                                        

test_error_vs_failure_pytest.py ..                                 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;%&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;===========================&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; passed &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;.46s &lt;span class="o"&gt;============================&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;When you run these tests, they both pass. One test is a little longer, which you may find easier to follow than navigating around in the code, or harder to follow because there's code that's more about data collection than what we want to test. I find it yucky (a technical term) to have more than one thing called &lt;code&gt;request&lt;/code&gt; or &lt;code&gt;response&lt;/code&gt; in a single test, but these are all personal preferences. &lt;/p&gt;
&lt;p&gt;Now imagine instead of &lt;code&gt;waterville&lt;/code&gt; in the API requests, I've gone on auto-pilot and typed &lt;code&gt;whatever&lt;/code&gt; in the setup for the tests. Here's what pytest gives us as the output. &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt; ez@EZ-mini blog-examples % &lt;span class="nv"&gt;pytest&lt;/span&gt;
&lt;span class="o"&gt;==========================&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; session &lt;span class="nv"&gt;starts&lt;/span&gt; &lt;span class="o"&gt;===========================&lt;/span&gt;
platform darwin -- Python &lt;span class="m"&gt;3&lt;/span&gt;.10.1, pytest-7.1.2, pluggy-1.0.0
rootdir: /Users/ez/blog-examples
collected &lt;span class="m"&gt;2&lt;/span&gt; items                                                        

test_error_vs_failure_pytest.py FE                                 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;%&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;=================================&lt;/span&gt; &lt;span class="nv"&gt;ERRORS&lt;/span&gt; &lt;span class="o"&gt;=================================&lt;/span&gt;
_ ERROR at setup of TestZippopotamus.test_setup_separated_waterville_maine_included_in_each_post_code _

    @pytest.fixture&lt;span class="o"&gt;()&lt;/span&gt;
    def post_codes&lt;span class="o"&gt;()&lt;/span&gt;:
        &lt;span class="nv"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; requests.get&lt;span class="o"&gt;(&lt;/span&gt;f&lt;span class="s1"&gt;'{zippopotamus_url}/me/whatever'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;       assert response.status_code &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt;
E       assert &lt;span class="nv"&gt;404&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt;
E        +  where &lt;span class="nv"&gt;404&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &amp;lt;Response &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;404&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&amp;gt;.status_code

test_error_vs_failure_pytest.py:10: &lt;span class="nv"&gt;AssertionError&lt;/span&gt;
&lt;span class="o"&gt;================================&lt;/span&gt; &lt;span class="nv"&gt;FAILURES&lt;/span&gt; &lt;span class="o"&gt;================================&lt;/span&gt;
_ TestZippopotamus.test_setup_included_waterville_maine_included_in_each_post_code _

&lt;span class="nv"&gt;self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &amp;lt;test_error_vs_failure_pytest.TestZippopotamus object at 0x101f4c160&amp;gt;

    def test_setup_included_waterville_maine_included_in_each_post_code&lt;span class="o"&gt;(&lt;/span&gt;self&lt;span class="o"&gt;)&lt;/span&gt;:
        &lt;span class="nv"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; requests.get&lt;span class="o"&gt;(&lt;/span&gt;f&lt;span class="s1"&gt;'{zippopotamus_url}/me/whatever'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;       assert response.status_code &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt;
E       assert &lt;span class="nv"&gt;404&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt;
E        +  where &lt;span class="nv"&gt;404&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &amp;lt;Response &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;404&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&amp;gt;.status_code

test_error_vs_failure_pytest.py:20: &lt;span class="nv"&gt;AssertionError&lt;/span&gt;
&lt;span class="o"&gt;========================&lt;/span&gt; short &lt;span class="nb"&gt;test&lt;/span&gt; summary &lt;span class="nv"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=========================&lt;/span&gt;
FAILED test_error_vs_failure_pytest.py::TestZippopotamus::test_setup_included_waterville_maine_included_in_each_post_code
ERROR test_error_vs_failure_pytest.py::TestZippopotamus::test_setup_separated_waterville_maine_included_in_each_post_code
&lt;span class="o"&gt;=======================&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; failed, &lt;span class="m"&gt;1&lt;/span&gt; error &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.71s &lt;span class="o"&gt;=======================&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Neither test passes. They both get mad at the same spot, where they're checking that they got the post codes for "Whatever, Maine" and found that, oh wait no, they haven't been able to do that. &lt;/p&gt;
&lt;p&gt;But one test fails and one test errors: The test with the setup included fails. The test with the setup in the fixture errors. This difference is why I prefer to separate my setup (and teardown, which behaves the same way) from my test code. &lt;/p&gt;
&lt;h3&gt;The power of separating setup and teardown from your tests&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;More of the test code is about what's being tested, instead of being about how you get to the right place.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pytest will give you an error when code fails in the setup or teardown, and a failure when the code inside the test fails.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you're reusing setup or teardown, you'll only have to fix an issue in the code in one spot.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you're running a bunch of tests with shared setup or teardown in a pipeline, it'll be easier to diagnose when something outside what you're trying to test has gone awry. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Reasons to keep the setup and teardown with your tests&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You are early enough in the development process that the setup and teardown don't need to be used anywhere else yet. You can extract them when they do, but for now, it's a little faster to read with everything in one place.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you don't have your IDE setup correctly, PyCharm may not let you Ctrl + click through the code to follow the fixture code. (&lt;a href="https://www.jetbrains.com/help/pycharm/testing-frameworks.html#a036958d"&gt;Here's how to setup PyCharm to recognize pytest fixtures.&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you don't trust someone reading or debugging the test (other colleagues, future you, or possibly even other colleagues after you've moved to a different team) to be able to follow the code through to the fixtures. Or no one else is looking at the code!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;What have I missed?&lt;/h3&gt;
&lt;p&gt;What other reasons are there? What do you tend to do for your team when your code is shared? What do you tend to do for yourself when you only have your future self to help out? How would you have written this Python code differently? Which articles do you point to when you're explaining a separation of concerns? &lt;/p&gt;</description><category>pytest</category><category>python</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2022/07_30_the_power_of_separating_setup_and_teardown_from_your_tests/</guid><pubDate>Fri, 29 Jul 2022 22:00:00 GMT</pubDate></item><item><title>The Llandegfan Exploratory Workshop on Testing</title><link>https://elizabethzagroba.com/posts/2022/07_02_llewt/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;p&gt;An adventurous band of brave souls gathered in the northwest of Wales on the week of a transit strike in the United Kingdom. The topic: whole team testing. The conclusion: even the experts have trouble doing it well. &lt;/p&gt;
&lt;p&gt;The peer conference format was apt for exploring mostly failure. Brief experience reports proved ample fodder for in-depth discussions of the circumstances and reflections on possible alternatives. It's better to reflect on your less-than-successful work with your troubleshooting-inclined  peers than it is with your colleagues. &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Ash: When "Whole Team Testing" becomes "Testing for the Whole Team"&lt;/h3&gt;
&lt;p&gt;First up was Ash Winter with a story of culture clash between Ash and the teams he help guide in their testing (&lt;em&gt;cough&lt;/em&gt; did all the testing for &lt;em&gt;cough&lt;/em&gt;). Ash discovered over the course of his six-month contract that getting everyone to nod along to his suggestions of having unit tests, API integration tests, front-end tests, limited end-to-end tests, and exploratory tests was completely different from agreeing on what those were or building the habits on the teams to make them happen. Saying the words "sensible journeys" and "meaningfully testable" wasn't meaningful at all. &lt;/p&gt;
&lt;p&gt;By being a white man who looked the part, it was easy to get invited to the right meetings and seen as the authority. (How wonderful to be able to have a group all share in how outrageous this is compared to the experience other people have!) Ash was seen as an authority for all testing decisions, so teams looked to him rather than thinking for themselves. &lt;/p&gt;
&lt;p&gt;Upon reflection, Ash acknowledged he would have done better to slow down and understand the expectations of the project before jumping in with prescriptions from his consulting playbook. The teams needed to know what habits to build day-to-day instead of receiving what must have sounded like prophesies from the future. &lt;/p&gt;
&lt;h3&gt;Sanne: Problem Preference&lt;/h3&gt;
&lt;p&gt;In listening to a &lt;a href="https://app.thestorygraph.com/books/08f5dd67-b24a-436e-b46f-f5b3566fe44a"&gt;book-that-could-have-been-a-blog-post&lt;/a&gt;, Sanne came across the question: "How have you chosen the kinds of problem you pick up?" It made her think about her preference for focusing team habits and communication so she could bring underlying issues to the surface. She's got a predisposition to be proactive and will run at a problem a hundred different ways if you let her.&lt;/p&gt;
&lt;p&gt;On her new assignment, Sanne wants to let the team do the work instead of trying to do it all herself. So she's taking a radical step: she doesn't have access to the test environment. Her goal is to leave a legacy behind at the companies she works for, but it's too soon at her current assignment to evaluate how that will pan out.&lt;/p&gt;
&lt;h3&gt;Yours Truly: This Diagram Asked More Questions Than It Answered&lt;/h3&gt;
&lt;p&gt;I told the story of &lt;a href="https://elizabethzagroba.com/posts/2022/01_16_this_diagram_asked_more_questions_than_it_answered/"&gt;this blog post&lt;/a&gt;, with an addendum: I made a similar diagram for a different product that came in handy on the project I'm currently jumping into. &lt;/p&gt;
&lt;p&gt;It was a great delight to hear my peers admire the middle of my three diagrams, the one deemed unprofessional and literally laughed at by my colleagues. Sometimes the complexity of the model gets reveals more about the complexity of the situation than a clean, organized model does. &lt;/p&gt;
&lt;p&gt;I don't have any notes from what I said or what discussion occurred afterwards. Perhaps another participant's blog post will cover that bit in the coming weeks.&lt;/p&gt;
&lt;h3&gt;Duncan: Quality Centered Delivery&lt;/h3&gt;
&lt;p&gt;Duncan showed a truly dazzling amount of data extracted and anonomized from his five teams' JIRA stats. In so doing, he was able to prove to the teams (after wading through their nit-picks and expections) that a huge proportion of their time was spent idle: questions in need of an answer, code in need of a review, customers with no one to hear their feedback. Duncan deliberately dubbed this "idle" time to keep the focus on how the work was flowing rather than on optimizing for engineer busyness.&lt;/p&gt;
&lt;p&gt;To shrink idle time, developers, testers, and the PM started working in an ensemble. Idle times dropped dramatically. The team kept a Slack call open all day for collaboration. One fateful day, the too-busy subject matter expert and too-busy client dropped into the call. Wait time plumeted to zero. The story of this particular success proliferated through the organization thanks to the praise from an influential developer on the team: development was fun again. &lt;/p&gt;
&lt;p&gt;Duncan's was the one success story of the peer conference, though he was quick to point out that things could have changed after he left the assignment. &lt;/p&gt;
&lt;h3&gt;Vernon: How could I, Vernon, "The Quality Coach" Richards, make communication mistakes?!&lt;/h3&gt;
&lt;p&gt;It was a delight to get into the nitty-gritty details of a story that Vernon conflated and glossed over a bit in &lt;a href="https://agiletestingdays.com/2021/session/what-does-the-coach-in-quality-coach-mean/"&gt;his keynote at Agile Testing Days in 2021&lt;/a&gt;. And to see the relationship repaired and strengthened in real-time with a colleague who witnessed what went down. (I'm &lt;a href="https://twitter.com/ezagroba/status/1540454855218708486"&gt;just here for the gossip&lt;/a&gt;, clearly.) &lt;/p&gt;
&lt;p&gt;A colleague asked a tester to create a release plan for the team by themselves. As the tester's manager, Vernon thought this was an outrageous way to "collaborate". Without spending time to understand the colleague's context, beginning from a place of unconditional positive regard (as coaches are meant to), or verifying his approach with his own boss, Vernon went on the war path against this "bully".&lt;/p&gt;
&lt;p&gt;Remarkably, escalation and accusation did not solve the problem at hand: the tester didn't have the skills to build a test plan. Nor did Vernon's outrage address the real problem: there wasn't alignment at the organization about what the biggest fire was. Vernon wishes now that he'd protected his 1-on-1 time with his direct reports, and empowered them to address the situation rather than doing it for them.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;In summary, it is not easy, straightforward, or simple to get a whole team to test. &lt;/p&gt;
&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2022/snowdonia.jpg" style="display:block; margin-left: auto; margin-right: auto;" title="Our lunch walk with a view of Snowdonia"&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;Our lunch walk with a view of Snowdonia&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;A note about the surroundings for this gathering: spectacular. It was an 13-hour journey of four trains, one bus, and one bike to get back home, but it was worth it to be transported to views of Snowdonia National Park, a small town where the Welsh language holds a stronger footing than I expected, and a small group willing to make the same trek to geek out. &lt;/p&gt;
&lt;p&gt;Many thanks to &lt;a href="https://twitter.com/choibot"&gt;Chris Chant&lt;/a&gt;, &lt;a href="https://www.instagram.com/alisonmureillustrates/"&gt;Alison Mure&lt;/a&gt;, and &lt;a href="https://twitter.com/j19sch"&gt;Joep Schuurkes&lt;/a&gt; for making this conference possible, well-facilitated, and parent-friendly. Many thanks to my fellow participants: Ash Winter, &lt;a href="https://twitter.com/SimplySanne"&gt;Sanne Visser&lt;/a&gt;, &lt;a href="https://twitter.com/DuncNisbet"&gt;Duncan Nisbet&lt;/a&gt;, &lt;a href="https://twitter.com/TesterFromLeic"&gt;Vernon Richards&lt;/a&gt;, &lt;a href="https://twitter.com/gwendiagram"&gt;Gwen Diagram&lt;/a&gt;, and &lt;a href="https://twitter.com/mutantsounds"&gt;Jason Dixon&lt;/a&gt; for being my peers. And &lt;a href="https://twitter.com/beemure"&gt;B. Mure&lt;/a&gt; for listening well enough to capture &lt;a href="https://twitter.com/choibot/status/1542940993548423168"&gt;some of the goofy things I said&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;I look forward to making the trek again in the future. &lt;/p&gt;</description><category>LLEWT</category><category>peer-conference</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2022/07_02_llewt/</guid><pubDate>Fri, 01 Jul 2022 22:00:00 GMT</pubDate></item><item><title>From Crafting Project to Critical Infrastructure</title><link>https://elizabethzagroba.com/posts/2022/06_12_from_crafting_project_to_critical_infrastructure/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;figure&gt;&lt;img src="https://elizabethzagroba.com/images/posts/2022/megaphone.jpg"&gt;&lt;/figure&gt; &lt;h3&gt;Just for me&lt;/h3&gt;
&lt;p&gt;Three years ago, I had a shit laptop. My company makes a Windows desktop software product that allows you to build your own applications. Mac users working the software could open it on their Windows virtual machine in Parallels. When I did that, my company's software crashed, Parallels crashed, and then my whole Mac crashed. My job was to create app builds, run them, and test them. Due to my shit laptop, I couldn't do that locally. &lt;/p&gt;
&lt;p&gt;Luckily, our app was also hosted in our public cloud. Through the cloud UI, you could make a build, see which build was on which of your environments, and deploying a new build. But the UI was...not an ideal workflow for me. It was slow to load, required several steps of clicking and waiting for a minute or two - just long enough to get distracted thinking about something else. A deploy process that might optimally take ~8 minutes took ~15 minutes as my mind wandered and the UI didn't update immediately. &lt;/p&gt;
&lt;p&gt;I needed a one-step process to deploy, with updates frequent enough to hold my attention. I decided to abandon the UI for the API. &lt;/p&gt;
&lt;p&gt;I wrote a Python script that took command-line input and printed output to the console as the steps of the process progressed. I used my two crafting days that month to break down the problem, setup the whole repository, and get the code to a state where it built and deployed an app to an environment. &lt;/p&gt;
&lt;p&gt;A code review from Joep Schuurkes moved the code from a long list of functions to different classes corresponding to the API endpoints I was calling. I think the commands were limited to &lt;code&gt;--build&lt;/code&gt; and &lt;code&gt;--deploy&lt;/code&gt;. To make sure the refactor was successful, I'd scroll up in my Terminal history and run those two commands again. Crafting days on subsequent months brought a bit more error-handling to account for mistypes on my side or failures/timeouts from the APIs. &lt;/p&gt;
&lt;p&gt;At this point, it was a solid tool that saved me about a half-hour per day. I presented it to the developers on my team, offering them access to the repository so they too could benefit from this time-savings. &lt;/p&gt;
&lt;p&gt;They were deeply unimpressed. They didn't have shit laptops, they had Windows laptops, they didn't have to run Parallels, they weren't constantly switching between branches and needing actual builds of the application to test. To them, this script was relatively useless. That was fine by me! The time and frustration the script saved me was more than worth the effort to build it. I used it several times a day myself, and got to use it as an example in the "Whole Team Approach to Continuous Delivery" workshop I paired with Lisa Crispin on. That was more than enough. &lt;/p&gt;
&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2022/cloud-deployment-script.png" style="display:block; margin-left: auto; margin-right: auto;" title="Slide from the workshop"&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;Slide from the workshop&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;Pipelines emerge&lt;/h3&gt;
&lt;p&gt;Six months later, a developer on my team got excited to set up a pipeline for our application. They wanted to run static code analysis on a build of our application, and run our functional tests against a deployed application running in a deployed environment. They copy + pasted my code as a starting point for the build and deploy, copy + pasted the static code analysis scans from another unit, and connected the two in a pipeline that provided value to the wider team. Developers weren't great at running tests on their feature branches on their machines; now we had a pipeline that would do it for them. &lt;/p&gt;
&lt;p&gt;Other teams saw our pipeline and discovered my deployment script in the process. Rather than copy + pasting the code as my teammate did, they pinned their pipelines to the most recent version of the code on the master branch. &lt;/p&gt;
&lt;p&gt;With more users and use cases, fellow colleagues were eager to also use their two crafting days per month to add the features they needed. I'd receive pull requests of things I didn't need for a context I didn't have, or feature requests I used my limited crafting time to fulfill. Without a style guide, a linter, tests, or a set scope, it was hard to turn away pull requests weeks or months in the making that people were eager to see included in the master branch. I merged it to keep everyone unblocked. As the code grew to serve every individual need, I lost  interest in supporting what had originally been my darling pet project. &lt;/p&gt;
&lt;h3&gt;Still Valuable?&lt;/h3&gt;
&lt;p&gt;Two years after the original two-day crafting project, my role shifted from serving one team and one application to thinking about quality for the seven engineering teams in my unit. No longer did I need to deploy the application to a hosted environment. At the same time, my old team shifted where the repository was located, and the APIs I'd been calling in my script wouldn't do a lot of what they used to. &lt;/p&gt;
&lt;p&gt;I got to explore what it meant to be the Quality Lead for my unit, and nobody I served needed this script. I left the list of improvements I'd brainstormed for it languishing at the bottom of my personal Trello board. I didn't get any requests from other departments to use or update it. &lt;/p&gt;
&lt;h3&gt;Still Valuable!&lt;/h3&gt;
&lt;p&gt;Nine months later, the spark got reignited! A fork of the deployment script got presented in another unit, complete with a UI on top of it. Someone on my old project discovered my script, and decided to add a feature to upload builds from the new repository location to make it useful again. They shared the code for a review after just a few hours of effort. &lt;/p&gt;
&lt;p&gt;I had a chance to think through what parts of the repository were resuable for this use-case, which parts would be better copy + pasted for better readability, and got the merge request to a place where it fit in with the existing code style before anyone's heart and soul had been poured into it. &lt;/p&gt;
&lt;p&gt;Now a bloated script eight different actions, I decided to start writing tests for it. I didn't need the tests to make sure the existing code worked; everyone using it in their pipelines was enough to prove that. Tests will allow for future refactoring of the code and updating the version of the API I'm calling.&lt;/p&gt;
&lt;p&gt;The first test I added confirmed that the new functionality did what the code submitter expected it to do, gave me a way to change individual parameters  faster. and gave me the confidence and excitement I'd been missing. &lt;/p&gt;
&lt;p&gt;I'm just getting going on tests for the rest of the existing code, but I'm looking forward to it!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Why do I tell you this story? Well, here's what I think when I look back at the evolution of this code base: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;write tests, even before you &lt;em&gt;really&lt;/em&gt; need them&lt;/li&gt;
&lt;li&gt;set up a linter and coding guidelines before you give anyone else access to your repo&lt;/li&gt;
&lt;li&gt;if you want to be precious about your code, tell people to fork instead of submitting merge requests&lt;/li&gt;
&lt;li&gt;if you want the code to be in its most findable place and shareable state, you'll have to invest the time to collaborate with people on their changes&lt;/li&gt;
&lt;li&gt;good things come to those who wait :)&lt;/li&gt;
&lt;/ul&gt;</description><category>apis</category><category>automation</category><category>code-review</category><category>python</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2022/06_12_from_crafting_project_to_critical_infrastructure/</guid><pubDate>Fri, 17 Jun 2022 22:00:00 GMT</pubDate></item><item><title>Talk About Your Test Strategy</title><link>https://elizabethzagroba.com/posts/2022/06_06_talk_about_your_test_strategy/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;p&gt;I was invited to join a team's debate this week about what environment to point our third-party security testers towards for their upcoming penetration test. I asked what I thought was both an obvious question and something worth discussing with the team: &lt;/p&gt;
&lt;p&gt;"Do we want them to identify security risks, or are we just checking boxes here?"&lt;/p&gt;
&lt;p&gt;A combination of stunned silence and nervous giggling (muted over Zoom) ran through the team. "We don't talk about that out loud," the team lead told me. &lt;/p&gt;
&lt;p&gt;But that's exactly what I'm there to help uncover as the Quality Lead for this team and the others in our unit: how deep or shallow should our testing be? If our testing uncovers issues, are we interested in mitigating them? &lt;a href="https://elizabethzagroba.com/posts/2020/2020-05-24_if_a_test_falls_in_a_forest/"&gt;If not, why are we testing?&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;A Test Strategy in Five W's&lt;/h3&gt;
&lt;p&gt;This conversation took me back to a few years ago. I was working on a product in a phase before production-level quality that we dubbed "demo-driven development" in retrospect. We were showing off a combination of Powerpoint slides and small pieces of the product in order to gain more funding. A person interested in testing but with too large a scope to pay attention to my team in particular asked me for a test strategy.&lt;/p&gt;
&lt;p&gt;But the demos kept changing. What was important this week wouldn't be important the next. There wasn't a lot of exploratory testing being performed or automated tests being written. All my time was occupied in figuring out what had already been promised, what we were trying to sell, and filling in the gaps between those with a very specific path our product owner would follow during a demo, down to browser and screen resolution. &lt;/p&gt;
&lt;p&gt;I asked the person who wanted the test strategy document what they were going to do with it, what it might be used for. They sent me the enormous table where a link to my test strategy would be added, and clearly never looked at or noticed again.&lt;/p&gt;
&lt;p&gt;Could I document in an official test strategy document for my team that I wasn't doing much testing? It turns out, yes. &lt;/p&gt;
&lt;p&gt;I outlined the document with the five w's: who, what, when, where, and why. The whole document looked something like this. I don't think you even needed to scroll to read it. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Who: Our stakeholders are the people we're selling to, our product owner, and our team, in that order. &lt;/li&gt;
&lt;li&gt;What: We're testing one particular happy path in Firefox (our product owner's default browser).&lt;/li&gt;
&lt;li&gt;When: Due to the volatile nature of our product's priorities, our minimal testing has been concentrated after user stories are completed.&lt;/li&gt;
&lt;li&gt;Where: We're running the application locally for demos. We haven't had a chance to set everything up we'd need to have in a hosted environment.&lt;/li&gt;
&lt;li&gt;Why: We test to ensure that the one happy path is demonstrable to a customer in a demo, and to provide our product owner with the work-arounds for the gaps in our product. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I sent it to the person, expecting them to get back to me and tell me I couldn't do testing like this. Or at least, I couldn't write it down. But they never read the document! They thanked me, linked it in their table, and went on their merry way. &lt;/p&gt;
&lt;h3&gt;A Test Strategy in Stakeholders and Risks&lt;/h3&gt;
&lt;p&gt;I liked the way I shaped my test strategy around the very specific set of stakeholders and their risks in the five w's strategy. I wanted to bring this same connection to the teams I support when I started as Quality Lead for my unit. I ran a test strategy workshop for each of them to identify their stakeholders, talk about the risks that matter to them, and see how their team activities mitigated those risks. I got to this Miro board template after a few rounds. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;List the software the team is responsible for. (Our teams typically have legacy products they're maintaining in addition to the new things their roadmap focuses on.)&lt;/li&gt;
&lt;li&gt;Mind map the stakeholders for these products. &lt;/li&gt;
&lt;li&gt;Add stickies next to the stakeholders' names with their possible risks and concerns.&lt;/li&gt;
&lt;li&gt;Review the types of testing activities (things like exploratory testing, reviewing the production logs, static code analysis, etc.) for comprehension and completeness. &lt;/li&gt;
&lt;li&gt;Move each testing activity onto the impact (it's important vs. it's not important) and priority (we do this vs. we don't do this) quadrants.&lt;/li&gt;
&lt;li&gt;Vote on stickies that landed in an unexpected spot.&lt;/li&gt;
&lt;li&gt;Talk about the most-voted stickies in order, and identify action points with owners from there.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Part of this workshop was to show the teams that not every piece of testing is something that matters to the stakeholders. I didn't expect them to do every possible kind of testing imaginable. But I did want them to all understand and agree what kinds of testing they were and weren't doing. I got them talking about it out loud.&lt;/p&gt;
&lt;h3&gt;A Test Strategy Derived from a Vision&lt;/h3&gt;
&lt;p&gt;Believe it or not, a one-time workshop was not enough to get everyone to identify and build the perfect test strategy! As the teams grew and the workshop faded from memory, I got questions about the test strategy for the teams. I heard about goals of "bug-free software" and asked about "what best practices to follow" to get there. &lt;/p&gt;
&lt;p&gt;As fun as it would be to pontificate about how &lt;a href="https://app.thestorygraph.com/books/8ba29269-1843-4ac1-be0c-226752b17937"&gt;there is no such thing as bug-free software&lt;/a&gt;, and &lt;a href="https://www.jrothman.com/wp-content/uploads/2014/03/Cynefin.jpg"&gt;there are no best practices outside of the obvious domain&lt;/a&gt;, that doesn't help people know what to do. So I wrote a "Quality Vision" document. (Pro tip: use a noun you wouldn't use for anything else so it's easy to pull it up by typing "vision" in your browser bar.) The Quality Vision for the unit places trust in the expertise of the teams to choose their own ways forward. It has things like: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Is our product at the right level of quality to release right now?&lt;/strong&gt; This is a constant conversation between the development team and your product owner. Think about the risks and concerns of the customers you're targeting.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data Security&lt;/strong&gt; We're not to use production/customer data for development purposes outside support incidents. Here's a link to a more in-depth document from our Security team.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reliability&lt;/strong&gt; Here's a link to the document of what we promise our customers in our service-level agreement. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's not going to tell you what the right answer is for your team right now, but it'll give you some things to point to when you're discussing quality with your team. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Because after all:&lt;/p&gt;
&lt;p&gt;Quality is value to some person who matters at a particular point in time.&lt;/p&gt;
&lt;p&gt;For the penetration test, the team lead quickly followed their "We don't talk about that out loud" comment with a "why not both?" jest.  Why can't we both check the boxes for the authorities, and uncover valuable information that we want to act on? &lt;/p&gt;
&lt;p&gt;Indeed, that's where we landed. We decided to point the security team to the production environment because that would reveal the best information. Unless that setup takes too long for the team, then we'll point them to the test environment. But regardless: we'll tell our bosses and our product owner what we're doing and why. We'll talk about our test strategy out loud. &lt;/p&gt;
&lt;p&gt;How have you started a conversation about quality with your team? When have you decided not to test something? What have you not tested and also not discussed?&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2022/megaphone.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@patrickian4"&gt;Patrick Fore&lt;/a&gt; on &lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;</description><category>communication</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2022/06_06_talk_about_your_test_strategy/</guid><pubDate>Sun, 05 Jun 2022 22:00:00 GMT</pubDate></item><item><title>CVs From A Hiring Perspective</title><link>https://elizabethzagroba.com/posts/2022/05_27_cvs_from_a_hiring_perspective/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;p&gt;In my department at work, every tester is on their own team. I'm in a position where I look at tester resumes before we decide to screen them. Some of the resumes come in from people applying on the company website. We've also got a recruiter searching for people on LinkedIn. She asked me before we posted a new job: if we're not requiring experience with a particular tech stack, what should she search for?&lt;/p&gt;
&lt;p&gt;I didn't have a great answer for her at first. It took me some time to think about what we'd value in this role, what would make a candidate's resume stand out. &lt;/p&gt;
&lt;p&gt;I don't look for particular buzzwords on resumes, and no particular buzzword can eliminate you from the hiring process. But I do look for some of the same &lt;a href="https://www.ministryoftesting.com/dojo/lessons/defining-story-completion-as-a-software-tester"&gt;things I look for in a test report&lt;/a&gt;: &lt;a href="https://www.ministryoftesting.com/dojo/lessons/how-to-interview-like-a-tester"&gt;an indicator of the depth and quality of your work, and an ability to connect your work to the value to the development team or the business&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A resume that regurgitates the calendar or job description of the candidate doesn't stand out to me:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Attended standup, refinement, sprint planning, sprint review&lt;/li&gt;
&lt;li&gt;Made test plan, executed tests, reported tests&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I want to know what was hard about it. I want to know who else was there and how you interacted with them. I want to know what you do that other people in your position don't do. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Facilitated hybrid standup across three time zones&lt;/li&gt;
&lt;li&gt;Refined ideas into user stories with acceptance criteria that met our definition of ready&lt;/li&gt;
&lt;li&gt;Spoke to key stakeholders to identify risks and incorporate them into a test plan&lt;/li&gt;
&lt;li&gt;Shared test results verbally to spark conversation with developers about impact&lt;/li&gt;
&lt;li&gt;Presented test plan at guild to inspire other testers to shift left&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I was on a &lt;a href="https://www.ministryoftesting.com/dojo/series/testbash-careers-2022/lessons/discussion-creating-cvs-that-get-noticed-elizabeth-zagroba-nicola-martin-peet-michielsen"&gt;TestBash Careers panel&lt;/a&gt; about having a CV that gets you noticed. (I regret to inform you that my ability to think of an answer and unmute are not always fast enough to chime in!) I'm digging into the unanswered questions on &lt;a href="https://club.ministryoftesting.com/t/testbash-careers-2022-discussion-with-elizabeth-zagroba-nicola-martin-a-peet-michielsen/59274"&gt;the club thread&lt;/a&gt;, and can tell you that my fellow panelists and host are more shrewed about when or when not to reveal a personal detail on a resume. I am privileged enough to &lt;a href="https://elizabethzagroba.com/assets/resumes/trustworthy-resume.pdf"&gt;lean towards the truth&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Back at work, I told the recruiter there were a couple things should could search for: exploratory testing and integration testing. Our desire to cast as wide and inclusive a net as possible has been an investment of her time, and the time of the team members who speak to the candidates first. It's not cheap. I hope it's worth it. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://jobs.lever.co/mendix/92c1c255-2455-4c25-bd78-a05c154d5f8e"&gt;Join us if you're interested&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2022/women-interview.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@wocintechchat?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Christina @ wocintechchat.com&lt;/a&gt; on &lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;</description><category>career</category><category>communication</category><category>testbash</category><category>writing</category><guid>https://elizabethzagroba.com/posts/2022/05_27_cvs_from_a_hiring_perspective/</guid><pubDate>Mon, 30 May 2022 22:00:00 GMT</pubDate></item><item><title>Communicate Using Three Layers of Information</title><link>https://elizabethzagroba.com/posts/2022/05_12_communicate_using_three_layers_of_information/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;p&gt;I've joked about writing Buzzfeed-style clickbait titles for JIRA tickets: &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Stuck in purgatory after hitting logout &lt;br&gt;&lt;br&gt;(Maybe not so clickbait-ey but I logged this for more than one system I tested. The navigation had a different login state than the page and you couldn't escape.)&lt;/p&gt;— Elizabeth Zagroba (@ezagroba) &lt;a href="https://twitter.com/ezagroba/status/1503647930061885444?ref_src=twsrc%5Etfw"&gt;March 15, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;Partly, clickbait titles gave me an easy way to search the database, or type a few words in my browser bar, to pull up the right issue quickly. The JIRA ticket itself had steps to reproduce, an explanation of why it was important, and an annotated screenshot for people to easily understand if what I saw was happening on their machine. &lt;/p&gt;
&lt;p&gt;Partly, clickbait titles gave us a convenient shorthand to help us remember whether it's this logout issue or some other logout that we're talking about. &lt;/p&gt;
&lt;p&gt;Partly, clickbait titles made the developers interested to investigate and pick up the issue. &lt;/p&gt;
&lt;p&gt;I was reading Giles Turnbull's &lt;a href="https://app.thestorygraph.com/books/876240f0-8657-4482-b5c5-8160bef6d372"&gt;&lt;em&gt;The agile comms handbook&lt;/em&gt;&lt;/a&gt; last weekend and found the &lt;em&gt;lure&lt;/em&gt; part of the three communication layers he described (&lt;em&gt;lure&lt;/em&gt;, &lt;em&gt;context&lt;/em&gt;, and &lt;em&gt;detail&lt;/em&gt;) reminiscent of the clickbait JIRA ticket titles I'd written. And that I'd see these three communication layers (title, description, details) described similarly in lots of places before. &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Lure, context, detail&lt;/h4&gt;
&lt;p&gt;This whole (short and great) &lt;em&gt;The agile comms handbook&lt;/em&gt; is about how to communicate in ways that move as fast as the work does on an Agile team while still being effective for busy people to consume. In the book, Giles Turnbull describes creating different layers of information as &lt;em&gt;lure&lt;/em&gt;, &lt;em&gt;context&lt;/em&gt;, and &lt;em&gt;detail&lt;/em&gt;. &lt;em&gt;Lure&lt;/em&gt; grabs the attention of busy people and gets them interested in knowing more. &lt;em&gt;Context&lt;/em&gt; gets people to the point where they know just enough. &lt;em&gt;Detail&lt;/em&gt; is for people who need to know more and have the time to follow a link to another page, read a whole PDF, etc. &lt;/p&gt;
&lt;h4&gt;Why, how, what&lt;/h4&gt;
&lt;p&gt;Simon Sinek describes it as &lt;em&gt;why&lt;/em&gt;, &lt;em&gt;how&lt;/em&gt;, &lt;em&gt;what&lt;/em&gt; in &lt;a href="https://www.youtube.com/watch?v=qp0HIF3SfI4"&gt;this TED Talk on "How great leaders inspire action"&lt;/a&gt;. He gives the example of an advertisement for Apple, where starting with the &lt;em&gt;why&lt;/em&gt; is much more inspiring and motivating than starting with the &lt;em&gt;what&lt;/em&gt;. Getting people to buy into your vision will ensure that they follow along to the goal. &lt;/p&gt;
&lt;h4&gt;Title, executive summary, list of issues&lt;/h4&gt;
&lt;p&gt;When we worked together, &lt;a href="https://twitter.com/vds4"&gt;Martin Hynie&lt;/a&gt; taught me to write weekly test reports with a &lt;em&gt;title&lt;/em&gt;, &lt;em&gt;executive summary&lt;/em&gt;, and &lt;em&gt;list of issues&lt;/em&gt;, with the idea that the &lt;em&gt;executive summary&lt;/em&gt; should be enough for the busy person to understand, but that less busy and more curious people would want the detail in the &lt;em&gt;list of issues&lt;/em&gt;. &lt;/p&gt;
&lt;h4&gt;Intent, location, details&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://twitter.com/maaretp"&gt;Maaret Pyhäjärvi&lt;/a&gt; &lt;a href="https://www.ministryoftesting.com/dojo/lessons/mob-testing-an-introduction-experience-report"&gt;describes the ensemble (mob) programming practice&lt;/a&gt; of communicating at the highest level of abstraction (&lt;em&gt;intent&lt;/em&gt;) before being more specific about where we're going (&lt;em&gt;location&lt;/em&gt;) or if necessary, mouse clicks and keystrokes (&lt;em&gt;details&lt;/em&gt;). Giving keystrokes and mouse clicks to someone who knows how to operate the software is frustrating, but so is giving a high-level explanation to someone who's never used the software before. Expressing intent first can lead to better action, even if another member of the ensemble has a different action in mind than you do. Being able to identify when to jump between the levels is key for effective communication. Knowing when to jump to a different layer of communication is the skill I find hardest to build while learning to ensemble. &lt;/p&gt;
&lt;h4&gt;Title, lede, body&lt;/h4&gt;
&lt;p&gt;In the content management system I tested for New York Public Radio, article pages were broken down into &lt;em&gt;title&lt;/em&gt;, &lt;em&gt;lede&lt;/em&gt;, and &lt;em&gt;body&lt;/em&gt;, presumably reflecting something every journalist learns on their first day at a newspaper. On the website, &lt;em&gt;title&lt;/em&gt; and &lt;em&gt;lede&lt;/em&gt; were displayed on the homepage and tag pages. You'd only see the &lt;em&gt;body&lt;/em&gt; once you clicked in to read or listen to the story. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I read so many JIRA tickets and Slack messages that only contain the lowest/detail level of information. The person trying to bring everyone else up-to-speed on an issue does need to include all the detail. It makes sense that that's where their mind is. Giles Turnbull identifies why the detail layer of information is the default: the details already exist. Creating the other lure and context layers of information takes more work. &lt;/p&gt;
&lt;p&gt;Being able to zoom out and answer the kinds of questions you'd expect in a refinement meeting ("Who will benefit from this? How does it work now and why does it need to change?") helps you prioritize the work. It helps the team understand how what they're doing fits into the bigger picture. Learning how to write the &lt;em&gt;lure&lt;/em&gt; and the &lt;em&gt;context&lt;/em&gt; is a separate technical skill that needs to be recognized and built. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;How did you learn to break down your communication into different layers? Do the title, headers, and paragraphs of this blog post fit this model? Which of these breakdowns resonates most with you? Where are you practicing communicating this way?&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2022/colorful-layers.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@snapsbyclark?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Clark Van Der Beken&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/elevated?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;</description><category>communication</category><category>writing</category><guid>https://elizabethzagroba.com/posts/2022/05_12_communicate_using_three_layers_of_information/</guid><pubDate>Wed, 11 May 2022 22:00:00 GMT</pubDate></item><item><title>SoftTest 2019 in Dublin</title><link>https://elizabethzagroba.com/posts/2022/05_01_softtest_2019_in_dublin/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;p&gt;I got the chance to present at SoftTest in Dublin, Ireland in 2019. It was the last time they were going to host the conference, but unlike most events, they knew that even in 2019. So I was even more delighted to be part of it and finally see a bit of Dublin (the original Boston, MA if you ask me).&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Janet Gregory gave a talk version of a workshop I'd co-facilitate with Lisa Crispin a few weeks earlier about testing in DevOps. She connected the questions we ask and the work that we do as testers to the business risk. Existential questions like "Why am I here?" and "Are we delivering the right thing?" are encouraged. Visualizing our work and collaborating allows us to get feedback from small experiments.&lt;/p&gt;
&lt;p&gt;In one experiment, Conor Fitzgerald and Rob Meaney tried team-based testing. REcurring issues like build failures, end-to-end testing failures, and ultimately rework motivated their teammates to embrace change. They started from automation completely devoid of risk analysis and testing tasks invisible on the board. They used their crisis to build the new habit of radiating information about testing, making both their own work and the testing work to be picked up as visible and pick-up-able as possible.&lt;/p&gt;
&lt;p&gt;Margaret Dineen spoke about making quality engineering visible and tagible, and connecting it to business value. The strategic intent of the organization informs what valuable software you deliver, and vice versa. Identifying the Impact, Confidence, and Ease of implementation (ICE) drives the software teams to actually deliver things the user cares about. Tracking outcomes across silos only works if you're open to measuring how badly disconnected software delivery is from the needs of your users.&lt;/p&gt;
&lt;p&gt;Joe Joyce spoke about quality in an API's lifecycle something I would come to know and understand better in the time since this conference. He focused on getting the specs right, since they're faster to change and rollback, and serve as a point of collaboration even before the code or test code has been written. I couldn't agree more.&lt;/p&gt;
&lt;p&gt;Hugh McCamphill's talk was about knowing your automation. Making abstractions, while inherently leaky, should be done at the domain rather than the implementation level to cut down on maintenance costs. Focus on saving time building; invest in learning. &lt;/p&gt;
&lt;p&gt;Jean-Paul Varwijk gave a talk I remembered as a sweeping history of software testing, but see now in my notes that he called it "Testing as Advantage". Testing must be an advantage if it's stuck around this long, right? Build up collaboration skills to remove the separation needed to progress. Supply information continuously. Collecting sensible metrics and using them for the right purpose will tell you way more than tests will. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;What a high-quality collection of speakers and talks for such a local community. This was one of the last places I got to travel before travelling became infitinitely harder. I'm so grateful to have been learning together in the same place at the same time as so many greats.&lt;/p&gt;</description><category>conference</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2022/05_01_softtest_2019_in_dublin/</guid><pubDate>Sat, 30 Apr 2022 22:00:00 GMT</pubDate></item><item><title>What's You're Missing in Your Conference Abstract: Spoilers</title><link>https://elizabethzagroba.com/posts/2022/04_10_what_youre_missing_in_your_conference_abstract_spoilers/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;p&gt;I've had the unique honor of participating in the program committee for &lt;a href="https://agiletestingdays.com/"&gt;Agile Testing Days&lt;/a&gt; for 2021 and 2022. I get to see anonymized submissions for talks and workshops (not keynotes), rate the entries on a number of criteria, and provide a few sentences of feedback for the author and the conference organizers to understand how and whether the submission fits in the program. I've also helped review papers in the &lt;a href="https://www.ministryoftesting.com/testbash/review"&gt;Ministry of Testing call for papers&lt;/a&gt;. Anyone can. &lt;/p&gt;
&lt;p&gt;Almost all of them are missing one thing: spoilers. I want spoilers. I want them to tell me how they faced a problem or general trend in the market at their job and what they did about it. I want enough detail, any detail, to know what I'll be seeing beyond the first two slides. &lt;/p&gt;
&lt;p&gt;Here's what that looks like for a talk and a workshop. &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Talks&lt;/h3&gt;
&lt;p&gt;For a talk, I'm expecting a particular format: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Description of a problem the author has experienced&lt;/li&gt;
&lt;li&gt;Journey or decision point that led the author to change their behavior&lt;/li&gt;
&lt;li&gt;Details about the direction going forward&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Sometimes I'm missing the author's personal connection in 1. (looks like they'll summarize a book, article, someone else's work, etc.) or why a change was needed in 2. &lt;/p&gt;
&lt;p&gt;But it's 3. that I long for. Authors tell me that they solved a problem, or had trouble solving it, but not how. "I spent three months migrating our tests from Selenium to Playwright and faced trouble." Where did you face trouble? Was it because of differences between the languages? Developers couldn't read the failing test output anymore? What happened?? Tell me about the journey of what that looked like. &lt;/p&gt;
&lt;h3&gt;Workshops&lt;/h3&gt;
&lt;p&gt;For a workshop, I want to see: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Description of a skill the author was missing&lt;/li&gt;
&lt;li&gt;Journey where the author built this skill&lt;/li&gt;
&lt;li&gt;Journey participants will go on to build this skill&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Workshops ideas are great with 1. and often include 2. But you know what participants will mostly care about before they get trapped in a room for hours with you? That's right, it's 3. Will this be a lecture disguished as a workshop so the author has more time to speak? Will participants be working in groups? Will this get them on the first step towards building a skill? How much will they be able to do differently at work on Monday? Give me some sense of what the activities are, how long they might take, and how much you expect people to achieve during them. &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;More tips on conference submissions&lt;/h3&gt;
&lt;p&gt;Anytime I submit an abstract to a conference, I find something in Rob Lambert's &lt;a href="https://www.linkedin.com/pulse/blazingly-simple-guide-submitting-conferences-rob-lambert/"&gt;Blazingly Simple Guide To Submitting To Conferences&lt;/a&gt; that makes me reconsider what I've written. Read it if you're anywhere on the journey from "do I even have an idea for this conference?" to "you mean I'm supposed to speak on stage in front of all these people sitting before me?"&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/lisihocke"&gt;Lisi Hocke&lt;/a&gt; also has a &lt;a href="https://www.lisihocke.com/p/speaking-at-conferences.html"&gt;soup-to-nuts overview of conference speaking&lt;/a&gt; that will get you feeling like you can do this. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2022/orange-desert.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@brandi1?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Brandi Redd&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;</description><category>conference</category><category>testing</category><category>writing</category><guid>https://elizabethzagroba.com/posts/2022/04_10_what_youre_missing_in_your_conference_abstract_spoilers/</guid><pubDate>Sat, 09 Apr 2022 22:00:00 GMT</pubDate></item></channel></rss>