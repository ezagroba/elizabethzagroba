<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Elizabeth Zagroba: Software Tester</title><link>https://elizabethzagroba.com/</link><description>Elizabeth Zagroba: Software Tester</description><atom:link href="https://elizabethzagroba.com/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>© 2020 &lt;a href="mailto:me@elizabethzagroba.com"&gt;Elizabeth Zagroba&lt;/a&gt; Mozilla Public License 2.0</copyright><lastBuildDate>Mon, 27 Apr 2020 15:19:32 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Errors You Might Encounter While Editing an Open API Specification</title><link>https://elizabethzagroba.com/posts/2020/2020-04-27_errors_you_might_encounter_while_editing_an_open_api_specification/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;div&gt;&lt;p&gt;One of the tasks for my team last week was updating an existing GET API call in our specification with some new fields. The &lt;a href="https://swagger.io/specification/"&gt;Open API Specification&lt;/a&gt;, formerly known as Swagger, allows you to provide the details for building in API in a compact, informative way. When you've got the authentication set up correctly, you can use the examples to actually call the API right from the spec!&lt;/p&gt;
&lt;p&gt;My team builds with a framework that has the power to auto-generate API specs in this format. We've chosen to write them ourselves rather than have them auto-generated so we can be more specific in what kinds of errors and error messaging people will encounter for different calls. For example, a 404 Not Found might make sense on a GET call for a specific resource, but not for a search call.&lt;/p&gt;
&lt;p&gt;When you open &lt;a href="http://editor.swagger.io/"&gt;http://editor.swagger.io/&lt;/a&gt;, you should see a two-pane view of the editor on the left and the rendering on the right. If you've opened this URL before, your browser session will remember and display your most recent changes. If it's the first time you've opened it, the example specification of the Swagger Petstore should appear like this:&lt;/p&gt;
&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2020/petstore-example-spec.png" style="display:block; margin-left: auto; margin-right: auto;" title="Petstore example spec"&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;Petstore example spec&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I hope that in describing the errors I encountered, you can keep an eye on them as you're editing rather than having to go back through the specification at the end to figure out what went wrong. &lt;/p&gt;
&lt;h3&gt;Errors I encountered&lt;/h3&gt;
&lt;h4&gt;Red errors in the box at the top and next to line numbers in editor&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2020/swagger-red-error-at-top.png"&gt;&lt;/p&gt;
&lt;p&gt;Indentation errors and using reserved characters (I found square brackets, dashes, colons at least fall into this category) in unexpected ways will likely give you an error in a red box between the navigation and the title of the spec. &lt;/p&gt;
&lt;p&gt;If you're lucky, the error corresponds to the line it mentions, you find a red X on that line, and you'll be able to figure out what went wrong there. &lt;/p&gt;
&lt;p&gt;If you're less lucky, the line mentioned in the red box will refer to the beginning of the next code block that's unparsable because of the syntax error, or the first place where the reserved character you've used incorrectly is actually used correctly. &lt;/p&gt;
&lt;p&gt;The hardest part about these errors is that you may not notice them. If you're scrolled down the page far enough, you won't see the error box or the red X as you're creating the error. &lt;/p&gt;
&lt;h4&gt;Spinning without loading&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2020/swagger-spinner-failed-reference.png"&gt;&lt;/p&gt;
&lt;p&gt;If you're getting a spinner where a part of the specification should be loading, you've got a issue with the reference to a schema. &lt;a href="https://swagger.io/docs/specification/data-models/"&gt;Schemas&lt;/a&gt; allow you to chunk out and reuse part of the spec, with a reference to them in another place. &lt;/p&gt;
&lt;p&gt;I kept getting the spinner when I referred to a schema that didn't exist, either because I'd updated the name (but not the reference to it) or because I'd screwed up whether it was singular or plural. Fixing the error isn't always enough to make this particular error disappear. Reloading the page will make it re-evaluate what you've got. &lt;/p&gt;
&lt;h4&gt;😱 could not render this component, see the console.&lt;/h4&gt;
&lt;p&gt;What a fun and exciting mistake you've made in the specification, to cause this very comforting and reassuring error message. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2020/swagger-scream.png"&gt;&lt;/p&gt;
&lt;p&gt;Like the endless spinning error, this one means something very specific: you've designated something as an array, but you haven't explained what kinds of items appear in the array. &lt;a href="https://swagger.io/docs/specification/data-models/data-types/#array"&gt;Adding a description or reference in the items section&lt;/a&gt; should do the trick. &lt;/p&gt;
&lt;h3&gt;Editing without the Open API editor&lt;/h3&gt;
&lt;p&gt;It's possible the Open API web editor was not the best tool for this job. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2020/swagger-vs-code.png"&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://marketplace.visualstudio.com/items?itemName=42Crunch.vscode-openapi"&gt;Visual Studio Code Open API plugin&lt;/a&gt; did make the red errors obvious enough that you could see them from anywhere in the document. It also gave me the collapsed version of the longer spec in alphabetical order. This allowed me to navigate around without remembering the line numbers of where I dumped the schema separately from the overall spec. Unfortunately the extension didn't catch when I referred to a spec that didn't exist, but I expect seeing the list of schemas on the side would help discover this mistake. The extension also if I didn't define the objects in an array.  &lt;/p&gt;
&lt;p&gt;There's also an &lt;a href="https://github.com/swagger-api/swagger-ui"&gt;Open API spec tool for offline use&lt;/a&gt;, but the instructions went beyond the interest I had for this blog post. Try it out yourself, and maybe I will the next time I've got to edit these specs. &lt;/p&gt;&lt;/div&gt;</description><category>api-specs</category><category>apis</category><category>open-api</category><category>swagger</category><guid>https://elizabethzagroba.com/posts/2020/2020-04-27_errors_you_might_encounter_while_editing_an_open_api_specification/</guid><pubDate>Sun, 26 Apr 2020 22:00:00 GMT</pubDate></item><item><title>Remembering TestBash Brighton 2018</title><link>https://elizabethzagroba.com/posts/2020/2020-04-19_remembering_testbash_brighton-2018/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;div&gt;&lt;p&gt;TestBash Brighton was one of 10,000 things I had to do in the weeks just before I left my whole life (family, friends, job, apartment, belongings) and moved across the ocean into the unknown. It was the first place I'd gotten to share that big news in person, with people who would become larger parts of my life once I moved. Visiting the city where I'd studied during university and first thought "I could leave the United States" brought things full circle for me. &lt;/p&gt;
&lt;p&gt;I paired on presenting a brand-new workshop and talk, with two different people. This would have been a lot, even without all the uncertaincies and distractions swirling in my life those days. After hustling to adjust the schedule of and present our morning workshop, I distinctly remember choosing to skip the afternoon one I'd planned on attending in order to fill out immigration and relocation paperwork. I'm shocked to find I was able to focus enough on some other peoples' talks to take coherent notes about them.&lt;/p&gt;
&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2020/pavilion.jpg" style="display:block; margin-left: auto; margin-right: auto;" title="Royal Pavilion in downtown Brighton"&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;Royal Pavilion in downtown Brighton&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://twitter.com/anusha_n"&gt;Anusha Nirmalananthan&lt;/a&gt;'s talk about sharing a chronic illness sticks with me today. One of the things I love to jump into is troubleshooting. I hear about a problem, and I'm already thinking of ways to solve it, and asking about what you've tried already. Anusha reminded us that listening and not saying anything can be more helpful and powerful than all the patronizing "Have you tried...?" questions in the world.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://twitter.com/ewebber"&gt;Emily Weber&lt;/a&gt; spoke about communities of practice, which have always been billed as "guilds" in places where I've worked. Emily encouraged us to connect with people around our organizations in our discipline in a supportive, voluntary group without a hierarchy or an end date. While the occasional guild meeting I've attended has turned into a groan-fest, dedicating time and energy to fostering change (to code, to job descriptions, to your team's way of working, etc.) gives me that "I did something today" feeling. I'm grateful to be able to make time to learn with my colleagues, and build a support network for when I need advice from outside the bubble of my team. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I loved &lt;a href="https://twitter.com/Rosicadia"&gt;Rosie Hamilton&lt;/a&gt;'s talk about logic in testing because it drove me back to the basics. How do we decide what is true? How do I describe my thought process? When the availability of relevant cases prevents effective inductive reasoning (determining a heuristic), we have to move to abductive reasoning (determining the likeliest explanation from the available information). Realizing when you're doing this and what other information might be available to you elevates your testing.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2020/logic.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Looking back at my notes from &lt;a href="https://twitter.com/AWGHodder"&gt;Aaron Hodder&lt;/a&gt;'s talk on structured exploratory testing make me realize how much freedom I can have in my testing when working with an inattentive team. His suggestions about making for easier reporting, fewer rabbit holes, and predictability of a time-table suggest that someone is really breathing down your neck about the status, progress, and depth of your work. The biggest advantage I've had in sharing my testing charters with my team is that I find out which ones aren't valuable before I spend time executing them. Actively choosing not to test something when we don't care about the outcome or the risk it poses is very effective work.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://twitter.com/alanpage"&gt;Alan Page&lt;/a&gt; spoke about the modern testing principles he'd been shaping on his podcast for a while. My notes boil it down to: testers should do less testing and more coaching. This has certainly served me on teams producing too much for me to personally go as deep as I'd like in testing, but it also pays off when I'm out of the office or unavailable at the office. Working on a team that knows how to test means I get to look at higher-quality code, with more interesting bugs. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://twitter.com/northern_tester"&gt;Ash Winter&lt;/a&gt; gave a talk immediately after mine, so perhaps I did not gather everything from it. But I did save these tid-bits: a pipeline is built to prove that something shouldn't go out. A pipeline can provide a massive amount of information, but without a strategy, too much data doesn't help humans make better decisions. Small things you can do to make huge improvements: deploy regularly, and learn source control.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Reflecting on the open space, the social events, and the atmosphere at TestBash Brighton 2018 makes me wish for the experience we all missed at the now-cancelled event in 2020. Jumping into the unknown seemed so doable when I knew there'd be so many people to share with and learn from on this side of the Atlantic. I don't know when I'll see you all again, but I look forward to that possibility. &lt;/p&gt;
&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2020/stamner.jpg" style="display:block; margin-left: auto; margin-right: auto;" title="Can't go to Britain without a proper tea"&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;Can't go to Britain without a proper tea&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;</description><category>conference</category><guid>https://elizabethzagroba.com/posts/2020/2020-04-19_remembering_testbash_brighton-2018/</guid><pubDate>Sat, 18 Apr 2020 22:00:00 GMT</pubDate></item><item><title>Reflecting on Let’s Test 2017</title><link>https://elizabethzagroba.com/posts/2019/2019-09-15_reflecting-on-let-s-test-2017/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;div&gt;&lt;p name="f2d3" id="f2d3" class="graf graf--p graf-after--h3"&gt;Good ideas come back around. As I sit here re-reading my notes from Let’s Test 2017, I remember the thrill of coming across so many new ideas there, and realize how much these three things stick out to me even now.&lt;/p&gt;

&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2019/valley-lodge.jpeg" style="display:block; margin-left: auto; margin-right: auto;" title="Valley Lodge &amp;amp; Spa, Magaliesburg, South Africa"&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;Valley Lodge &amp;amp; Spa, Magaliesburg, South Africa&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol class="postList"&gt;&lt;li name="dc01" id="dc01" class="graf graf--li graf-after--figure"&gt;Causal loop diagrams&lt;/li&gt;&lt;/ol&gt;

&lt;p name="1b99" id="1b99" class="graf graf--p graf-after--li"&gt;It’s possible I’d seen a causal loop disgram before, but it wasn’t until I went to Jo Perold and Barry Tandy’s “Visualize your way to better problem solving” workshop that I knew the name for them. &lt;a href="https://www.isixsigma.com/tools-templates/cause-effect/causal-loop-diagrams-little-known-analytical-tool/" data-href="https://www.isixsigma.com/tools-templates/cause-effect/causal-loop-diagrams-little-known-analytical-tool/" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;Here’s an example of how connecting nouns with verbs via bubbles and letters really clears things up.&lt;/a&gt;&lt;/p&gt;

&lt;p name="0c13" id="0c13" class="graf graf--p graf-after--p"&gt;During the workshop, Jo and Barry talked about how drawing a diagram of your software in this way can help you discover interaction points between systems. Sharing the diagram is one way to take the invisible software you’re building into a visible space. That allows us to have a conversation about the model, discover if we’re on the same page, and take steps to improve the model and ultimately the software. The more visualizations I see of process and influence on the job, the more I realize they’re exposing &lt;a href="https://www.thoughtworks.com/insights/articles/demystifying-conways-law" data-href="https://www.thoughtworks.com/insights/articles/demystifying-conways-law" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;Conway’s Law&lt;/a&gt;.&lt;/p&gt;

&lt;p name="b91d" id="b91d" class="graf graf--p graf-after--p"&gt;Elisabeth Hendrickson wrote in &lt;a href="https://www.goodreads.com/book/show/15980494-explore-it" data-href="https://www.goodreads.com/book/show/15980494-explore-it" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;&lt;em class="markup--em markup--p-em"&gt;Explore It!&lt;/em&gt;&lt;/a&gt;&lt;em class="markup--em markup--p-em"&gt; &lt;/em&gt;about how causal loop diagrams can help you discover interesting areas to test. She pointed out that transitions from one state to another take time, and there’s lots to be discovered during the moments of transition about interruptions, errors, and incomplete states.&lt;/p&gt;

&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2019/causal-loop.png" style="display:block; margin-left: auto; margin-right: auto;" title='Repenning, Nelson &amp;amp; Sterman, John. (2003). "Nobody Ever Gets Credit for Fixing Problems That Never Happened: Creating and Sustaining Process Improvement." Engineering Management Review, IEEE. 30. 64- 64. 10.1109/EMR.2002.1167285.'&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;Repenning, Nelson &amp;amp; Sterman, John. (2003). "Nobody Ever Gets Credit for Fixing Problems That Never Happened: Creating and Sustaining Process Improvement." Engineering Management Review, IEEE. 30. 64- 64. 10.1109/EMR.2002.1167285.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p name="5105" id="5105" class="graf graf--p graf-after--figure"&gt;Nelson Repenning and John Sterman used a causal loop diagram to display a human problem: not prioritizing time for improving. Read their whole article to discover terrifying news about how much time you’re wasting all the time by not stopping to improve!&lt;/p&gt;

&lt;p name="50d2" id="50d2" class="graf graf--p graf-after--p"&gt;2. Metaphors&lt;/p&gt;

&lt;p name="c76c" id="c76c" class="graf graf--p graf-after--p"&gt;Leo Hepis and Danie Roux’s “Frames at Work” workshop blew my mind. I would tell you they were talking about how metaphors and context framing shape the way we think about our work. And they did that. But the meandering and level of lost I felt on our path there was unprecedented.&lt;/p&gt;

&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2019/rope.jpeg" style="display:block; margin-left: auto; margin-right: auto;" title="Our table selected “Rope of Awesome” and I stand by that answer."&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;Our table selected “Rope of Awesome” and I stand by that answer.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p name="e4cd" id="e4cd" class="graf graf--p graf-after--figure"&gt;One of the exercises had us listening to a story about someone’s work and only writing down the metaphors. There seemed to be one every sentence, so many that I thought the speaker was throwing them in there on purpose. (See: &lt;em class="markup--em markup--p-em"&gt;throwing&lt;/em&gt;. They’re everywhere!) He talked about “pulling” and “dragging” his team along. Imagine instead if he were “pushing” or “building” his team. How would he think differently about his work? How different would his work be? Listen more closely to the words people are using to discover terrifying news about how they perceive their work!&lt;/p&gt;

&lt;p name="bff4" id="bff4" class="graf graf--p graf-after--p"&gt;3. Reflection and Learning&lt;/p&gt;

&lt;p name="b1ad" id="b1ad" class="graf graf--p graf-after--p"&gt;Alison Gitelson hosted a session to help the conference attendees think more about what they’d just learned. I was still reeling from the metaphors and framing session, so I wrote down these questions for myself:&lt;/p&gt;

&lt;ul class="postList"&gt;&lt;li name="00fe" id="00fe" class="graf graf--li graf-after--p"&gt;How do I realize when I’m stuck inside my own head?&lt;/li&gt;&lt;li name="48ba" id="48ba" class="graf graf--li graf-after--li"&gt;Does noticing where a behavior would be useful make it less irritating?&lt;/li&gt;&lt;li name="248b" id="248b" class="graf graf--li graf-after--li"&gt;Was there a better discussion because active disagreement was encouraged?&lt;/li&gt;&lt;li name="0165" id="0165" class="graf graf--li graf-after--li"&gt;Who in my life can help me reframe?&lt;/li&gt;&lt;li name="9408" id="9408" class="graf graf--li graf-after--li"&gt;Why do I feel my effort has to achieve something?&lt;/li&gt;&lt;/ul&gt;

&lt;p name="3b02" id="3b02" class="graf graf--p graf-after--li"&gt;Reflect on these questions yourself for terrifying news about how stuck you can be sometimes!&lt;/p&gt;

&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2019/double-rainbow.jpeg" style="display:block; margin-left: auto; margin-right: auto;" title="Very slight double rainbow to the right."&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;Very slight double rainbow to the right.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally published on &lt;a href="https://medium.com/@ezagroba/reflecting-on-lets-test-2017-efb52723598c"&gt;Medium&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;</description><category>conference</category><guid>https://elizabethzagroba.com/posts/2019/2019-09-15_reflecting-on-let-s-test-2017/</guid><pubDate>Sat, 14 Sep 2019 22:00:00 GMT</pubDate></item><item><title>How not to name self-verifying test data</title><link>https://elizabethzagroba.com/posts/2019/2019-07-28_how-not-to-name-self-verifying-test-data/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;div&gt;&lt;p name="3e80" id="3e80" class="graf graf--p graf-after--h3"&gt;Self-verifying test data makes it easy to determine if it’s right. You don’t need to go check somewhere else. It is its own oracle. Here’s an example:&lt;/p&gt;

&lt;p name="9278" id="9278" class="graf graf--p graf-after--p"&gt;Address: &lt;code class="markup--code markup--p-code"&gt;My last name&lt;/code&gt;&lt;/p&gt;

&lt;p name="1393" id="1393" class="graf graf--p graf-after--p graf--trailing"&gt;Something is wrong. It’s obvious from the data itself. We don’t know exactly where the problem is or how to fix it, but we can tell there’s something funky with either &lt;code class="markup--code markup--p-code"&gt;Address&lt;/code&gt; or &lt;code class="markup--code markup--p-code"&gt;Last Name&lt;/code&gt; or both. If you feel like there must be more to it than this, &lt;a href="https://www.stickyminds.com/sites/default/files/article/file/2012/XDD2918filelistfilename1_0.pdf" data-href="https://www.stickyminds.com/sites/default/files/article/file/2012/XDD2918filelistfilename1_0.pdf" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;read Noel Nyman’s 13-page paper to see that there isn’t.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;section name="d869" class="section section--body"&gt;&lt;div class="section-divider"&gt;&lt;hr class="section-divider"&gt;&lt;/div&gt;&lt;div class="section-content"&gt;&lt;div class="section-inner sectionLayout--insetColumn"&gt;&lt;p name="2031" id="2031" class="graf graf--p graf--leading"&gt;Let’s look at a real-life example: I’m writing an automated test for an API. First, I create (POST) an item, then I read (GET) the database to see if it’s there. One of the fields in the body of the POST call is a Universally Unique Identifier, or UUID.&lt;/p&gt;&lt;p name="9c80" id="9c80" class="graf graf--p graf-after--p"&gt;A UUID is a 128-bit identifier; we’re using them as unique keys in our database. Here’s an example of a version 4 UUID: &lt;code class="markup--code markup--p-code"&gt;74ee94d-d32f-4844-9def-81f0d7fea2d8&lt;/code&gt;. (If you’re a human that can’t read regex, &lt;a href="https://www.regextester.com/99148" data-href="https://www.regextester.com/99148" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;you might find this useful&lt;/a&gt;.) I generated that using the &lt;a href="https://www.uuidgenerator.net" data-href="https://www.uuidgenerator.net" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;Online UUID Generator Tool&lt;/a&gt;.&lt;/p&gt;&lt;p name="467d" id="467d" class="graf graf--p graf-after--p"&gt;I wanted to see what would happen if I tried to POST with a UUID that wasn’t valid. If I’d taken my example UUID and removed some characters to make it &lt;code class="markup--code markup--p-code"&gt;74e4d-d32f-4844-9def-81f0ea2d8&lt;/code&gt;, it would have been invalid. My test would have behaved as I expected. But I wouldn’t have been able to tell at a glance if this was a valid UUID or not. It wouldn’t have been self-verifying.&lt;/p&gt;&lt;p name="16e0" id="16e0" class="graf graf--p graf-after--p"&gt;I decided to name my UUID &lt;code class="markup--code markup--p-code"&gt;This is not a valid UUID.&lt;/code&gt;I wanted to easily be able to tell from the GET call if it succeeded, or the error message in the POST call if it failed. It would be clear when running or debugging the test what value was being passed in, why, and to which field it belongs.&lt;/p&gt;&lt;p name="78ab" id="78ab" class="graf graf--p graf-after--p"&gt;Or so I thought.&lt;/p&gt;&lt;p name="ca5b" id="ca5b" class="graf graf--p graf-after--p"&gt;I ran the test. This was the output.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2019/output.png"&gt;&lt;/p&gt;
&lt;p name="950f" id="950f" class="graf graf--p graf-after--figure"&gt;I sat starting at it for a while. The first line where the red &lt;code class="markup--code markup--p-code"&gt;AssertionError&lt;/code&gt; starts looks confusingly similar: The left side looks like the right, so the assert should have passed instead of failed. The message below had &lt;code class="markup--code markup--p-code"&gt;is not a valid UUID&lt;/code&gt; twice. Huh? Finally, I realized what I did, and highlighted the part you now see in blue. I gave my self-verifying test data a name too similar to the error message. Let me boil this down:&lt;/p&gt;

&lt;p name="a80f" id="a80f" class="graf graf--p graf-after--p"&gt;Error message I expected: &lt;code class="markup--code markup--p-code"&gt;UUID not valid&lt;/code&gt;&lt;br&gt;Error message I got: &lt;code class="markup--code markup--p-code"&gt;Published service UUID {{insert UUID here}} is not a valid UUID.&lt;/code&gt;&lt;/p&gt;

&lt;p name="a0fb" id="a0fb" class="graf graf--p graf-after--p"&gt;Unfortunately, I’d named my UUID &lt;code class="markup--code markup--p-code"&gt;This is not a valid UUID.&lt;/code&gt; so the whole invalid input error message was:&lt;/p&gt;

&lt;p name="9e42" id="9e42" class="graf graf--p graf-after--p"&gt;&lt;code class="markup--code markup--p-code"&gt;Published service UUID This is not a valid UUID. is not a valid UUID.&lt;/code&gt;&lt;/p&gt;

&lt;p name="64d9" id="64d9" class="graf graf--p graf-after--p"&gt;Fans of 30 Rock may recognize &lt;a href="https://www.youtube.com/watch?v=zh2k5YAnP8g" data-href="https://www.youtube.com/watch?v=zh2k5YAnP8g" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;this problem&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2019/single-dropping.jpg"&gt;&lt;/p&gt;
&lt;p name="4fdd" id="4fdd" class="graf graf--p graf-after--figure graf--trailing"&gt;My self-verifying test data would have worked fine if the error message was exactly how I expected it. The test would have passed, and I may not have taken a closer look at the text of the error message. But of course, my developers had changed it to be more meaningful and give more context, the bastards. Thus, I uncovered my perfect-turned-nonsensical name. I changed the UUID in my test data to be called&lt;code class="markup--code markup--p-code"&gt;FAKE UUID&lt;/code&gt;. It may not be the perfect name, but at least the code is &lt;a href="https://www.youtube.com/watch?v=aWiwDdx_rdo" data-href="https://www.youtube.com/watch?v=aWiwDdx_rdo" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;better&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;&lt;section name="5fb0" class="section section--body section--last"&gt;&lt;div class="section-divider"&gt;&lt;hr class="section-divider"&gt;&lt;/div&gt;&lt;div class="section-content"&gt;&lt;div class="section-inner sectionLayout--insetColumn"&gt;&lt;p name="81c8" id="81c8" class="graf graf--p graf--leading"&gt;Calling things names related to the thing they are: great!&lt;/p&gt;&lt;p name="e145" id="e145" class="graf graf--p graf-after--p graf--trailing"&gt;Calling things names too similar to the thing that you’re trying to test: confusing.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally published on &lt;a href="https://medium.com/@ezagroba/how-not-to-name-self-verifying-test-data-1225d3c72454"&gt;Medium&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;</description><category>naming</category><category>test-data</category><guid>https://elizabethzagroba.com/posts/2019/2019-07-28_how-not-to-name-self-verifying-test-data/</guid><pubDate>Sat, 27 Jul 2019 22:00:00 GMT</pubDate></item><item><title>Agile Testing Days 2018: A Reflection</title><link>https://elizabethzagroba.com/posts/2019/2019-07-07_agile-testing-days-2018-a-reflection/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;div&gt;&lt;p name="4f54" id="4f54" class="graf graf--p graf-after--h3"&gt;I was beyond excited to attend Agile Testing Days in Potsdam, Germany for the first time a year and a half ago. Anywhere I went, I met women who I’d previously only known from the internet. It was refreshing.&lt;/p&gt;

&lt;p name="bd6a" id="bd6a" class="graf graf--p graf-after--p"&gt;Based on the pages of notes I’ve got, I can tell you that the lessons I took away from that week have seeped into the way I work everyday.&lt;/p&gt;

&lt;blockquote name="14da" id="14da" class="graf graf--pullquote graf--startsWithDoubleQuote graf-after--p"&gt;“Humans should not be regression testing.”&lt;/blockquote&gt;

&lt;p name="d815" id="d815" class="graf graf--p graf-after--pullquote"&gt;&lt;a href="https://twitter.com/jezhumble" data-href="https://twitter.com/jezhumble" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;Jez Humble&lt;/a&gt; kicked off the conference with a session about continuous delivery. He described the barriers of organizational culture and software architecture that can prevent you from getting to a point where you can deliver continuously. Previous places where I worked made this feel like an insurmountable feat; now when I imagine continuous delivery, I can imagine concrete steps we could take to get there.&lt;/p&gt;

&lt;blockquote name="0481" id="0481" class="graf graf--pullquote graf--startsWithDoubleQuote graf-after--p"&gt;“Let’s create a small habit everyday to trigger me to learn more.”&lt;/blockquote&gt;

&lt;p name="7bbd" id="7bbd" class="graf graf--p graf-after--pullquote"&gt;&lt;a href="https://twitter.com/lisihocke" data-href="https://twitter.com/lisihocke" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;Lisi Hocke&lt;/a&gt; certainly took this idea from her talk and ran with it. She’s been pair testing remotely with people around the world and learning so much from it. I’ve taken pairing on a smaller scale, with my colleagues or in-person. There are still times when it tests my patience, but the benefits of being able to more precisely explain what I’m doing and what I expect of the software vastly outweigh that investment. All my notes from Lisi’s talk have me nodding my head, like these are the most obvious things in the world. The biggest I’d come across about a year beforehand: having a growth mindset rather than a fixed mindset. &lt;a href="https://www.brainpickings.org/2014/01/29/carol-dweck-mindset/" data-href="https://www.brainpickings.org/2014/01/29/carol-dweck-mindset/" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;This explanation from Brain Pickings sticks with me&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2019/sanssouci-palace.jpeg" style="display:block; margin-left: auto; margin-right: auto;" title="Sanssouci Palace in Potsdam."&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;Sanssouci Palace in Potsdam.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote name="f3ae" id="f3ae" class="graf graf--pullquote graf--startsWithDoubleQuote graf-after--figure"&gt;“I am curious why they’re doing what they do.”&lt;/blockquote&gt;

&lt;p name="7ad0" id="7ad0" class="graf graf--p graf-after--pullquote"&gt;&lt;a href="https://twitter.com/NativeWired" data-href="https://twitter.com/NativeWired" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;Gitte Klitgaard&lt;/a&gt; and &lt;a href="https://twitter.com/andreasschliep" data-href="https://twitter.com/andreasschliep" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;Andreas Schliep&lt;/a&gt; had an improvised conversation about good and evil. You know, like you do with your friends for fun, but on stage. It can be so hard to believe that people are acting with good intentions at heart. But remembering to have empathy for the situations people find themselves in will help you choose to be the person to repair relationships when things go awry. If you believe in people, they can be better.&lt;/p&gt;

&lt;blockquote name="c286" id="c286" class="graf graf--pullquote graf--startsWithDoubleQuote graf-after--p"&gt;“People don’t want to collaborate with you when you have twelve spreadsheets for them to go through.”&lt;/blockquote&gt;

&lt;p name="7691" id="7691" class="graf graf--p graf-after--pullquote"&gt;I’m sure &lt;a href="https://twitter.com/techgirl1908" data-href="https://twitter.com/techgirl1908" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;Angie Jones&lt;/a&gt; had other, more profound takeaways from her talk. But this one sticks to my bones. I think of it anytime I open a spreadsheet with more than one sheet in it. I think of it when I’m deciding on a tool to use, and wondering not what’s easiest for me to set up, but what’s easiest for my fellow collaborators to use. Thank you for this gem Angie.&lt;/p&gt;

&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2019/sanssouci-park.jpeg" style="display:block; margin-left: auto; margin-right: auto;" title="Some dramatic structure in Sanssouci Park."&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;Some dramatic structure in Sanssouci Park.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote name="f5ac" id="f5ac" class="graf graf--pullquote graf--startsWithDoubleQuote graf-after--figure"&gt;“Get ready to fire people to maintain the culture you want.”&lt;/blockquote&gt;

&lt;p name="f967" id="f967" class="graf graf--p graf-after--pullquote"&gt;&lt;a href="https://twitter.com/poornima" data-href="https://twitter.com/poornima" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;Poornima Vijayashanker&lt;/a&gt; spoke about concrete ways to successfully onboard new employees. But I’m curious about this provocative statement. I haven’t ever worked at a place bold enough to get rid of managers whose direct reports displayed a pattern of escaping them that no one could ignore. I wonder what kind of company is bold enough to take this step.&lt;/p&gt;

&lt;blockquote name="deaf" id="deaf" class="graf graf--pullquote graf--startsWithDoubleQuote graf-after--p"&gt;“Only put off until tomorrow what you are willing to die having left undone.”&lt;/blockquote&gt;

&lt;p name="c0ca" id="c0ca" class="graf graf--p graf-after--pullquote"&gt;&lt;a href="https://twitter.com/Punkmik" data-href="https://twitter.com/Punkmik" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;Kim Knup&lt;/a&gt; said Pablo Picasso came up with this doozie. At my first job, we used a physical board with sticky notes. If the sticky note had been moved around too many times or stuck in one place too long, it would literally fall off the board. At the time this felt like a failure. Now I see it for the blessing it was. Forgetting is a part of life, even if our digital tools would prefer us to forget that.&lt;/p&gt;

&lt;blockquote name="af08" id="af08" class="graf graf--pullquote graf--startsWithDoubleQuote graf-after--p"&gt;“Do what you say you will. Integrity is important.”&lt;/blockquote&gt;

&lt;p name="f653" id="f653" class="graf graf--p graf-after--pullquote"&gt;&lt;a href="https://twitter.com/Rob_Lambert" data-href="https://twitter.com/Rob_Lambert" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;Rob Lambert&lt;/a&gt; spoke about behaviors of effective Agile teams. It’s resonating with me again now because it’s something I’m addressing in a talk I’m giving about how to build trust. I’m digging into authenticity, which I think goes a step beyond integrity. Doing what you say you will is being externally congruent. Authentic people are also internally congruent; the vision they have of themselves is the one they present to the world.&lt;/p&gt;

&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2019/downtown.jpeg" style="display:block; margin-left: auto; margin-right: auto;" title="I forget what this is but it’s across from the museum downtown and damn the light was lovely."&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;I forget what this is but it’s across from the museum downtown and damn the light was lovely.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote name="7969" id="7969" class="graf graf--pullquote graf--startsWithDoubleQuote graf-after--figure"&gt;“If you never get feedback, you have one year of experience ten times.”&lt;/blockquote&gt;

&lt;p name="a539" id="a539" class="graf graf--p graf-after--pullquote"&gt;This came out in &lt;a href="https://twitter.com/huibschoots" data-href="https://twitter.com/huibschoots" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;Huib Schoots&lt;/a&gt; and &lt;a href="https://twitter.com/alex_schl" data-href="https://twitter.com/alex_schl" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;Alex Schladebeck&lt;/a&gt;’s workshop on dissecting your testing and discovering the skills present in your exploratory testing. We practiced observing the skills we were using on the meta-level. It allowed me to both see and share how much a year of mob testing for an hour every day had expanded at least two things. First: my field of vision for how to dig and explore software had grown. Second: I was able to explain what I was thinking such that the other people present could understand, contribute to, and question which path we’d take next. It was life-affirming!&lt;/p&gt;

&lt;blockquote name="b8f8" id="b8f8" class="graf graf--pullquote graf--startsWithDoubleQuote graf-after--p"&gt;“When we set our own limits, we can change them.”&lt;/blockquote&gt;

&lt;p name="c8b4" id="c8b4" class="graf graf--p graf-after--pullquote"&gt;This came up in the context of Natalie Wenert’s talk about cross-team functionality. She chided organizations for relying on hero-worship and fire-fighting over breaking down silos and contributing to the whole. One of my conference buddies was frustrated at Agile Testing Days because they viewed so much of the content as “work therapy.” They weren’t wrong.&lt;/p&gt;

&lt;blockquote name="e6da" id="e6da" class="graf graf--pullquote graf--startsWithDoubleQuote graf-after--p"&gt;“As a user, I want to be locked out of the system after three incorrect password attempts.”&lt;/blockquote&gt;

&lt;p name="1723" id="1723" class="graf graf--p graf-after--pullquote"&gt;&lt;a href="https://twitter.com/DavidEvans66" data-href="https://twitter.com/DavidEvans66" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;David Evans&lt;/a&gt; presented a memorable talk about how the template we stick to for writing user stories does not serve us well. This particular example made me laugh out loud. This story gets the “why” wrong. It’s about security of our system and the user’s data. Being honest about why we’re building the software would make the user story less absurd, and hopefully get us on the path to making better software too.&lt;/p&gt;

&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2019/barberini.jpeg" style="display:block; margin-left: auto; margin-right: auto;" title="This doozie is in the Museum Barberini, which is worth checking out if you're in Potsdam."&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;This doozie is in the Museum Barberini, which is worth checking out if you're in Potsdam.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote name="710c" id="710c" class="graf graf--pullquote graf--startsWithDoubleQuote graf-after--figure"&gt;“Uncertainty is more stressful than inevitable pain.”&lt;/blockquote&gt;

&lt;p name="7f33" id="7f33" class="graf graf--p graf-after--pullquote"&gt;&lt;a href="https://twitter.com/ewebber" data-href="https://twitter.com/ewebber" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;Emily Webber&lt;/a&gt; spoke about team interactions and organizational change. (Shout out to all the people who’ve tweet me instead of this other brown-haired white lady with glasses!) I’m on my fifth team in a year at my current company. I’m tired of the change. I know how important it is to build relationships with the people you work with. I’ve expressed that knowing who’s on my team is more important than having the perfect set of people. I look forward to more stability there because I don’t envy the alternative.&lt;/p&gt;

&lt;blockquote name="fc3c" id="fc3c" class="graf graf--pullquote graf--startsWithDoubleQuote graf-after--p"&gt;“Mistakes were made.”&lt;/blockquote&gt;

&lt;p name="7aee" id="7aee" class="graf graf--p graf-after--pullquote"&gt;&lt;a href="https://twitter.com/lunivore" data-href="https://twitter.com/lunivore" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;Liz Keogh&lt;/a&gt; spoke about how to deliver failure messages. Her message was essentially: don’t. Pointing out the mistake without pointing fingers is enough. Encourage good existing behavior and create more options so that failure can occur safely.&lt;/p&gt;

&lt;blockquote name="20f1" id="20f1" class="graf graf--pullquote graf--startsWithDoubleQuote graf-after--p"&gt;“Are we advocating for those doing a good job?”&lt;/blockquote&gt;

&lt;p name="2163" id="2163" class="graf graf--p graf-after--pullquote graf--trailing"&gt;&lt;a href="https://twitter.com/AshColeman30" data-href="https://twitter.com/AshColeman30" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;Ash Coleman&lt;/a&gt; and &lt;a href="https://twitter.com/keithklain" data-href="https://twitter.com/keithklain" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;Keith Klain&lt;/a&gt; had a late-night after-dinner (over-hyphenated?) bonus-keynote to talk about how culture is a mindset and what we can do to change it. They encouraged allies in the majority to stop talking, and start listening, so you can do something. If you’re uncomfortable, good. You’re learning.&lt;/p&gt;

&lt;p&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally published on &lt;a href="https://medium.com/@ezagroba/agile-testing-days-2017-a-reflection-2ea505b09eec"&gt;Medium&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;</description><category>conference</category><guid>https://elizabethzagroba.com/posts/2019/2019-07-07_agile-testing-days-2018-a-reflection/</guid><pubDate>Sat, 06 Jul 2019 22:00:00 GMT</pubDate></item><item><title>You build it, you run it, and you fix it</title><link>https://elizabethzagroba.com/posts/2019/2019-05-20_you-build-it-you-run-it-and-you-fix-it/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;div&gt;&lt;p name="e646" id="e646" class="graf graf--p graf-after--h3"&gt;During a meeting of our unit at work today, we were asked if we wanted to become a member of the elite squad of people that are on-call for our software. Our philosophy is: we built it, so we know the most about keeping it up and running. In my next meeting, somebody asked if we ever write bug reports for ourselves. Both reminded me that I wanted to use and fix up a piece of software I wrote.&lt;/p&gt;

&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python3 httperrors.py
There are &lt;span class="m"&gt;15&lt;/span&gt; links outside of the &lt;span class="m"&gt;200&lt;/span&gt; or &lt;span class="m"&gt;300&lt;/span&gt; range of http responses on your site.
&lt;/code&gt;&lt;/pre&gt;


&lt;p name="d51d" id="d51d" class="graf graf--p graf-after--figure"&gt;After using &lt;a href="https://www.screamingfrog.co.uk/broken-link-checker/" data-href="https://www.screamingfrog.co.uk/broken-link-checker/" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;ScreamingFrog&lt;/a&gt; software to scan the pages for http error response codes, I decided I could build something easier-to-use myself and test it using my own website, &lt;a href="https://elizabethzagroba.com/" data-href="https://elizabethzagroba.com/" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;elizabethzagroba.com&lt;/a&gt;. I wrote a draft that worked initially, but did some things that weren’t great Python. Thanks to my friends &lt;a href="https://twitter.com/DavidaMarion" data-href="https://twitter.com/DavidaMarion" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;Davida&lt;/a&gt; and Becky who reviewed and improved my code. You can see what they suggested in the &lt;a href="https://github.com/ezagroba/linkchecker/issues?q=is%3Aissue+is%3Aclosed" data-href="https://github.com/ezagroba/linkchecker/issues?q=is%3Aissue+is%3Aclosed" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;older tickets in my Github repo&lt;/a&gt;.&lt;/p&gt;

&lt;p name="c3e3" id="c3e3" class="graf graf--p graf-after--p"&gt;Here’s what I have now:&lt;/p&gt;

&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Mission: Find http codes that aren't in the 200 or 300 range for all the links on a single page&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;errno&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;http&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ssl&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib.request&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SoupStrainer&lt;/span&gt;


&lt;span class="n"&gt;MY_SITE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"http://www.elizabethzagroba.com"&lt;/span&gt;
&lt;span class="n"&gt;my_site_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MY_SITE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;only_external_links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SoupStrainer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"_blank"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_site_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"html.parser"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parse_only&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;only_external_links&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;start_link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"a href"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;start_link&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="n"&gt;start_quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'"http'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;end_quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'"'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_quote&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;stripped_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start_quote&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;end_quote&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;stripped_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end_quote&lt;/span&gt;


&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'list_of_all_links.txt'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;OSError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'list_of_all_links.txt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;URLError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;explanation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;explanation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"There are "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;" links outside of the 200 or 300 range of http responses on your site."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p name="018e" id="018e" class="graf graf--p graf-after--figure"&gt;It looks for the external links on my website, tries to open them, and writes them to a file if the response code isn’t in the 200 or 300 range. There are things I’d like to improve. I’ve noted some here. But tonight’s scope is: run it and fix it.&lt;/p&gt;

&lt;p name="c4ca" id="c4ca" class="graf graf--p graf-after--p"&gt;I run the file on my machine. Fifteen sites I link to come back with error responses. Here’s the file it generated:&lt;/p&gt;

&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;HTTP Error 403: Forbidden https://www.mendix.com/
HTTP Error 403: Forbidden https://medium.com/@ezagroba
HTTP Error 403: Forbidden https://medium.com/@ezagroba/have-i-tried-enough-weird-stuff-7ed4105ae994
HTTP Error 403: Forbidden https://medium.com/@ezagroba/doubt-builds-trust-9cee937dc5d1
HTTP Error 403: Forbidden https://conference.eurostarsoftwaretesting.com/conference/programme/2018/#Wednesday-c67b
HTTP Error 403: Forbidden https://www.phpconference.nl/
HTTP Error 404: Not Found http://www.romaniatesting.ro/sessions/succeeding-as-an-introvert/
HTTP Error 404: Not Found http://www.ministryoftesting.com/training-events/testsbash-philadelphia-2016/
HTTP Error 403: Forbidden http://www.associationforsoftwaretesting.org/training/courses/
HTTP Error 403: Forbidden http://codeacademy.com/
HTTP Error 403: Forbidden http://hackdesign.org
HTTP Error 403: Forbidden http://testobsessed.com/
&amp;lt;urlopen error [Errno 8] nodename nor servname provided, or not known&amp;gt; http://developersbestfriend.com
HTTP Error 999: Request denied http://www.linkedin.com/in/ezagroba/
HTTP Error 403: Forbidden https://medium.com/@ezagroba
&lt;/code&gt;&lt;/pre&gt;


&lt;p name="d0f0" id="d0f0" class="graf graf--p graf-after--figure"&gt;I notice most of the error codes were &lt;code class="markup--code markup--p-code"&gt;403&lt;/code&gt; responses, so I try a few of those pages manually. Those few succeed, so I don’t bother checking the rest. A&lt;code class="markup--code markup--p-code"&gt;403&lt;/code&gt; status is &lt;a href="https://httpstatuses.com/403" data-href="https://httpstatuses.com/403" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;Forbidden access&lt;/a&gt;, so I think it has something to do with these sites having logins. But I don’t need to logins to see the pages I’m linking to. Then I notice that some of the pages are pointing to http instead of https. I don’t know exactly what’s wrong. It’s getting late, so rather than diving in, I write two bugs: &lt;a href="https://github.com/ezagroba/linkchecker/issues/8" data-href="https://github.com/ezagroba/linkchecker/issues/8" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;one about investigating 403s&lt;/a&gt;, &lt;a href="https://github.com/ezagroba/linkchecker/issues/9" data-href="https://github.com/ezagroba/linkchecker/issues/9" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;one about updating http to https&lt;/a&gt;.&lt;/p&gt;

&lt;p name="442c" id="442c" class="graf graf--p graf-after--p"&gt;Next, I look at the other error codes. The &lt;code class="markup--code markup--p-code"&gt;999&lt;/code&gt; one I’ve seen before. It’s some weird LinkedIn thing. I don’t add a bug because it’s not interesting to fix. One site I’m not able to reach the domain of at all, so I message the owner to see if it’s still being maintained. The &lt;code class="markup--code markup--p-code"&gt;404&lt;/code&gt; codes are from sites that still exist where the pages have been taken down; fixable, but frustrating. They prove I spoke at these conferences. When these pages die, so does proof of my hard work. Sigh. I remove those links from my site, reload to confirm the fix made it to production, and run the script again. We’re down from 15 to 13 errors, as expected.&lt;/p&gt;

&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python3 httperrors.py
There are &lt;span class="m"&gt;13&lt;/span&gt; links outside of the &lt;span class="m"&gt;200&lt;/span&gt; or &lt;span class="m"&gt;300&lt;/span&gt; range of http responses on your site.
&lt;/code&gt;&lt;/pre&gt;


&lt;p name="a400" id="a400" class="graf graf--p graf-after--figure graf--trailing"&gt;In looking at this code again, I’m reminded of the original motivation and my vision for myself: run it against any site, and know when links break on elizabethzagroba.com. &lt;a href="https://github.com/ezagroba/linkchecker/issues" data-href="https://github.com/ezagroba/linkchecker/issues" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;I added some issues that I’ll pick up another day&lt;/a&gt;. I’ll be ready to build again. But for now, goodnight.&lt;/p&gt;

&lt;p&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally published on &lt;a href="https://medium.com/@ezagroba/you-build-it-you-run-it-and-you-fix-it-ba24151c3f2b"&gt;Medium&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;</description><guid>https://elizabethzagroba.com/posts/2019/2019-05-20_you-build-it-you-run-it-and-you-fix-it/</guid><pubDate>Sun, 19 May 2019 22:00:00 GMT</pubDate></item><item><title>Don’t let JIRA stop you from visualizing dependencies</title><link>https://elizabethzagroba.com/posts/2019/2019-05-07_don-t-let-jira-stop-you-from-visualizing-dependencies/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;div&gt;&lt;p name="5ee8" id="5ee8" class="graf graf--p graf-after--h3"&gt;My team is at the beginning of a project. We’ve got a lot of potential features. Our task yesterday was to start breaking down big dreams into specific pieces of work we can pick up.&lt;/p&gt;

&lt;p name="da25" id="da25" class="graf graf--p graf-after--p"&gt;As we started to define what we wanted to build, we came across items that had to come first: come up with a proposal before we meet to review it with our stakeholders. Other items weren’t necessarily “blocked,” but would make more sense to pick up in a sequence. As my developers watched me painstakingly searched for completely forgettable JIRA story number so I could mark each story as “blocked” or “is blocked by,” one of my developers asked one of the best questions I heard all day: “Is there a way we can see this visually?”&lt;/p&gt;

&lt;p name="4007" id="4007" class="graf graf--p graf-after--p"&gt;My developer searched for JIRA solutions to this problem and came across a few that required &lt;a href="https://community.atlassian.com/t5/Jira-questions/Visual-overview-of-related-and-blocked-issues/qaq-p/757970" data-href="https://community.atlassian.com/t5/Jira-questions/Visual-overview-of-related-and-blocked-issues/qaq-p/757970" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;admin access&lt;/a&gt; or JIRA version 8. We spent a few minutes getting lost in the text and subsequently interactive credits on the About JIRA page. None of us noticed this yesterday, but the start screen for the game gave us the answer we needed: we have JIRA 7 (Roman numerals on the title page), not JIRA 8.&lt;/p&gt;

&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2019/jira-credits.gif" style="display:block; margin-left: auto; margin-right: auto;" title="JIRA credits: A surprising diversion in our work day."&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;JIRA credits: A surprising diversion in our work day.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p name="6eb6" id="6eb6" class="graf graf--p graf-after--figure"&gt;Without a big sheet of paper (we had post-its, but no where to stick them) or a whiteboard in the conference room we were crammed into, I pulled up my go-to tool for visualizations: &lt;a href="https://www.edrawsoft.com/download-mindmaster.php" data-href="https://www.edrawsoft.com/download-mindmaster.php" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;MindMaster&lt;/a&gt;. I’ve got other recommendations for mind mapping software at the bottom of &lt;a href="https://ministryoftesting.com/dojo/lessons/mind-maps-made-easy" data-href="https://ministryoftesting.com/dojo/lessons/mind-maps-made-easy" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;my article here&lt;/a&gt;. I’m currently stuck on MindMaster since it’s free and not web-hosted.&lt;/p&gt;

&lt;p name="c35b" id="c35b" class="graf graf--p graf-after--p"&gt;I added a bunch of &lt;code class="markup--code markup--p-code"&gt;Floating topics&lt;/code&gt; and connected them with &lt;code class="markup--code markup--p-code"&gt;Relationship&lt;/code&gt; arrows. We outlined the first group of stories that we’d collected into an epic. We fiddled a bit with aligning the stories that could be picked up in parallel so they appeared at the earliest point we could pick them up. We came back to refine and add a couple items as we outlined other epics. The few minutes we dedicated to creating this diagram gave us enough information to decide what order we should pick up work for the next week or two.&lt;/p&gt;

&lt;p&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2019/dependencies.png"&gt;&lt;/p&gt;
&lt;p name="9e64" id="9e64" class="graf graf--p graf-after--figure"&gt;We may be looking at our sprint board in the coming days to review how all the work is going. But I know that no developer is going to trace all the “blocks” and “is blocked by” links in the stories. They’re going to look at this diagram to know when to pair or mob because we can’t pick more things up.&lt;/p&gt;

&lt;p name="3249" id="3249" class="graf graf--p graf-after--p graf--trailing"&gt;Moral of the story: Don’t let your tools constrain you.&lt;/p&gt;

&lt;p&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally published on &lt;a href="https://medium.com/@ezagroba/dont-let-jira-stop-you-from-visualizing-dependencies-db16d03d4cc1"&gt;Medium&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;</description><category>dependencies</category><category>JIRA</category><category>mind-mapping</category><guid>https://elizabethzagroba.com/posts/2019/2019-05-07_don-t-let-jira-stop-you-from-visualizing-dependencies/</guid><pubDate>Mon, 06 May 2019 22:00:00 GMT</pubDate></item><item><title>Exploratory Testing with the Chrome Network Tab</title><link>https://elizabethzagroba.com/posts/2019/2019-03-29_exploratory-testing-with-the-chrome-network-tab/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;div&gt;&lt;p name="6c32" id="6c32" class="graf graf--p graf-after--h3"&gt;I needed to the loading time of a login over a slow network. The internet connection I had was too fast to see all the visual behavior and the backend redirects happening during the process. I opened the Network tab in the Chrome developer tools and switched the throttling option to &lt;code class="markup--code markup--p-code"&gt;Slow 3G&lt;/code&gt;. (A yellow triangular yield symbol appeared next to the Network tab to remind me that I’d throttled my network.) Running over &lt;code class="markup--code markup--p-code"&gt;Slow 3G&lt;/code&gt; allowed me to see what someone trying access the site from a phone or tablet might experience.&lt;/p&gt;

&lt;p name="cd6d" id="cd6d" class="graf graf--p graf-after--p"&gt;&lt;em class="markup--em markup--p-em"&gt;The screenshots below are from the login on hackdesign.org, a program I highly recommend for getting up-to-speed on user experience design.&lt;/em&gt;&lt;/p&gt;

&lt;p name="29ea" id="29ea" class="graf graf--p graf-after--p"&gt;With the Network tab open, I could do a few things:&lt;/p&gt;

&lt;ol class="postList"&gt;&lt;li name="8374" id="8374" class="graf graf--li graf-after--p"&gt;I could see what API calls were being made. I looked at the bottom of the &lt;code class="markup--code markup--li-code"&gt;Name&lt;/code&gt; column to see how many calls there were overall, and sorted it to discover if we were retrieving things from the server that I expected to be cached. I clicked the &lt;code class="markup--code markup--li-code"&gt;Preserve log&lt;/code&gt; checkbox before I started so I could see what happened even after I went to another page.&lt;/li&gt;&lt;li name="ef06" id="ef06" class="graf graf--li graf-after--li"&gt;I could see which calls were redirects. The &lt;code class="markup--code markup--li-code"&gt;Status&lt;/code&gt;column had numbers in the 300 range for redirects. I love&lt;a href="https://httpstatuses.com/" data-href="https://httpstatuses.com/" class="markup--anchor markup--li-anchor" rel="noopener" target="_blank"&gt; httpstatuses.com&lt;/a&gt; for what each one means more precisely. Redirects might indicate something could be optimized.&lt;/li&gt;&lt;li name="6d41" id="6d41" class="graf graf--li graf-after--li"&gt;I could tell how much time each of those network calls took. The &lt;code class="markup--code markup--li-code"&gt;Time&lt;/code&gt; column allowed me to sort by milliseconds to find the call that took the longest.&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2019/chrome-network-tab.png" style="display:block; margin-left: auto; margin-right: auto;" title="What I used in the Network tab of the Chrome developer tools. HackDesign.org login only took 6 seconds."&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;What I used in the Network tab of the Chrome developer tools. HackDesign.org login only took 6 seconds.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p name="de62" id="de62" class="graf graf--p graf-after--figure"&gt;I discovered logging in and logging out took about 20 seconds on the test environment over Slow 3G. (This time appeared in the &lt;code class="markup--code markup--p-code"&gt;Load&lt;/code&gt; text in red at the bottom of the Network tab.) Was this too slow? To answer this question, I needed an oracle.&lt;/p&gt;

&lt;p name="7704" id="7704" class="graf graf--p graf-after--p"&gt;I decided to compare the behavior on the test environment to our production environment. On production, login took 60 seconds! When I sorted the network calls by &lt;code class="markup--code markup--p-code"&gt;Time&lt;/code&gt;, I could see that the bulk of loading time was spent retrieving messages to display on the logged-in page. Both 20 and 60 seconds for a login seemed unacceptably slow to me, so I took it to my team.&lt;/p&gt;

&lt;p name="d153" id="d153" class="graf graf--p graf-after--p"&gt;My team agreed that this behavior was bad. Unfortunately, we decided to prioritize users on fast networks over users on slow ones, and changing this behavior wasn’t a priority for our release.&lt;/p&gt;

&lt;p name="f224" id="f224" class="graf graf--p graf-after--p"&gt;When I sorted the network calls by &lt;code class="markup--code markup--p-code"&gt;Name&lt;/code&gt;, I found some unexpected URLs I did not expect to be involved during a login. I tested a bit more around the feature in different places, found a bug in the behavior, and asked around a few different teams before I got the bug reported to the correct team.&lt;/p&gt;

&lt;h5 name="d83e" id="d83e" class="graf graf--h4 graf-after--p"&gt;Moral of the story&lt;/h5&gt;

&lt;p name="715e" id="715e" class="graf graf--p graf-after--h4 graf--trailing"&gt;You have a powerful web performance testing tool at your disposal. Give it a try and see what you find.&lt;/p&gt;

&lt;p&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally published on &lt;a href="https://medium.com/@ezagroba/exploratory-testing-with-the-chrome-network-tab-f093e1b3d725"&gt;Medium&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;</description><category>exploratory-testing</category><guid>https://elizabethzagroba.com/posts/2019/2019-03-29_exploratory-testing-with-the-chrome-network-tab/</guid><pubDate>Thu, 28 Mar 2019 23:00:00 GMT</pubDate></item><item><title>This Too Shall Pass: Disposable Test Automation</title><link>https://elizabethzagroba.com/posts/2019/2019-03-29_this-too-shall-pass-disposable-test-automation/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;div&gt;&lt;p name="00f1" id="00f1" class="graf graf--p graf-after--h3"&gt;A few different times, we wrote some Python code to help us test our products. And then we threw the code out.&lt;/p&gt;

&lt;p name="ad39" id="ad39" class="graf graf--p graf-after--p"&gt;We had the infrastructure in place to add tests to our continuous integration pipeline in Jenkins. It would have been as simple as merging the branch of our code into master. But it had served its purpose already.&lt;/p&gt;

&lt;h5 name="7e5f" id="7e5f" class="graf graf--h4 graf-after--p"&gt;Example 1: web feature integrating with desktop software&lt;/h5&gt;

&lt;p name="1da2" id="1da2" class="graf graf--p graf-after--h4"&gt;Our team owner a web-based product. It had lots of features, but the two we were concerned with for this were: it created an account and a project. These would be used in a desktop product built by different teams at our company. For this story, a flag would be set when you created a project in our product to allow for something new in the desktop software.&lt;/p&gt;

&lt;p name="9663" id="9663" class="graf graf--p graf-after--p"&gt;Our testing stack was built and maintained by our team alone. It was set up to look at the web UI and APIs, but not the desktop software. We had APIs to create projects and change this new project flag. We didn’t have an automated way to see exactly what would happen in the desktop software under these different circumstances.&lt;/p&gt;

&lt;p name="c2c2" id="c2c2" class="graf graf--p graf-after--p"&gt;We wrote tests to query the APIs to see that the settings we set were coming back as expected. Those went into the pipeline. We also wrote some Python code to create projects in each of the five different states. Then, we manually went into the desktop software, used each of the projects we created, and looked at what happened in the desktop software. The information we discovered was enough to determine that the work for our team and the work for the desktop software teams was complete.&lt;/p&gt;

&lt;p name="8f6c" id="8f6c" class="graf graf--p graf-after--p"&gt;We did not add these tests to the pipeline. The branch got removed from the project without getting merged into master once the story was completed.&lt;/p&gt;

&lt;h5 name="5b5e" id="5b5e" class="graf graf--h4 graf-after--p"&gt;Example 2: crude performance test&lt;/h5&gt;

&lt;p name="a60d" id="a60d" class="graf graf--p graf-after--h4"&gt;We wanted to simulate the load placed on our product by a different internal app. Unfortunately the owner of the internal app was unavailable in the short period of time we had to complete this task. To do this, we took existing feature tests we had running on our staging environments, parallelize them, and run them on a clone of our production environment.&lt;/p&gt;

&lt;p name="4cc3" id="4cc3" class="graf graf--p graf-after--p"&gt;Our production clone was available during the few days we were doing this test. It would not be available thereafter, considering the time and money we would have to invest in maintaining it. Our other staging environments had a different enough capacity that running a performance test there would not be meaningful. Our production environment would give us the information we needed once we released this build because the internal app ran there. We maintained a branch for a few days while we were writing and using the performance test, but without an environment to run it on, we threw it out.&lt;/p&gt;

&lt;h5 name="eea5" id="eea5" class="graf graf--h4 graf-after--p"&gt;Example 3: audit trail Excel export&lt;/h5&gt;

&lt;p name="fc7f" id="fc7f" class="graf graf--p graf-after--h4"&gt;We added an audit trail to our profile information for GDPR compliance. Our system could display the information in the UI and export it to Excel. We added tests to our pipeline for the UI bit. The exporting to Excel bit we didn’t. We wrote a test that ended by providing us a username and password. Manually, we’d login, go to the page with the Excel export, and confirm that the data in the file matched the changes the test had made.&lt;/p&gt;

&lt;p name="c098" id="c098" class="graf graf--p graf-after--p"&gt;The Excel exporter wasn’t a piece of code our team maintained. If this test failed, it would have likely been in that functionality, since we also had a UI test for the data integrity. We weren’t changing anything about the Excel export. The audit trail report was an important enough feature that we knew we’d smoke test it manually with every release, so we didn’t add this code to the repository.&lt;/p&gt;

&lt;p&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2019/windows.png"&gt;&lt;/p&gt;
&lt;h5 name="a30f" id="a30f" class="graf graf--h4 graf-after--figure"&gt;What we asked ourselves when throwing out our automation&lt;/h5&gt;

&lt;ul class="postList"&gt;&lt;li name="a1f8" id="a1f8" class="graf graf--li graf-after--h4"&gt;What would we be asserting at the end of the test?&lt;/li&gt;&lt;li name="5de9" id="5de9" class="graf graf--li graf-after--li"&gt;If those asserts succeeded, would they give us false confidence that the feature was covered when we couldn’t account for the consequences?&lt;/li&gt;&lt;li name="f15d" id="f15d" class="graf graf--li graf-after--li"&gt;If these asserts failed, would that give us information about what to fix in our product?&lt;/li&gt;&lt;li name="90cc" id="90cc" class="graf graf--li graf-after--li"&gt;Would checking the code into the automation repository expose sensitive data about production?&lt;/li&gt;&lt;li name="2a56" id="2a56" class="graf graf--li graf-after--li graf--trailing"&gt;Would running these tests against our staging environments give us the information we needed?&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally published on &lt;a href="https://medium.com/@ezagroba/this-too-shall-pass-disposable-test-automation-6d0dadeff53"&gt;Medium&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;</description><category>automation</category><guid>https://elizabethzagroba.com/posts/2019/2019-03-29_this-too-shall-pass-disposable-test-automation/</guid><pubDate>Thu, 28 Mar 2019 23:00:00 GMT</pubDate></item><item><title>Authorization &amp; Authentication: A Tale of Government Security Clearance</title><link>https://elizabethzagroba.com/posts/2019/2019-02-24_authorization-authentication-a-tale-of-government-security-clearance/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;div&gt;&lt;p name="af15" id="af15" class="graf graf--p graf-after--h3"&gt;My first job after college was with a contractor to the United States Navy. I had to get a security clearance from the U.S. government to have access to classified data, the lowest category. One piece of the application was getting fingerprinted. From there, federal agencies like the FBI would check my fingerprints against criminal records databases to see if any matches turned up.&lt;/p&gt;

&lt;p name="7241" id="7241" class="graf graf--p graf-after--p"&gt;I walked down to the local police station in my college town of Waterville, Maine, which is not exactly a bustling metropolis. I expected a police officer to compare my picture on the driver’s license I’d brought with my actual face to confirm my identity, before taking my fingerprints and shipping them off to the appropriate authority.&lt;/p&gt;

&lt;p name="0ffc" id="0ffc" class="graf graf--p graf-after--p"&gt;But they did not.&lt;/p&gt;

&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2019/fingerprints.jpeg" style="display:block; margin-left: auto; margin-right: auto;" title="flickr/cogdog"&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;flickr/cogdog&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p name="f72c" id="f72c" class="graf graf--p graf-after--figure"&gt;First, when I arrived at the station, I was told to wait. “We’re questioning a suspect in the booking room!” This was clearly the most action these officers had seen in a while. They were psyched. But I was puzzled about why this was an impediment, so naturally I asked more questions: “Can you tell me more about the ink pad? Is it secured to the table in some fashion? Would it be possible to continue questioning the subject, but take my fingerprints out here in the hallway?”&lt;/p&gt;

&lt;p name="8262" id="8262" class="graf graf--p graf-after--p"&gt;After explaining this to two different officers and lots more waiting, they discovered that the ink pad was indeed able to be transported by human hands to interact with mine. They filled out the form with my name and some other details I provided verbally and took my fingerprints. I left.&lt;/p&gt;

&lt;p name="adeb" id="adeb" class="graf graf--p graf-after--p"&gt;It was only after I got back to campus that I realized the crucial step the police officers missed: they forgot to look at my driver’s license. They were so thrown off from their usual routine, both by having a suspect in custody and by moving the fingerprint pad to a different location, that they forgot to verify my identity.&lt;/p&gt;

&lt;p name="6e0d" id="6e0d" class="graf graf--p graf-after--p"&gt;I have no criminal record, I was only at the job for a short time, and my security clearance expired after five years without getting renewed, so the mistake was of no consequence.&lt;/p&gt;

&lt;p name="6b10" id="6b10" class="graf graf--p graf-after--p"&gt;But consider the alternative: I have a criminal record. I send my sister or a friend who knew enough about me to the police station. They impersonate me, and the fingerprint check of their prints turns up no suspicious activity. Now I have security clearance to access classified data about the American military when I shouldn’t.&lt;/p&gt;

&lt;p name="e1e9" id="e1e9" class="graf graf--p graf-after--p graf--trailing"&gt;The moral of this story: authentication and authorization go hand-in-hand. Authorization could have been circumvented by an unauthorized impersonator without the additional check of authentication. Putting someone in a particular security group is not enough: you’ve got to check that it’s them who’s supposed to be there.&lt;/p&gt;

&lt;p&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally published on &lt;a href="https://medium.com/@ezagroba/authorization-authentication-a-tale-of-government-security-clearance-5d8a1c00527e"&gt;Medium&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;</description><category>authentication</category><category>authorization</category><category>security</category><guid>https://elizabethzagroba.com/posts/2019/2019-02-24_authorization-authentication-a-tale-of-government-security-clearance/</guid><pubDate>Sat, 23 Feb 2019 23:00:00 GMT</pubDate></item></channel></rss>