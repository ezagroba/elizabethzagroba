<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Elizabeth Zagroba: Software Tester (Posts about naming)</title><link>https://elizabethzagroba.com/</link><description></description><atom:link href="https://elizabethzagroba.com/categories/naming.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>© 2021 &lt;a href="mailto:me@elizabethzagroba.com"&gt;Elizabeth Zagroba&lt;/a&gt; Mozilla Public License 2.0</copyright><lastBuildDate>Wed, 31 Mar 2021 18:15:47 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Recently Encountered Logical Fallacies</title><link>https://elizabethzagroba.com/posts/2021/recently_encountered_logical_falacies/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;figure&gt;&lt;img src="https://elizabethzagroba.com/images/posts/2021/statue.jpg"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;I was on &lt;a href="https://www.ministryoftesting.com/dojo/lessons/discussion-critical-thinking"&gt;a panel about critical thinking for the Ministry of Testing&lt;/a&gt; last week. One of my fellow panelists and commendable ranter &lt;a href="https://twitter.com/Maaikees"&gt;Maaike Brinkoff&lt;/a&gt; brought up &lt;em&gt;ad hominem&lt;/em&gt; (personal) attacks as one example of a failure of critical thinking. It's one of many &lt;a href="https://fallacyinlogic.com/"&gt;logical fallacies&lt;/a&gt; that are worth exploring further. &lt;/p&gt;
&lt;p&gt;Equipping yourself with the name for a thing helps you recognize it when it appears. (Lara Hogan wrote recently about applying the skill, of &lt;a href="https://leaddev.com/communication-relationships/skill-naming-whats-happening-room"&gt;being able to name the problem in the room&lt;/a&gt;, to defuse tense meetings.) These are some of the fallacies I've across recently when I've been debriefing testing sessions, facilitating refinement sessions, and reviewing conference submissions.&lt;/p&gt;
&lt;h4&gt;Affirming the consequent&lt;/h4&gt;
&lt;p&gt;Affirming the consequent is applying a conditional without the conditionality, or assuming something happened because you see a result. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If P (I run the pipeline) then Q (the latest build will be available on the test environment)&lt;/li&gt;
&lt;li&gt;Q (the latest build is available on the test environment)&lt;/li&gt;
&lt;li&gt;Therefore P (I ran the pipeline) &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We can't assume the converse: if Q, then P. Just because the latest build is on the test environment doesn't mean I ran the pipeline. Maybe someone else ran the pipeline, or put the build there manually. Maybe there haven't been any changes since yesterday, and the build from yesterday is still the latest one.&lt;/p&gt;
&lt;h4&gt;Fallacy of composition&lt;/h4&gt;
&lt;p&gt;This assumes that something that applies to one member of a class applies to them all.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Y is part of X (Stephanie is an admin user)&lt;/li&gt;
&lt;li&gt;Y has property P (Stephanie can see this page)&lt;/li&gt;
&lt;li&gt;X has property P (any admin user can see this page)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We can't assume that what's true for one member of a class applies to all of them. What happens if Stephanie can be assigned more than one role, a more restrictive/regular user role in addition to the admin role? Can she still see it? What if Stephanie being able to see the page has nothing to do with her status as an admin user?&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;Post hoc ergo propter hoc&lt;/em&gt; (correlation without causation)&lt;/h4&gt;
&lt;p&gt;This one is easiest to see when others are debreifing their testing to me, but I've also learned to catch for myself. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Event A occurred (I clicked the button)&lt;/li&gt;
&lt;li&gt;Then event B occurred (a whole bunch of log messages appeared)&lt;/li&gt;
&lt;li&gt;Therefore A caused B (clicking the button caused a whole bunch of log messages)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We can't assume that events that occur in a particular sequence in time are necessarily causal. Did clicking the button trigger the log messages? What do the log messages say? Did you read them? Who else could be using this environment? Does the same thing happen every time you click the button, or when you run the application in a different environment? &lt;/p&gt;
&lt;h4&gt;Argument from repetition&lt;/h4&gt;
&lt;p&gt;When someone says the same thing enough times, or brings up the same unimportant issue in a refinement meeting week after week, it can become easier to address the issue rather than convincing them yet again why it's not a priority. I've been facilitating refinement meetings every week for my teams for the past two years. &lt;a href="https://butyoudontlooksick.com/articles/written-by-christine/the-spoon-theory/"&gt;I only have a finite amount of energy&lt;/a&gt; that is not always worth expending by refuting the case for a small edge case week after week. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Shoutout to my logic professor Dan Cohen at Colby College, who had us memorize and distinguish logical fallacies as part of his brilliant Logic and Argumentation course, and pointing out that an ease and comfort with truth tables would translate well to a computer science course. Special thanks to Joep Schuurkes for his philosophical and technological opinions on this piece.&lt;/p&gt;&lt;/div&gt;</description><category>critical-thinking</category><category>logic</category><category>naming</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2021/recently_encountered_logical_falacies/</guid><pubDate>Tue, 30 Mar 2021 22:00:00 GMT</pubDate></item><item><title>How not to name self-verifying test data</title><link>https://elizabethzagroba.com/posts/2019/2019-07-28_how-not-to-name-self-verifying-test-data/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;div&gt;&lt;p name="3e80" id="3e80" class="graf graf--p graf-after--h3"&gt;Self-verifying test data makes it easy to determine if it’s right. You don’t need to go check somewhere else. It is its own oracle. Here’s an example:&lt;/p&gt;

&lt;p name="9278" id="9278" class="graf graf--p graf-after--p"&gt;Address: &lt;code class="markup--code markup--p-code"&gt;My last name&lt;/code&gt;&lt;/p&gt;

&lt;p name="1393" id="1393" class="graf graf--p graf-after--p graf--trailing"&gt;Something is wrong. It’s obvious from the data itself. We don’t know exactly where the problem is or how to fix it, but we can tell there’s something funky with either &lt;code class="markup--code markup--p-code"&gt;Address&lt;/code&gt; or &lt;code class="markup--code markup--p-code"&gt;Last Name&lt;/code&gt; or both. If you feel like there must be more to it than this, &lt;a href="https://www.stickyminds.com/sites/default/files/article/file/2012/XDD2918filelistfilename1_0.pdf" data-href="https://www.stickyminds.com/sites/default/files/article/file/2012/XDD2918filelistfilename1_0.pdf" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;read Noel Nyman’s 13-page paper to see that there isn’t.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;section name="d869" class="section section--body"&gt;&lt;div class="section-divider"&gt;&lt;hr class="section-divider"&gt;&lt;/div&gt;&lt;div class="section-content"&gt;&lt;div class="section-inner sectionLayout--insetColumn"&gt;&lt;p name="2031" id="2031" class="graf graf--p graf--leading"&gt;Let’s look at a real-life example: I’m writing an automated test for an API. First, I create (POST) an item, then I read (GET) the database to see if it’s there. One of the fields in the body of the POST call is a Universally Unique Identifier, or UUID.&lt;/p&gt;&lt;p name="9c80" id="9c80" class="graf graf--p graf-after--p"&gt;A UUID is a 128-bit identifier; we’re using them as unique keys in our database. Here’s an example of a version 4 UUID: &lt;code class="markup--code markup--p-code"&gt;74ee94d-d32f-4844-9def-81f0d7fea2d8&lt;/code&gt;. (If you’re a human that can’t read regex, &lt;a href="https://www.regextester.com/99148" data-href="https://www.regextester.com/99148" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;you might find this useful&lt;/a&gt;.) I generated that using the &lt;a href="https://www.uuidgenerator.net" data-href="https://www.uuidgenerator.net" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;Online UUID Generator Tool&lt;/a&gt;.&lt;/p&gt;&lt;p name="467d" id="467d" class="graf graf--p graf-after--p"&gt;I wanted to see what would happen if I tried to POST with a UUID that wasn’t valid. If I’d taken my example UUID and removed some characters to make it &lt;code class="markup--code markup--p-code"&gt;74e4d-d32f-4844-9def-81f0ea2d8&lt;/code&gt;, it would have been invalid. My test would have behaved as I expected. But I wouldn’t have been able to tell at a glance if this was a valid UUID or not. It wouldn’t have been self-verifying.&lt;/p&gt;&lt;p name="16e0" id="16e0" class="graf graf--p graf-after--p"&gt;I decided to name my UUID &lt;code class="markup--code markup--p-code"&gt;This is not a valid UUID.&lt;/code&gt;I wanted to easily be able to tell from the GET call if it succeeded, or the error message in the POST call if it failed. It would be clear when running or debugging the test what value was being passed in, why, and to which field it belongs.&lt;/p&gt;&lt;p name="78ab" id="78ab" class="graf graf--p graf-after--p"&gt;Or so I thought.&lt;/p&gt;&lt;p name="ca5b" id="ca5b" class="graf graf--p graf-after--p"&gt;I ran the test. This was the output.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2019/output.png"&gt;&lt;/p&gt;
&lt;p name="950f" id="950f" class="graf graf--p graf-after--figure"&gt;I sat starting at it for a while. The first line where the red &lt;code class="markup--code markup--p-code"&gt;AssertionError&lt;/code&gt; starts looks confusingly similar: The left side looks like the right, so the assert should have passed instead of failed. The message below had &lt;code class="markup--code markup--p-code"&gt;is not a valid UUID&lt;/code&gt; twice. Huh? Finally, I realized what I did, and highlighted the part you now see in blue. I gave my self-verifying test data a name too similar to the error message. Let me boil this down:&lt;/p&gt;

&lt;p name="a80f" id="a80f" class="graf graf--p graf-after--p"&gt;Error message I expected: &lt;code class="markup--code markup--p-code"&gt;UUID not valid&lt;/code&gt;&lt;br&gt;Error message I got: &lt;code class="markup--code markup--p-code"&gt;Published service UUID {{insert UUID here}} is not a valid UUID.&lt;/code&gt;&lt;/p&gt;

&lt;p name="a0fb" id="a0fb" class="graf graf--p graf-after--p"&gt;Unfortunately, I’d named my UUID &lt;code class="markup--code markup--p-code"&gt;This is not a valid UUID.&lt;/code&gt; so the whole invalid input error message was:&lt;/p&gt;

&lt;p name="9e42" id="9e42" class="graf graf--p graf-after--p"&gt;&lt;code class="markup--code markup--p-code"&gt;Published service UUID This is not a valid UUID. is not a valid UUID.&lt;/code&gt;&lt;/p&gt;

&lt;p name="64d9" id="64d9" class="graf graf--p graf-after--p"&gt;Fans of 30 Rock may recognize &lt;a href="https://www.youtube.com/watch?v=zh2k5YAnP8g" data-href="https://www.youtube.com/watch?v=zh2k5YAnP8g" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;this problem&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2019/single-dropping.jpg"&gt;&lt;/p&gt;
&lt;p name="4fdd" id="4fdd" class="graf graf--p graf-after--figure graf--trailing"&gt;My self-verifying test data would have worked fine if the error message was exactly how I expected it. The test would have passed, and I may not have taken a closer look at the text of the error message. But of course, my developers had changed it to be more meaningful and give more context, the bastards. Thus, I uncovered my perfect-turned-nonsensical name. I changed the UUID in my test data to be called&lt;code class="markup--code markup--p-code"&gt;FAKE UUID&lt;/code&gt;. It may not be the perfect name, but at least the code is &lt;a href="https://www.youtube.com/watch?v=aWiwDdx_rdo" data-href="https://www.youtube.com/watch?v=aWiwDdx_rdo" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"&gt;better&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;&lt;section name="5fb0" class="section section--body section--last"&gt;&lt;div class="section-divider"&gt;&lt;hr class="section-divider"&gt;&lt;/div&gt;&lt;div class="section-content"&gt;&lt;div class="section-inner sectionLayout--insetColumn"&gt;&lt;p name="81c8" id="81c8" class="graf graf--p graf--leading"&gt;Calling things names related to the thing they are: great!&lt;/p&gt;&lt;p name="e145" id="e145" class="graf graf--p graf-after--p graf--trailing"&gt;Calling things names too similar to the thing that you’re trying to test: confusing.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally published on &lt;a href="https://medium.com/@ezagroba/how-not-to-name-self-verifying-test-data-1225d3c72454"&gt;Medium&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;</description><category>naming</category><category>test-data</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2019/2019-07-28_how-not-to-name-self-verifying-test-data/</guid><pubDate>Sat, 27 Jul 2019 22:00:00 GMT</pubDate></item></channel></rss>