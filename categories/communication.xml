<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Elizabeth Zagroba: Organizational Anarchist (Posts about communication)</title><link>https://elizabethzagroba.com/</link><description></description><atom:link href="https://elizabethzagroba.com/categories/communication.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Â© 2022 &lt;a href="mailto:me@elizabethzagroba.com"&gt;Elizabeth Zagroba&lt;/a&gt; Mozilla Public License 2.0</copyright><lastBuildDate>Sun, 27 Feb 2022 18:55:42 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Strengthen Your Code Review Skills</title><link>https://elizabethzagroba.com/posts/2022/02_27_strengthen_your_code_review_skills/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;p&gt;I spent my first two years at my current company getting my code reviewed and the following almost two years reviewing 3-10 merge requests per week. Our tech stack was in Python, with pytest as our test running, the requests library for API tests, and Selenium for browser tests, all hosted in our company's paid gitlab instance. All that experience shaped how (and whether I) offer feedback on the merge requests I reviewed for members of my own team and neighboring teams working in the same tech stack.&lt;/p&gt;
&lt;h3&gt;Define the relationship.&lt;/h3&gt;
&lt;p&gt;There are power dynamics at play in any relationship at work. For members of my team, they had to have a really good argument to refute one of my "suggestions" because I was their test specialist &lt;em&gt;and&lt;/em&gt; their team lead evaluating their ability to respond to feedback and change their behavior by performance review time. No pressure!&lt;/p&gt;
&lt;p&gt;For members of other teams, they had more power to push back. It could empower them with the knowledge I shared, but they were free to reject it. &lt;/p&gt;
&lt;h3&gt;Focus on what matters.&lt;/h3&gt;
&lt;p&gt;When I review a merge request, I start with the question "what is this code supposed to do?" If it's a merge request for my team, the JIRA ticket number in the title or the branch name would clue me in. For code from other teams, champions would use the description field to explain what the product change was and how the test code supported that. Most merge requests left me guessing a bit. I'd have to read the code contained in the tests to figure out what the test, and ultimately the product, was supposed to do.&lt;/p&gt;
&lt;p&gt;Reading the code also got me thinking about the things I was best equipped to help the code submitter with: maintainability and "what if?" scenarios. As a tester, I could look at a list of tests that create, read, and delete a thing and ask "is update also part of the picture here?" As a code reviewer with a longer tenure at the company, I had a more informed view of whether copy and pasting would work or if a new function was needed.&lt;/p&gt;
&lt;p&gt;We had two linters set up to run on every commit: flake8 covered style enforcement (indentation, blank lines, etc.) and vulture identified unused code. For issues of style that a machine couldn't decide, we had written guidelines to point to. I pointed to these three the most often:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;comments explain why the code is the way it is, not what it does (so code is clearer to read and update)&lt;/li&gt;
&lt;li&gt;setup and teardown should take place outside the test (so pytest reporting tells you there's an &lt;code&gt;error&lt;/code&gt; instead of a &lt;code&gt;failure&lt;/code&gt; when something's off)&lt;/li&gt;
&lt;li&gt;API tests assert the status code before any details about the response body (because the body's not going to have the right stuff in it anyway if the status code is wrong)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I would give feedback about these topics, trying to ask questions to disambiguate my observations from interpretations. I knew that the person who'd written the code had spent more time and thought steeped in the problem than I had. Questions allowed me to assume competence while gathering evidence to the contrary. &lt;/p&gt;
&lt;p&gt;As I read other people's code, I saw lots of weird stuff: stuff I would name differently, stuff I would put in a different order, stuff that took up more or fewer lines than I would have to write the same thing. My experience living in a non-native English speaking culture served me well here: I let it go. Was the test name meaningful to them and their team? Did putting it across a couple more lines help them understand it better? Was it actually a problem with what the code did or just a personal opinion? Did they want to set the constant right before they used it instead of at the top? Go for it! It works, I can understand what they meant, and that should be the threshold. My review was not an opportunity for me to show off my Python skills. I was there to help the code submitter with their tests. I reserved the right to remain silent on unimportant matters. &lt;/p&gt;
&lt;h3&gt;Communicate well.&lt;/h3&gt;
&lt;h4&gt;Praise the good!&lt;/h4&gt;
&lt;p&gt;Notice when people have done something well and praise them for it! Positive reinforcement is the best way to turn up the good on what's already happening in your code base.&lt;/p&gt;
&lt;h4&gt;Right level of abstraction&lt;/h4&gt;
&lt;p&gt;I reviewed merge requests that were 30% done that I mistook for 100% done; conversely I saw at 110% done that I would have killed at 30%. A little [WIP] label in the name of the merge request or bullet list of which tests were still missing helped me offer the code submitter the right kind of feedback at the right time. &lt;/p&gt;
&lt;p&gt;Sometimes, the code isn't the problem, the product is. I've seen a 500 http status code returned for something the user screwed up, which should be in the 400-range. A code comment "Should this be a 400 response?" opened up a more interesting conversation about where the product was in its lifecycle and the code submitter could lobby their team to change the product's behavior.&lt;/p&gt;
&lt;p&gt;If having the conversation about the code isn't the right approach, I tried having &lt;a href="https://elizabethzagroba.com/posts/2021/delivering_information_vs_delivering_meta_information/"&gt;the meta-conversation&lt;/a&gt; instead. "I'm not convinced this API spec is done. Where are you in that process?"&lt;/p&gt;
&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2022/wtf.png" style="display:block; margin-left: auto; margin-right: auto;" title="Code quality measurement: WTFs/minute"&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;Code quality measurement: WTFs/minute&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;Right format&lt;/h4&gt;
&lt;p&gt;Tone is hard in writing. I do prefer writing, because it gives me the opportunity to have several drafts, separating my WTFs-per-minute from what the code submitter receives. I just don't always hit send. Before leaving a comment on a particular line in gitlab, I ask myself: is this the right format? Have I removed any judgy adverbs like "just", "obviously", or "actually"? Would a video call, a Slack message, or a comment on the whole merge request be more likely to be embraced?&lt;/p&gt;
&lt;h4&gt;The receiving&lt;/h4&gt;
&lt;p&gt;One of the many tough things about feedback is that the receiver determines the priority of the feedback. (For all the other tough things about feedback, read &lt;a href="https://app.thestorygraph.com/books/15270135-7360-4e66-b079-4cbd618dfb76"&gt;&lt;em&gt;What Did You Say? The Art of Giving and Receiving Feedback&lt;/em&gt;&lt;/a&gt;.) The code submitter often completely miss what I meant the first time. Even if I thought I'd delivered my feedback as well as I could have, it wasn't always accepted. Everyone extracts different information from the same situation. The feedback that provides the most information can be the hardest to accept.&lt;/p&gt;
&lt;h3&gt;It doesn't have to be like this.&lt;/h3&gt;
&lt;h4&gt;Asynchronous&lt;/h4&gt;
&lt;p&gt;You may have read my first paragraph and asked yourself "why is she doing so many async code reviews?" and you'd be right! The company was scaling at a speed that I was forced to optimize for "number of minutes per day without video calls" over shared understanding.&lt;/p&gt;
&lt;h4&gt;Synchronous&lt;/h4&gt;
&lt;p&gt;Did you know that working in a pair or an ensemble can do all this feedback and knowledge-sharing stuff in a better way? See more about how an ensemble made learning happen in &lt;a href="https://ezagroba.github.io/mob-testing/"&gt;this slide deck&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;When I was able to, having a conversation helped me make sure that I was giving the right feedback at the right time to the right person. Pairing with the code submitter got not only the mistakes fixed, but also the thought processes behind those mistakes.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2022/two_birds.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Don't take my word for it.&lt;/h3&gt;
&lt;p&gt;I have the benefit of learning from smart people who are also thinking through what code reviews are and what they can be. I have yet to be free at a time when &lt;a href="https://github.com/neontribe/code-reading-club/"&gt;the code reading club&lt;/a&gt; Felinne Hermans started has met, but I look forward to joining sometime in the future. Here is a collection resources that I've already found useful:&lt;/p&gt;
&lt;h4&gt;Videos&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Sarah Mei on &lt;a href="https://www.youtube.com/watch?v=YL-6RCTywbc"&gt;The Power of Agile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Nina Zakharenko on &lt;a href="https://www.youtube.com/watch?v=6L3ZVLtSeo8"&gt;Code Review Skills for Pythonistas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sasha Laundy on &lt;a href="https://www.youtube.com/watch?v=hY14Er6JX2s"&gt;Giving and Getting Technical Help&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Books&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://app.thestorygraph.com/books/15270135-7360-4e66-b079-4cbd618dfb76"&gt;&lt;em&gt;What Did You Say? The Art of Giving and Receiving Feedback&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://app.thestorygraph.com/books/b15fe452-5b8e-49f5-9e0b-90da490b944c"&gt;&lt;em&gt;Crucial Conversations: Tool for Talking When Stakes Are High&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Blog posts&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Michaela Greiler on &lt;a href="https://www.michaelagreiler.com/respectful-constructive-code-review-feedback/"&gt;giving respectful code reviews&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Michaela Greiler on &lt;a href="https://www.michaelagreiler.com/accept-code-review-feedback/"&gt;how to handle criticism during code reviews&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jessica Joy Kerr on &lt;a href="https://jessitron.com/2021/03/27/those-pesky-pull-request-reviews/"&gt;those pesky code reviews&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Angie Jones with &lt;a href="https://angiejones.tech/ten-commandments-code-reviews/"&gt;the 10 commandments of navigating code reviews&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lucas Rocha on &lt;a href="https://lucasr.org/2011/01/29/micro-commits/"&gt;microcommits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Quotes found on Twitter&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;April Wensel on &lt;a href="https://twitter.com/maaretp/status/1024995595973525510"&gt;compassionate code review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Patricia Aas on the &lt;a href="https://twitter.com/pati_gallardo/status/1373343835330383878"&gt;zero-trust process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Michaela Greiler on how &lt;a href="https://twitter.com/mgreiler/status/1482247806798733317"&gt;everybody needs an editor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Michaela Greiler &lt;a href="https://twitter.com/mgreiler/status/1481902327640608770"&gt;thread on the biggest annoyances during code reviews&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Amy Edmondson on &lt;a href="https://twitter.com/AmyCEdmondson/status/1476198824012136460"&gt;psychological safety&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jerry Weinberg on &lt;a href="https://twitter.com/mstine/status/1481660769456513029"&gt;egoless programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Allen Holub on &lt;a href="https://twitter.com/allenholub/status/1491168642586710016"&gt;async code reviews&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Allen Holub on &lt;a href="https://twitter.com/allenholub/status/1482564778149175298"&gt;inspecting quality in&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@robinmathlener?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Robin Mathlener&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;</description><category>code-review</category><category>communication</category><category>feedback</category><guid>https://elizabethzagroba.com/posts/2022/02_27_strengthen_your_code_review_skills/</guid><pubDate>Sat, 26 Feb 2022 23:00:00 GMT</pubDate></item><item><title>Try Asking Different Questions</title><link>https://elizabethzagroba.com/posts/2021/try_asking_different_questions/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;figure&gt;&lt;img src="https://elizabethzagroba.com/images/posts/2021/paths.jpeg"&gt;&lt;/figure&gt; &lt;p&gt;I'll never know everything, but I love asking questions to get to know more. Obviously, the same question applied in different contexts will yield different results. A couple questions that worked exactly as I'd wanted with engineering teams really fell flat with UX and product. And a couple &lt;a href="https://elizabethzagroba.com/posts/2021/delivering_information_vs_delivering_meta_information/"&gt;meta-level&lt;/a&gt; questions allowed openings I wouldn't have imagined. &lt;/p&gt;
&lt;h3&gt;When I asked the wrong question&lt;/h3&gt;
&lt;h4&gt;Joining standups&lt;/h4&gt;
&lt;p&gt;Part of the charter for my role is to help improve processes and communication around the department. I'd attended each of the engineering team daily standup meetings, and I wanted to do the same for our designers. My intention was something everyone would agree to, but how I asked made it difficult for the designer to see that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"Do designers all meet once a day? I've joined all the other standups; may I join yours?""&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This might have given an impression that I was trying to inflict help or take over, rather than listen and see if my expertise was needed. Even following up with more details about wanting not to duplicate their work didn't seem to clarify my intention. &lt;/p&gt;
&lt;p&gt;Ultimately, speaking to another colleague and starting with my intention helped me understand what space I could be included in. There was a weekly meeting the engineering and product managers attended, where deeper design sessions were planned for that week. I would have never known to ask:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"Can I attend your weekly meeting with the managers?" &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;because I didn't know there was a weekly meeting. Sharing my intention might have gotten me there sooner.&lt;/p&gt;
&lt;h4&gt;End-to-end flow&lt;/h4&gt;
&lt;p&gt;I'd made a big, complicated diagram of how our users moved through our connected products. I'd imagined it could trigger discussions about all sorts of things, but the two things I wanted it to give the most perspective on were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"Are we testing the end-to-end flow?"&lt;/li&gt;
&lt;li&gt;"Are we capturing metrics on the end-to-end flow?"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Describing the specific actions a user could take and how the products were interconnected showed that, for the development teams, it was hard to know what the ends were. I showed the diagram to most of the development teams and asked the question:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"What could users do that I haven't captured?"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;They each thought of things inside the little bubble of their work. But asking the same question to a product owner yielded completely different results: more questions, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"Who are our users? Where do I see them here?"&lt;/li&gt;
&lt;li&gt;"Can we separate out one flow for one use case for one user?"&lt;/li&gt;
&lt;li&gt;"How are people onboarded? Where do our users start?"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Those last two were completely left of my diagram, since they were outside the scope of what our development teams would build or test for a particular user story. But indeed, the product owners were right that onboarding was part of the end-to-end flow, and thus should be included in how we're looking at the user's journey. &lt;/p&gt;
&lt;p&gt;After a few more discussions, I identified an even better question for the product owners: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"How are you thinking about the whole journey a user takes?" &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;When I asked the right question&lt;/h3&gt;
&lt;h4&gt;Is this the right agenda?&lt;/h4&gt;
&lt;p&gt;I started a meeting with a group of about 12 people with the question:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"Is this the right agenda?" &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I wanted to make sure the needs that I could see from my position matched what was most important to them. There were five items on the agenda. When we got to the third one, someone determined that there was another way we could approach it, and we changed the agenda right there. Offering the opportunity at the beginning allowed for the team members to take ownership of their time. &lt;/p&gt;
&lt;h4&gt;What fell through the cracks?&lt;/h4&gt;
&lt;p&gt;Retrospectives I've attended and facilitated have often had a "What went wrong?" kind of section. I asked a different question in a session about test strategy, hoping to uncover something slightly different: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"What fell through the cracks?" &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Leaving enough silence let people ponder their work in the recent weeks. People named a few product bugs logged to start. After even more silence, some process bugs came to light as well. It was interesting to see how a slight change in the phrasing of the question uncovered things the retrospectives hadn't. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;What questions do you tend to ask to the same people in the same way? What might you discover if you change the way you're asking the question? Can you leave more room for thought and contemplation in your conversations?&lt;/p&gt;</description><category>coaching</category><category>communication</category><category>leadership</category><category>mindset</category><guid>https://elizabethzagroba.com/posts/2021/try_asking_different_questions/</guid><pubDate>Thu, 30 Dec 2021 23:00:00 GMT</pubDate></item><item><title>Cutting People Off</title><link>https://elizabethzagroba.com/posts/2021/cutting_people_off/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;figure&gt;&lt;img src="https://elizabethzagroba.com/images/posts/2021/shushing.jpeg"&gt;&lt;/figure&gt; &lt;p&gt;Impatience is a virtue. &lt;/p&gt;
&lt;p&gt;If impatience is solely your own, sorry, but you're the asshole. But if impatience is shared, saving your colleagues from a tiresome conversation will make their day. &lt;/p&gt;
&lt;h4&gt;Notice that a topic should come to a close&lt;/h4&gt;
&lt;p&gt;When you listen actively, you'll notice when something has already been said. It is much easier (particularly when remote) to give up, zone out, and think about something else. Don't be that person.&lt;/p&gt;
&lt;p&gt;Engage with your colleagues! Save yourself and others from the perpetual purgatory that is an ineffective meeting. Pay attention. &lt;/p&gt;
&lt;h4&gt;Decide whether you are the right person to close a topic&lt;/h4&gt;
&lt;p&gt;There will be settings where you are the right person to decide if a topic should come to a close: in a small group of relative equals, when you're the appointed facilitator, or you're in some other position of power relative to the individuals or the subject matter. Recognize when you're not in the right position to change what's happening in the moment, and skip to Follow-up for more.&lt;/p&gt;
&lt;p&gt;If the group already has expectations about what is or isn't on topic, your interruption should be enough. If it doesn't, or you want to take this opportunity to set a new one, interrupt with a meta-question. &lt;/p&gt;
&lt;h4&gt;How to deliver this message&lt;/h4&gt;
&lt;p&gt;I'm not always in the best position to decide whether now is the right time for a topic, so I tend to deliver topic-closing messages as questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I agree with your point about Thing B, but can we come back to Thing D?&lt;/li&gt;
&lt;li&gt;We agreed that Person A is going to follow-up with Person C, is there anything more that we need to discuss about Thing B right now?&lt;/li&gt;
&lt;li&gt;We could discuss Thing B more in this group, but since we're missing Person C's crucial input, should we?&lt;/li&gt;
&lt;li&gt;I've captured what Person A said here in the notes. Was there anything I missed?&lt;/li&gt;
&lt;li&gt;I think Person A already said Thing B, shall we move on?&lt;/li&gt;
&lt;li&gt;It sounds like we're still discussing Thing B after we just agreed not to, am I understanding that correctly?&lt;/li&gt;
&lt;li&gt;Can we leave it there for now?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you're not sure if it's the right time for a question, try a meta-question:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Is now the right time to decide if we should keep talking about Thing B?&lt;/li&gt;
&lt;li&gt;Are we going to be able to come to Decision D today?&lt;/li&gt;
&lt;li&gt;Did we decide on a next step towards Thing B, or is that what you were describing?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Give the group a chance to decide, but don't be afraid to hold them to their decision. These are not questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We've agreed to that. Let's move on.&lt;/li&gt;
&lt;li&gt;That's all we needed Person A for, let's let them go.&lt;/li&gt;
&lt;li&gt;That's all I have for you, I'll let you go.&lt;/li&gt;
&lt;li&gt;Thank you for your input/time. &lt;/li&gt;
&lt;li&gt;I understand now.&lt;/li&gt;
&lt;li&gt;Got it, thanks.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Follow-up&lt;/h4&gt;
&lt;p&gt;Get feedback on your behavior. This is how you learn.&lt;/p&gt;
&lt;p&gt;A retrospective or 1-on-1 would be a good place to find out if the balance was right between gathering/sharing information and staying on topic. Asking someone to watch out for this particular behavior ahead of time will allow them to give you better feedback afterwards. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;A colleague once declared me the "queen of cutting people off" because I did so very politely. I have a compliment stickie note from "ruling refinement with an iron fist." We should all be so lucky to have our work appreciated this way.&lt;/p&gt;
&lt;p&gt;For more on meta-information, see &lt;a href="https://elizabethzagroba.com/posts/2021/delivering_information_vs_delivering_meta_information/"&gt;this post&lt;/a&gt;. For more on setting agendas and preparing for meetings to make them effective, see &lt;a href="https://j19sch.github.io/slides/atd2020-making-meetings-work.html"&gt;this deck&lt;/a&gt;.&lt;/p&gt;</description><category>communication</category><category>humans</category><category>leadership</category><category>meetings</category><guid>https://elizabethzagroba.com/posts/2021/cutting_people_off/</guid><pubDate>Sun, 17 Oct 2021 22:00:00 GMT</pubDate></item><item><title>Praise the Messenger</title><link>https://elizabethzagroba.com/posts/2021/praise_the_messenger/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;p&gt;I hear no a lot. No, that's not in scope for this story. No, it's not worth fixing that now. No, that's not risky enough for you to spend time testing. Hearing no on a good day sparks my creativity and pushes me into more valuable directions. On a bad day, it makes me wonder why I should keep going. &lt;/p&gt;
&lt;p&gt;Saying no in a good way takes practice. I've honed this skill with wisdom from some of the best. Elisabeth Hendrickson tweeted &lt;a href="https://twitter.com/testobsessed/status/1361844997276930049"&gt;a list of some of the different ways she has of saying no&lt;/a&gt;. It reminded me that the &lt;a href="https://twitter.com/ezagroba/status/1376971216653856770"&gt;sassy replies&lt;/a&gt; I send to recruiters and speaking engagements in which I have no interest or connection. If you're looking for a style that builds bridges rather than burns them down, I'd recommend Elisabeth's Hendrickson's examples, not mine. &lt;/p&gt;
&lt;p&gt;At Let's Test in Sweden in 2016, Fiona Charles gave a workshop on Learning to Say No. We practiced different ways to say no, complete with supporting arguments and steadfast determination tailored to the real-life situations participants brought to the workshop. (In a demonstration of having embraced the message of the workshop, we disbanded halfway through the allotted time. I spent the rest of the afternoon on a memorable bike ride along the Swedish coast.) The strongest revelation from the group was: we have more power than we think we do. There may be consequences to saying no, refusing a particular task, or turning down an opportunity, but it's often within our power to do so. Saying no effectively makes room you to decide how to spend your time.&lt;/p&gt;
&lt;p&gt;At Agile Testing Days in 2018, Liz Keogh gave a keynote on &lt;a href="https://www.youtube.com/watch?v=KvKFlMfEqxM"&gt;how to tell people they failed (and make them feel great)&lt;/a&gt; that culminated in a surprising conclusion: don't. Don't tell people they failed. Use positive reinforcement to encourage the behaviors you want to see, and the others will fall away. &lt;/p&gt;
&lt;p&gt;We had a tester leave the company recently. They'd set goals with their manager that directly opposed the test strategy I helped them shape. Bugs they reported were shot down, postponed until future stories, or grouped together as issues to be fixed eventually someday. They were facing a lot of "no," and as far as I could see from a different team, not a lot of yes. How long would you last in this situation?&lt;/p&gt;
&lt;p&gt;I also have a tester reporting to me at the moment. They've been catching tricky things, find bugs, and preventing problems. I want them to keep doing what they're doing. I get that a developer's first reaction when they hear about a bug might not be "Oh wow, thank you so much for this pile of questions and work!" I have to give them that positive reinforcement so they keep reporting and digging into issues, so I call it out in their 1-on-1. They thank me, and says it keeps them going. &lt;/p&gt;
&lt;p&gt;Don't shoot the messenger. Praise the messenger. &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Tired: Don't shoot the messenger.&lt;br&gt;&lt;br&gt;Wired: Encourage and support the messenger, so they are motivated to keep bringing you messages.&lt;/p&gt;â Elizabeth Zagroba (@ezagroba) &lt;a href="https://twitter.com/ezagroba/status/1403356865694683137?ref_src=twsrc%5Etfw"&gt;June 11, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;Who are you saying no to frequently? Is your no driving them away, or encouraging them? Do you need to say no? &lt;/p&gt;
&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2021/sign.jpg" style="display:block; margin-left: auto; margin-right: auto;" title="If you were waiting for a sign - this is it."&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;If you were waiting for a sign - this is it.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;</description><category>coaching</category><category>communication</category><category>leadership</category><category>mindset</category><category>reporting</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2021/praise_the_messenger/</guid><pubDate>Sat, 26 Jun 2021 22:00:00 GMT</pubDate></item><item><title>Delivering Information vs. Delivering Meta-Information</title><link>https://elizabethzagroba.com/posts/2021/delivering_information_vs_delivering_meta_information/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;figure&gt;&lt;img src="https://elizabethzagroba.com/images/posts/2021/victor-garcia-unsplash.jpeg"&gt;&lt;/figure&gt; &lt;p&gt;One of the first testing skills I built was &lt;a href="https://elizabethzagroba.com/posts/2014/2014-02-24_writing-clear-and-effective-bug-reports/"&gt;bug reporting&lt;/a&gt;. I practiced narrowing down the steps to reproduce. I told my developers what was happening now and what should happen instead. I learned to include where the issue was occurring, so my developers would stop closing my bugs with the &lt;code&gt;Works for me&lt;/code&gt; resolution in Trac. &lt;/p&gt;
&lt;p&gt;In 2013, &lt;a href="https://twitter.com/PaulHolland_TWN"&gt;Paul Holland&lt;/a&gt; taught me to tell the story of my testing. That is, meta-information about my testing. Sure, I still reported the outcomes: these things didn't work, these things did. But I also reported:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;how I tested the product&lt;/li&gt;
&lt;li&gt;how good that testing was&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;How long did it take me to test? What was difficult about my testing, made it difficult to get started, or slowed it down? What wasn't I able to test? The reason we tell those stories is to help uncover product risks, process risks, and get help from those around us to solve the issues. &lt;/p&gt;
&lt;p&gt;This is meta-information about my testing. It's what I'm seeing as I'm doing it, one level removed from the actual testing itself. (Look up &lt;code&gt;testopies&lt;/code&gt; [testing + autopsy] for more on gathering meta-level information about your testing.) &lt;/p&gt;
&lt;p&gt;Building the skills around meta-information are important for doing any job well. These skills include:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;identifying when you're communicating at the information level, or the meta-level&lt;/li&gt;
&lt;li&gt;switching between and keep track of whether you're communicating at the information level or meta-level&lt;/li&gt;
&lt;li&gt;naming the different levels, and bringing the people you're communicating with on this level-switching journey&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These recent examples stick in my mind.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Addresing the question vs. addressing the miscommunication&lt;/h4&gt;
&lt;p&gt;I was interviewing a candidate for a Software Development Manager position. For about a half hour, every question proceeded more or less like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I'd ask a question.&lt;/li&gt;
&lt;li&gt;The candidate would speak for a minute or a few, without answering the question.&lt;/li&gt;
&lt;li&gt;I'd rephrase the question, be more specific, or add more details to help the candidate understand the question&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://elizabethzagroba.com/posts/2021/delivering_information_vs_delivering_meta_information/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;The candidate would speak again, again not answering the question.&lt;/li&gt;
&lt;li&gt;I'd try once or twice more, before moving on to the next question. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I realized early on that this was happening. I consider it an essential skill to be able to answer a question directly, or identify when you're having trouble doing that, as a Software Development Manager. I decided I'd reject the candidate, but realized I'd still have to get through the rest of this hour with them.&lt;/p&gt;
&lt;p&gt;My colleague, my co-interviewer, took a different approach. He called out the miscommication problem to the candidate! He said "Elizabeth is asking you questions, and you're not answering them. Did you notice that? Why is that?" It was direct in a way that made me uncomfortable, and that I would have trouble doing with someone I just met. But he moved the conversation to where it needed to be: the meta-level. The candidate struggled to answer this question as well.&lt;/p&gt;
&lt;p&gt;I jumped in to ease the awkwardness. I offered up my theory: the candidate's responses weren't answers, they were the candidate agreeing with the premise of the question. My colleague completely agreed, thanked me for contribution, but politely redirected the burden of this problem onto the candidate. The candidate continued to struggle without acknowledging the issue or the awkwardness for the rest of the interview. It was a clear decision for both me and my colleague: we would not be hiring this person.&lt;/p&gt;
&lt;h4&gt;Difficulty scheduling a meeting vs. telling them that&lt;/h4&gt;
&lt;p&gt;I was asking for more details on the planning of a project in standup. My developer described how hard it was to find time with a particular developer on another team. They said the project was going to take weeks to scope instead of the days they thought it could take, if only they could find time with this person. The project seemed important, already had a deadline (or really, sadline&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="https://elizabethzagroba.com/posts/2021/delivering_information_vs_delivering_meta_information/#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;), and waiting until the next free spot on this person's calendar wasn't working. &lt;/p&gt;
&lt;p&gt;I asked my developer "Have you given his this feedback directly?" I suspected that only the information had been communicated: the following meeting would have to wait a week. My hunch was correct. I suggested my developer try giving this person the meta-information: about how hard they were to schedule, how this was cutting into the time we had to work on the project once it was scoped, and how that threatened the deadline. Imagine how differently this person could react and rearrange what they were doing, or share their relative priorities so we could adjust our expectations, when given this meta-information. This was last week, so I don't know yet how this story ends!&lt;/p&gt;
&lt;h4&gt;Adding testing details to the story vs. why I'm asking for them&lt;/h4&gt;
&lt;p&gt;There was a user story about being able to send metrics from our application to another application. I was picking up the testing on the story. My developer said they'd confirmed in the other application that our metrics were sent. They'd only sent a success, so I was planning on using the same setup as they did to look in the other application, but see what a failure looked like instead. &lt;/p&gt;
&lt;p&gt;But that's not what I told my developer. What I said to them was: "Add enough details to the ticket so I can test it." It turned out, we had different ideas about what &lt;code&gt;enough&lt;/code&gt; meant. First they added a URL. I followed the URL and it went to a blank page with a header. I said the same thing again, "Add enough details to the ticket so I can test it." They wrote down the first button they had to click on. I asked a third time. They added one more detail, which still didn't tell me enough. But I got tired of asking. I tried all the options in the application, Googled to figure out what SQL query I needed, executed it, triggered a variety of different failures, and confirmed that they were received. &lt;/p&gt;
&lt;p&gt;Later, I explained to my developer the difference between my expectations and what they wrote. They explained how their expectations were also violated: they had to reach out to the team from the other product, figure out what to do, poke around in the product, and that the details they left me were all they received to be able to eventually figure it out. To them, just the URL going to a blank screen was &lt;code&gt;enough&lt;/code&gt;&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="https://elizabethzagroba.com/posts/2021/delivering_information_vs_delivering_meta_information/#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt;. &lt;/p&gt;
&lt;p&gt;I realized then that I had left out a crucial piece of meta-information: the reason I was asking for the details. I wanted to skip that poking around time. I had ten other tasks this day, and expected this to only take 20 minutes instead of the few hours it ended up taking. I was hoping to benefit from the poking around work my developer had already done. I was expecting a lot of context, and my developer was expecting to only need to share a little bit of context.&lt;/p&gt;
&lt;p&gt;Once I shared this with them, they understood where the gap was between my expectations and theirs. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The suggestion about scheduling difficulties, that was an easy conversation to have. The other two were quite difficult for me. They took patient, active listening. I had to keep asking myself if I'd been clear enough with my expectations. They definitely made me sweat. &lt;/p&gt;
&lt;p&gt;Moving between information communication and meta-level communication is a skill. It takes time, failure, reflection, and practice to do it. Doing it well is a leadership skill. &lt;a href="https://app.thestorygraph.com/books/b15fe452-5b8e-49f5-9e0b-90da490b944c"&gt;&lt;em&gt;Crucial Conversations&lt;/em&gt;&lt;/a&gt; helped me identify when it's worth working on the relationship with a person and investing in these conversations. You don't have to be managing people (as I am currently) to be building or using this skill. &lt;/p&gt;
&lt;p&gt;What meta-level conversations are you avoiding? Are there people where you find you're only able to communicate on an information level? Have you tried communicating with them on a meta-level? What would happen if you told them that's what you were trying?&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;In high-context cultures like the United States and the Netherlands, the deliverer assumes the burden of the miscommunication, not the receiver. There's more about this in &lt;a href="https://app.thestorygraph.com/books/f0d396c1-fcd9-4beb-9538-4d11e04e3e1c"&gt;&lt;em&gt;The Culture Map&lt;/em&gt;&lt;/a&gt;.Â &lt;a class="footnote-backref" href="https://elizabethzagroba.com/posts/2021/delivering_information_vs_delivering_meta_information/#fnref:1" title="Jump back to footnote 1 in the text"&gt;â©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;A deadline is when somebody dies. Most things we call deadlines at work are just sadlines, in that people are alive but just sad when they're missed. Read more about it in &lt;a href="https://lizkeogh.com/2017/08/31/reflecting-reality/"&gt;Liz Keogh's blog post&lt;/a&gt;.Â &lt;a class="footnote-backref" href="https://elizabethzagroba.com/posts/2021/delivering_information_vs_delivering_meta_information/#fnref:2" title="Jump back to footnote 2 in the text"&gt;â©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;My colleague is coming from a low-context culture. I'm coming from a high-context culture. You can read more examples of this in &lt;a href="https://app.thestorygraph.com/books/f0d396c1-fcd9-4beb-9538-4d11e04e3e1c"&gt;&lt;em&gt;The Culture Map&lt;/em&gt;&lt;/a&gt;, but it's the kind of non-fiction book that could have been a blog post, so just read the rest of this blog post instead?Â &lt;a class="footnote-backref" href="https://elizabethzagroba.com/posts/2021/delivering_information_vs_delivering_meta_information/#fnref:3" title="Jump back to footnote 3 in the text"&gt;â©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><category>communication</category><category>leadership</category><category>mindset</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2021/delivering_information_vs_delivering_meta_information/</guid><pubDate>Sat, 19 Jun 2021 22:00:00 GMT</pubDate></item></channel></rss>