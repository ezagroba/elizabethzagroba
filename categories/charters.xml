<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Elizabeth Zagroba: Organizational Anarchist (Posts about charters)</title><link>https://elizabethzagroba.com/</link><description></description><atom:link href="https://elizabethzagroba.com/categories/charters.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Â© 2022 &lt;a href="mailto:me@elizabethzagroba.com"&gt;Elizabeth Zagroba&lt;/a&gt; Mozilla Public License 2.0</copyright><lastBuildDate>Sun, 28 Aug 2022 14:47:48 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Complete the Main Quest First</title><link>https://elizabethzagroba.com/posts/2021/complete_the_main_quest_first/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;p&gt;Recently, I made an outline for a tester (who was still onboarding) for what kinds of things to test on a new API endpoint we added. They explored, wrote a bunch of automated tests to capture their work, and came back with a list of interesting and good catches in the error responses. My first question in our debrief was: did you try a successful response? They hadn't. I sent them back to tackle that too. &lt;/p&gt;
&lt;p&gt;Because a successful response is the first thing our product owner is going to ask about. That's what we'd want to show off at the review meeting internally to demonstrate the new API endpoint. That's the first the customer is going to try. They're going to copy the request from our OpenAPI specification, paste it in Postman (or the tool of their choice, but our customers so far have been using Postman), and see if their credentials will get them the response that matches the specification. These stakeholders share a common concern, and that's the risk we should be migitating with testing. First. &lt;/p&gt;
&lt;h3&gt;Complete the main quest first.&lt;/h3&gt;
&lt;p&gt;Complete the main quest first. Come back to the side quests. &lt;/p&gt;
&lt;p&gt;A customer had asked for this API endpoint to be added. If we'd tested the happy path first, we would have had the option of releasing the API for the customer to use. The risk of discovering a successful request wouldn't yield a successful response was relatively low in this case, since our developers tend to try one happy path themselves.&lt;/p&gt;
&lt;p&gt;But what if the main quest had required a lot of setup, explanations to build knowledge and context for the onboarding tester, or yielded an issue? I'd done a risk-based analysis of what all to complete as part of our definition of done for this story. But I hadn't shared my approach to completing the main quest first, so the tester did what testers do, and went on a hunt to find weird stuff. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2021/iceland.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Note down and follow-up on werid stuff; do not get distracted by it&lt;/h3&gt;
&lt;p&gt;Software will break in all sorts of ways. The more time and curiosity you have to dig into it, the more you'll discover. But are those the most important things? &lt;/p&gt;
&lt;p&gt;In this API, the tester discovered that if you paste 10,000 characters into a field that's meant for a UUID, you get a 400 response. But did they try a regular old UUID first? What if they get a 400 response no matter what they put in that field, because the field name in the specification doesn't match what's in the code? Is trying 10,000 characters the first and biggest risk they have to face when presenting this API to a customer?&lt;/p&gt;
&lt;p&gt;I'm not saying don't try 10,000 characters. &lt;a href="https://twitter.com/ezagroba/status/1234822805709053953"&gt;I love that shit&lt;/a&gt;. But decide if it's a risk you care about first. &lt;a href="https://elizabethzagroba.com/posts/2020/2020-05-24_if_a_test_falls_in_a_forest/"&gt;If you don't care about the outcome, don't test it&lt;/a&gt;. Don't make busy-work for yourself just to fill the time. &lt;/p&gt;
&lt;h3&gt;Make side quests a concious choice&lt;/h3&gt;
&lt;p&gt;Before you start throwing 10,000 characters at your API, talk to your team. Your developer can probably tell you if they never built something to deal with that situation. Your product owner can tell you they'd rather have it to the customer sooner. Your data analyst can tell you if there's already longer stuff than that in the database, or if you should be trying Japanese instead. &lt;/p&gt;
&lt;p&gt;Make side quests a deliberate choice. Share them to increase their value or figure out who on the team is best-suited to execute them. &lt;/p&gt;
&lt;h3&gt;Recognize when the quest is a journey, not a destination&lt;/h3&gt;
&lt;p&gt;Throwing 10,000 characters at an API may be a way to start a discussion about the speed at which responses are returned. It might be a way of showing &lt;a href="http://coffeeipsum.com/"&gt;your favorite random text generator&lt;/a&gt; to your fellow tester. It might be an exercise at an ensemble testing session, where everyone can practice pausing before executing an idea to describe the expected behavior first. &lt;/p&gt;
&lt;p&gt;Quests can be valuable in ways that are not directly related to the finishing the quest. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: I got asked recently if I use the word charter much with non-testers. I don't. Try reading this again but replacing every mention of "quest" with "charter".&lt;/em&gt;&lt;/p&gt;</description><category>charters</category><category>critical-thinking</category><category>exploratory-testing</category><category>mindset</category><category>reporting</category><category>risk-based-testing</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2021/complete_the_main_quest_first/</guid><pubDate>Sat, 03 Jul 2021 22:00:00 GMT</pubDate></item><item><title>Questions from Exploratory Week on Writing Exploratory Testing Charters</title><link>https://elizabethzagroba.com/posts/2021/questions_from_exploratory_week_on_writing_exploratory_testing_charters/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;figure&gt;&lt;img src="https://elizabethzagroba.com/images/posts/2021/MoT.jpg"&gt;&lt;/figure&gt; &lt;p&gt;The Ministry of Testing hosted a week all about exploratory testing. I had the honor and privilege to help shepherd a small group of testers on the path of writing charters for their exploration. The most interesting part for me is where people had questions. It helps me figure out what sunk in, what could use more explanation, and helps me know that I've answered at least one person's burning question. Here are some of the ones I remember from the live Q&amp;amp;A at the end:&lt;/p&gt;
&lt;h4&gt;Q. Do you use the word charter?&lt;/h4&gt;
&lt;p&gt;A. Basically no. I've only heard testers who've specifically dug into this topic use the word charter. Almost all of the people I collaborate with on a daily basis (developers, product owner, UX, managers, other testers) do not have this as part of their experience. Most of my colleagues are not working in their first language. As a native speaker, I need to have more than one word to describe any particular phenomenon in case the first one doesn't resonate, or isn't understandable in my accent. (Everyone has an accent.) I've called charters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;questions&lt;/li&gt;
&lt;li&gt;missions&lt;/li&gt;
&lt;li&gt;paths&lt;/li&gt;
&lt;li&gt;plans&lt;/li&gt;
&lt;li&gt;goals&lt;/li&gt;
&lt;li&gt;investigations&lt;/li&gt;
&lt;li&gt;journeys&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's less important to use the word charter than it is to get across the intent: you're going on an exploration, in a particular direction, with specific set of tools, and you hope to come away with more information on this topic than when you set out. Sharing your charters helps you get feedback about where to look more deeply, more broadly, and &lt;a href="https://elizabethzagroba.com/posts/2020/2020-05-24_if_a_test_falls_in_a_forest/"&gt;where not to look at all&lt;/a&gt;. &lt;/p&gt;
&lt;h4&gt;Q. Where do you bring charters up?&lt;/h4&gt;
&lt;p&gt;A. Where &lt;em&gt;don't&lt;/em&gt; I bring charters up? It bleeds into conversations I have about my work. &lt;a href="https://youtu.be/SM57HMJpkZc?t=974"&gt;Sharing my work and getting feedback about it is what ensures I'm providing valuable work for my team in the right direction&lt;/a&gt;. I tend to discover points of interest for my developers once or twice a day when development is starting, and more often when testing is at its peak, which often escalates to pairing. Here are some other moments in time where I share charters: &lt;/p&gt;
&lt;h5&gt;Standup&lt;/h5&gt;
&lt;p&gt;It's how I explain what I tested yesterday, what pieces I might have time for today, and what directions I haven't or won't have time for before we want to release the story. Sharing where I'm looking prevents me from being the one gatekeeper on quality for our product. "I've successfully called the API as an admin user and a regular user. Today I'm going to dig into what happens with the non-required fields." will solicit a completely different type of feedback than "I have an hour or two left on this story."&lt;/p&gt;
&lt;h5&gt;Refinement&lt;/h5&gt;
&lt;p&gt;Any clues I can give my team about what I'll be looking into, what kind of test data I might set up, and what tools I'll be using to test a particular feature will help them figure out the whole scope of the story. "I'm going to try names at the character limit to see how they wrap on the page." helps us all figure out that we need to talk about our expectations for a character limit, we need to talk to UX about what should happen when you try to input something too long, I need to test what happens on the API side for the same field, and we might need a frontend dev to help us with the wrapping or truncation depending on what UX decides.&lt;/p&gt;
&lt;h5&gt;Testing starts executing&lt;/h5&gt;
&lt;p&gt;This is the point in time where there's enough built that I can add test execution to the setup and planning I've already been doing on a story. It might be that the API spec is published, it might be that the application has one happy path built. The developers are still going, but there's somewhere for me to start. Depending on the size and complexity of the story, I'll reflect for myself, or share my ideas with someone else on the team. If it involves an integration with another team, I'd reach out to them too. &lt;/p&gt;
&lt;h4&gt;Q. Isn't that just a test case?&lt;/h4&gt;
&lt;p&gt;A. After almost two hours of technical difficulties and explaining things, I have to say I did not write the most elegant charter as an example during the workshop. You got me! I'm glad that this workshop participant has a good feel for what is too specific or too broad. I find this so hard to explain because so much of that depends on the context. &lt;/p&gt;
&lt;p&gt;But it wasn't terribly important to me to get the level of detail correct. Charters are a place to reflect on your testing and spark conversation. This charter did exactly that. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;You can find other questions there weren't time for during the workshop on the &lt;a href="https://club.ministryoftesting.com/t/wander-with-a-purpose-writing-charters-for-your-exploratory-test-sessions/49746"&gt;Ministry of Testing club&lt;/a&gt;. The &lt;a href="http://ezagroba.github.io/charters"&gt;slides from the workshop are on github&lt;/a&gt;. &lt;/p&gt;</description><category>charters</category><category>exploratory-testing</category><category>risk-based-testing</category><category>teaching</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2021/questions_from_exploratory_week_on_writing_exploratory_testing_charters/</guid><pubDate>Fri, 30 Apr 2021 22:00:00 GMT</pubDate></item></channel></rss>