<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Elizabeth Zagroba: Organizational Anarchist (Posts about automation)</title><link>https://elizabethzagroba.com/</link><description></description><atom:link href="https://elizabethzagroba.com/categories/automation.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>© 2022 &lt;a href="mailto:me@elizabethzagroba.com"&gt;Elizabeth Zagroba&lt;/a&gt; Mozilla Public License 2.0</copyright><lastBuildDate>Sun, 28 Aug 2022 14:47:48 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>From API Challenges to a Playwright Cookbook</title><link>https://elizabethzagroba.com/posts/2022/08_28_from_api_challenges_to_a_playwright_cookbook/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;figure&gt;&lt;img src="https://elizabethzagroba.com/images/posts/2022/playwright.png"&gt;&lt;/figure&gt; &lt;p&gt;Soon after &lt;a href="https://twitter.com/maaretp"&gt;Maaret Pyhäjärvi&lt;/a&gt; and &lt;a href="https://twitter.com/alex_schl"&gt;Alex Schladebeck&lt;/a&gt; began their endeavor to practice testing APIs using the &lt;a href="https://www.eviltester.com/page/tools/apichallenges/"&gt;API Challeges&lt;/a&gt; from &lt;a href="https://twitter.com/eviltester"&gt;Alan Richardson (aka The Evil Tester)&lt;/a&gt;, they looped me into their periodic practice sessions. Why? To make Past Elizabeth jealous, presumably. &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Continuing on the api challenges from &lt;a href="https://twitter.com/eviltester?ref_src=twsrc%5Etfw"&gt;@eviltester&lt;/a&gt; with &lt;a href="https://twitter.com/alex_schl?ref_src=twsrc%5Etfw"&gt;@alex_schl&lt;/a&gt; and &lt;a href="https://twitter.com/ezagroba?ref_src=twsrc%5Etfw"&gt;@ezagroba&lt;/a&gt; after weeks of being otherwise engaged, always happy to have see where we left off with a test. Simple thing for our future selves in group learning activity. &lt;a href="https://t.co/D99nC2PDVX"&gt;pic.twitter.com/D99nC2PDVX&lt;/a&gt;&lt;/p&gt;— Maaret Pyhäjärvi (@maaretp) &lt;a href="https://twitter.com/maaretp/status/1468883485205147652?ref_src=twsrc%5Etfw"&gt;December 9, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;h2&gt;API Testing Challenges&lt;/h2&gt;
&lt;p&gt;We gathered for an hour every few weeks to work through the challenges. The tools we were using (&lt;a href="https://docs.pytest.org/en/7.1.x/"&gt;pytest&lt;/a&gt;, the &lt;a href="https://pypi.org/project/requests/"&gt;Python requests library&lt;/a&gt;, and &lt;a href="https://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt;) were like home for Maaret and me. I'd been writing in a framework with these tools for my job for a few years already. &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Today in API testing adventures with &lt;a href="https://twitter.com/maaretp?ref_src=twsrc%5Etfw"&gt;@maaretp&lt;/a&gt; : We're profiting greatly from &lt;a href="https://twitter.com/ezagroba?ref_src=twsrc%5Etfw"&gt;@ezagroba&lt;/a&gt; 's python syntax expertise, and we're learning to doubt our oracles ;)&lt;/p&gt;— Alex Schladebeck (she/her) (@alex_schl) &lt;a href="https://twitter.com/alex_schl/status/1447894251384233984?ref_src=twsrc%5Etfw"&gt;October 12, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;I wasn't the only one. These tools were free to use and available for a number of years already. What the three of us combined couldn't figure out by trial-and-error, reading the error message, reading the darn description of what we were supposed to do again, or relying on patterns from previous exercises, we were able to Google. With one notable exception of course, as we are testers after all: &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Today's API testing challenges with &lt;a href="https://twitter.com/ezagroba?ref_src=twsrc%5Etfw"&gt;@ezagroba&lt;/a&gt; and &lt;a href="https://twitter.com/maaretp?ref_src=twsrc%5Etfw"&gt;@maaretp&lt;/a&gt; : the python requests library does not support TRACE...&lt;/p&gt;— Alex Schladebeck (she/her) (@alex_schl) &lt;a href="https://twitter.com/alex_schl/status/1468892681715822593?ref_src=twsrc%5Etfw"&gt;December 9, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;It may not &lt;em&gt;seem&lt;/em&gt; like you'd need three people to do the work that one person could do. But I assure you, having extra pairs of eyes to catch a typo, remember whether we were expecting it to pass or fail this time, see immediately that it's a whitespace issue making PyCharm angry, crack a joke, or help decide whether to keep going in the same direction makes the work go more smoothly. &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Observation from today's API testing session with &lt;a href="https://twitter.com/ezagroba?ref_src=twsrc%5Etfw"&gt;@ezagroba&lt;/a&gt; and &lt;a href="https://twitter.com/maaretp?ref_src=twsrc%5Etfw"&gt;@maaretp&lt;/a&gt; - it takes multiple people to remember all the details. A very succint way of summarising why we need to collaborate &lt;/p&gt;— Alex Schladebeck (she/her) (@alex_schl) &lt;a href="https://twitter.com/alex_schl/status/1478297685039976449?ref_src=twsrc%5Etfw"&gt;January 4, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;More than once, we'd end a session a few minutes early because we were stuck and lost, only to come back a couple weeks later with fresh eyes, able to understand where we were stuck and what to do about it. After several months meeting infrequently, we got through all of the API Testing Challenges! &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;We survived! Success! All of the &lt;a href="https://twitter.com/eviltester?ref_src=twsrc%5Etfw"&gt;@eviltester&lt;/a&gt;'s API Test Challenges complete! I love working with this team &lt;a href="https://twitter.com/ezagroba?ref_src=twsrc%5Etfw"&gt;@ezagroba&lt;/a&gt; &lt;a href="https://twitter.com/maaretp?ref_src=twsrc%5Etfw"&gt;@maaretp&lt;/a&gt; &lt;a href="https://t.co/xGKQOkW3gb"&gt;pic.twitter.com/xGKQOkW3gb&lt;/a&gt;&lt;/p&gt;— Alex Schladebeck (she/her) (@alex_schl) &lt;a href="https://twitter.com/alex_schl/status/1488520727649206288?ref_src=twsrc%5Etfw"&gt;February 1, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;Then we were like...now what? We like learning together, but we'd achieved our goal. &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Now we're talking about our next learning goals: mine are 'learning anything with awesome people' &lt;a href="https://twitter.com/maaretp?ref_src=twsrc%5Etfw"&gt;@maaretp&lt;/a&gt; &lt;a href="https://twitter.com/ezagroba?ref_src=twsrc%5Etfw"&gt;@ezagroba&lt;/a&gt;&lt;/p&gt;— Alex Schladebeck (she/her) (@alex_schl) &lt;a href="https://twitter.com/alex_schl/status/1488521161923252224?ref_src=twsrc%5Etfw"&gt;February 1, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;h2&gt;Starting out with Playwright&lt;/h2&gt;
&lt;p&gt;After a bit of brainstorming, we landed on a skill Alex and I were both still building: UI automation. Naturally, Maaret was way ahead of us, and pointed us towards Playwright framework and &lt;a href="http://selenium.thinkcode.se/"&gt;a practice site&lt;/a&gt; from &lt;a href="https://twitter.com/thomassundberg"&gt;Thomas Sundberg&lt;/a&gt; of all the greatest hits: radio buttons, drop-downs, alerts, you name it. &lt;/p&gt;
&lt;p&gt;Our experience with UIs, DOMs, automation, Selenium, exploration helped us, but didn't prevent every pickle we got ourselves into with Playwright. Though &lt;a href="https://playwright.dev/python/docs/intro"&gt;their documentation&lt;/a&gt; will tell you a lot of what you need to know (if you've correctly selected Python instead of Java or Node.js at the top), our desperation kept exceeding our patience. We escalated to the Playwright champion &lt;a href="https://twitter.com/AutomationPanda/"&gt;Andrew Knight&lt;/a&gt; and the Playwright community Slack channel.  &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;I'm not sure about that. Can anyone from &lt;a href="https://twitter.com/playwrightweb?ref_src=twsrc%5Etfw"&gt;@playwrightweb&lt;/a&gt; help answer?&lt;/p&gt;— Pandy Knight (@AutomationPanda) &lt;a href="https://twitter.com/AutomationPanda/status/1511346210434654219?ref_src=twsrc%5Etfw"&gt;April 5, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;Several times, it wasn't only the code that needed changing, but our perception of how Playwright wanted to interact with the website. These are a few I remember: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;an API response from a browser context can't be collected from a page context&lt;/li&gt;
&lt;li&gt;setting different contexts for a page and an alert on that page&lt;/li&gt;
&lt;li&gt;having that alert knowledge not help us when we also had to fill in a prompt&lt;/li&gt;
&lt;li&gt;expecting something in the DOM to tell us when an item in drop-down was checked&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;&lt;a href="https://twitter.com/maaretp?ref_src=twsrc%5Etfw"&gt;@maaretp&lt;/a&gt; &lt;a href="https://twitter.com/alex_schl?ref_src=twsrc%5Etfw"&gt;@alex_schl&lt;/a&gt; A kind gentleman in the Playwright Slack pointed us here: &lt;a href="https://t.co/e12v4nhth5"&gt;https://t.co/e12v4nhth5&lt;/a&gt;&lt;br&gt;&lt;br&gt;It returns the value `milk` but not the visible text `Milk` of what's selected. Perhaps that's good enough!&lt;/p&gt;— Elizabeth Zagroba (@ezagroba) &lt;a href="https://twitter.com/ezagroba/status/1528999806928048130?ref_src=twsrc%5Etfw"&gt;May 24, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;For the first three, wrapping our heads around a different way of thinking got us through the problem. For the last on, we lowered our expectations about what we could check. (Pun intended.) &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Learning more on &lt;a href="https://twitter.com/hashtag/playwright?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#playwright&lt;/a&gt; with &lt;a href="https://twitter.com/ezagroba?ref_src=twsrc%5Etfw"&gt;@ezagroba&lt;/a&gt; and &lt;a href="https://twitter.com/alex_schl?ref_src=twsrc%5Etfw"&gt;@alex_schl&lt;/a&gt; and coming to realisation we are modelling the world wrong and thus having harder time discovering info on the API documentation. We need to remodel our worlds.&lt;/p&gt;— Maaret Pyhäjärvi (@maaretp) &lt;a href="https://twitter.com/maaretp/status/1537423632632266752?ref_src=twsrc%5Etfw"&gt;June 16, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;h2&gt;Playwright Cookbook&lt;/h2&gt;
&lt;p&gt;We've tested what we can and should test on our first practice site. In upgrading to a more challenging one, we realized that we'd benefit from the knowledge our past selves gained. And that you could too. &lt;/p&gt;
&lt;p&gt;We've published our progress on github as the &lt;a href="https://github.com/ezagroba/playwright-cookbook"&gt;Playwright Cookbook&lt;/a&gt;. It's a Python repository of what we found that worked for different UI situations. It's one step beyond the Python documentation on the Playwright website, it lets you compare an actual page to a test where we were able to select the element. &lt;/p&gt;
&lt;h2&gt;Fun was had by all&lt;/h2&gt;
&lt;p&gt;Trying to quickly get something done with a new UI automation tool had been my white whale, something I knew was annoying enough that I wouldn't know how to get unstuck. Working in an ensemble meant either (1) the knowledge we needed was in the room and just had to be shared, or (2) two brilliant, successful ladies known for their testing prowess also didn't have a clue what was happening. Either way, it made things better and achievable. &lt;/p&gt;
&lt;p&gt;I am notoriously opposed to fun. But this has been fun. &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;"You only get to do fun exploratory testing after you have first automated it. That is the rule." Making fun of us exploring continuously when playing with &lt;a href="https://twitter.com/hashtag/Playwright?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Playwright&lt;/a&gt; with &lt;a href="https://twitter.com/alex_schl?ref_src=twsrc%5Etfw"&gt;@alex_schl&lt;/a&gt; &lt;a href="https://twitter.com/ezagroba?ref_src=twsrc%5Etfw"&gt;@ezagroba&lt;/a&gt;&lt;/p&gt;— Maaret Pyhäjärvi (@maaretp) &lt;a href="https://twitter.com/maaretp/status/1542443256977424391?ref_src=twsrc%5Etfw"&gt;June 30, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;The added fun and energy in learning hands-on things together creates an environment where we want to show up and learn. Social software testing for learning, FTW!&lt;/p&gt;— Maaret Pyhäjärvi (@maaretp) &lt;a href="https://twitter.com/maaretp/status/1542451911676272640?ref_src=twsrc%5Etfw"&gt;June 30, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;h2&gt;What's next&lt;/h2&gt;
&lt;p&gt;What is next for us? We know we want to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;keep learning together&lt;/li&gt;
&lt;li&gt;add more recipes for &lt;a href="https://the-internet.herokuapp.com/"&gt;our next testing target&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Have we reflected on what's valuable and not valuable to test on an API? Will we share more about this beyond this blog post? A conference talk or workshop? A Twitch stream?? Only time will tell. For now, enjoy the github repo. :)&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Perhaps instead of proposing to show up in conferences to do our learning sessions, we should start a twitch stream on our learning sessions &lt;a href="https://twitter.com/alex_schl?ref_src=twsrc%5Etfw"&gt;@alex_schl&lt;/a&gt; &lt;a href="https://twitter.com/ezagroba?ref_src=twsrc%5Etfw"&gt;@ezagroba&lt;/a&gt; :D&lt;/p&gt;— Maaret Pyhäjärvi (@maaretp) &lt;a href="https://twitter.com/maaretp/status/1542471658220527617?ref_src=twsrc%5Etfw"&gt;June 30, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;hr&gt;
&lt;p&gt;Editor's Note: The emojis have been edited out of these tweets because I still haven't bothered to track down why upgrading the version of my static site generator caused emojis to cause entire pages not to render. :bug: :magnet: &lt;/p&gt;</description><category>automation</category><category>playwright</category><category>python</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2022/08_28_from_api_challenges_to_a_playwright_cookbook/</guid><pubDate>Sat, 27 Aug 2022 22:00:00 GMT</pubDate></item><item><title>From Crafting Project to Critical Infrastructure</title><link>https://elizabethzagroba.com/posts/2022/06_12_from_crafting_project_to_critical_infrastructure/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;figure&gt;&lt;img src="https://elizabethzagroba.com/images/posts/2022/megaphone.jpg"&gt;&lt;/figure&gt; &lt;h3&gt;Just for me&lt;/h3&gt;
&lt;p&gt;Three years ago, I had a shit laptop. My company makes a Windows desktop software product that allows you to build your own applications. Mac users working the software could open it on their Windows virtual machine in Parallels. When I did that, my company's software crashed, Parallels crashed, and then my whole Mac crashed. My job was to create app builds, run them, and test them. Due to my shit laptop, I couldn't do that locally. &lt;/p&gt;
&lt;p&gt;Luckily, our app was also hosted in our public cloud. Through the cloud UI, you could make a build, see which build was on which of your environments, and deploying a new build. But the UI was...not an ideal workflow for me. It was slow to load, required several steps of clicking and waiting for a minute or two - just long enough to get distracted thinking about something else. A deploy process that might optimally take ~8 minutes took ~15 minutes as my mind wandered and the UI didn't update immediately. &lt;/p&gt;
&lt;p&gt;I needed a one-step process to deploy, with updates frequent enough to hold my attention. I decided to abandon the UI for the API. &lt;/p&gt;
&lt;p&gt;I wrote a Python script that took command-line input and printed output to the console as the steps of the process progressed. I used my two crafting days that month to break down the problem, setup the whole repository, and get the code to a state where it built and deployed an app to an environment. &lt;/p&gt;
&lt;p&gt;A code review from Joep Schuurkes moved the code from a long list of functions to different classes corresponding to the API endpoints I was calling. I think the commands were limited to &lt;code&gt;--build&lt;/code&gt; and &lt;code&gt;--deploy&lt;/code&gt;. To make sure the refactor was successful, I'd scroll up in my Terminal history and run those two commands again. Crafting days on subsequent months brought a bit more error-handling to account for mistypes on my side or failures/timeouts from the APIs. &lt;/p&gt;
&lt;p&gt;At this point, it was a solid tool that saved me about a half-hour per day. I presented it to the developers on my team, offering them access to the repository so they too could benefit from this time-savings. &lt;/p&gt;
&lt;p&gt;They were deeply unimpressed. They didn't have shit laptops, they had Windows laptops, they didn't have to run Parallels, they weren't constantly switching between branches and needing actual builds of the application to test. To them, this script was relatively useless. That was fine by me! The time and frustration the script saved me was more than worth the effort to build it. I used it several times a day myself, and got to use it as an example in the "Whole Team Approach to Continuous Delivery" workshop I paired with Lisa Crispin on. That was more than enough. &lt;/p&gt;
&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2022/cloud-deployment-script.png" style="display:block; margin-left: auto; margin-right: auto;" title="Slide from the workshop"&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;Slide from the workshop&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;Pipelines emerge&lt;/h3&gt;
&lt;p&gt;Six months later, a developer on my team got excited to set up a pipeline for our application. They wanted to run static code analysis on a build of our application, and run our functional tests against a deployed application running in a deployed environment. They copy + pasted my code as a starting point for the build and deploy, copy + pasted the static code analysis scans from another unit, and connected the two in a pipeline that provided value to the wider team. Developers weren't great at running tests on their feature branches on their machines; now we had a pipeline that would do it for them. &lt;/p&gt;
&lt;p&gt;Other teams saw our pipeline and discovered my deployment script in the process. Rather than copy + pasting the code as my teammate did, they pinned their pipelines to the most recent version of the code on the master branch. &lt;/p&gt;
&lt;p&gt;With more users and use cases, fellow colleagues were eager to also use their two crafting days per month to add the features they needed. I'd receive pull requests of things I didn't need for a context I didn't have, or feature requests I used my limited crafting time to fulfill. Without a style guide, a linter, tests, or a set scope, it was hard to turn away pull requests weeks or months in the making that people were eager to see included in the master branch. I merged it to keep everyone unblocked. As the code grew to serve every individual need, I lost  interest in supporting what had originally been my darling pet project. &lt;/p&gt;
&lt;h3&gt;Still Valuable?&lt;/h3&gt;
&lt;p&gt;Two years after the original two-day crafting project, my role shifted from serving one team and one application to thinking about quality for the seven engineering teams in my unit. No longer did I need to deploy the application to a hosted environment. At the same time, my old team shifted where the repository was located, and the APIs I'd been calling in my script wouldn't do a lot of what they used to. &lt;/p&gt;
&lt;p&gt;I got to explore what it meant to be the Quality Lead for my unit, and nobody I served needed this script. I left the list of improvements I'd brainstormed for it languishing at the bottom of my personal Trello board. I didn't get any requests from other departments to use or update it. &lt;/p&gt;
&lt;h3&gt;Still Valuable!&lt;/h3&gt;
&lt;p&gt;Nine months later, the spark got reignited! A fork of the deployment script got presented in another unit, complete with a UI on top of it. Someone on my old project discovered my script, and decided to add a feature to upload builds from the new repository location to make it useful again. They shared the code for a review after just a few hours of effort. &lt;/p&gt;
&lt;p&gt;I had a chance to think through what parts of the repository were resuable for this use-case, which parts would be better copy + pasted for better readability, and got the merge request to a place where it fit in with the existing code style before anyone's heart and soul had been poured into it. &lt;/p&gt;
&lt;p&gt;Now a bloated script eight different actions, I decided to start writing tests for it. I didn't need the tests to make sure the existing code worked; everyone using it in their pipelines was enough to prove that. Tests will allow for future refactoring of the code and updating the version of the API I'm calling.&lt;/p&gt;
&lt;p&gt;The first test I added confirmed that the new functionality did what the code submitter expected it to do, gave me a way to change individual parameters  faster. and gave me the confidence and excitement I'd been missing. &lt;/p&gt;
&lt;p&gt;I'm just getting going on tests for the rest of the existing code, but I'm looking forward to it!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Why do I tell you this story? Well, here's what I think when I look back at the evolution of this code base: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;write tests, even before you &lt;em&gt;really&lt;/em&gt; need them&lt;/li&gt;
&lt;li&gt;set up a linter and coding guidelines before you give anyone else access to your repo&lt;/li&gt;
&lt;li&gt;if you want to be precious about your code, tell people to fork instead of submitting merge requests&lt;/li&gt;
&lt;li&gt;if you want the code to be in its most findable place and shareable state, you'll have to invest the time to collaborate with people on their changes&lt;/li&gt;
&lt;li&gt;good things come to those who wait :)&lt;/li&gt;
&lt;/ul&gt;</description><category>apis</category><category>automation</category><category>code-review</category><category>python</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2022/06_12_from_crafting_project_to_critical_infrastructure/</guid><pubDate>Fri, 17 Jun 2022 22:00:00 GMT</pubDate></item><item><title>Unblocking Your Test Strategy</title><link>https://elizabethzagroba.com/posts/2021/unblocking_your_test_strategy/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;figure&gt;&lt;img src="https://elizabethzagroba.com/images/posts/2021/lightbulb.jpeg"&gt;&lt;/figure&gt; &lt;p&gt;In my new role as Quality Lead for my department, I get to figure out how to infuse everybody's work with "quality", and also figure out what that means exactly. &lt;/p&gt;
&lt;p&gt;One of my colleagues made it easy for me on my second day by coming with a relatively concrete problem: they wanted an acceptance environment for their team. Their team (henceforth: Eager Team) integrated with chronically overloaded and busy team (henceforth: Busy Team), so they wanted an environment where they could test their stuff together before it went into production. They wanted me to help set that up. &lt;/p&gt;
&lt;p&gt;I started my conversation with Eager Team Lead by taking one step back: why did they want this environment? They'd proposed a solution, but I wanted to spend at least a few minutes digging into the problem space with them to hear more about why they wanted this.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Come up with dream scenario&lt;/h4&gt;
&lt;p&gt;I asked Eager Team Lead what their dream setup would be for their test automation, and why that was the dream.&lt;/p&gt;
&lt;p&gt;Eager Team and Busy Team already had a test environment hooked up to one another. But they both threw whatever they were in the middle of on that environment. Eager Team couldn't count on a stable, usable version of Busy Team's software, and vice versa. Eager Team wanted a place to see what would happen against the production version of Busy Team's code. They wanted to automate all the things they could, and have a place to run that automation. &lt;/p&gt;
&lt;h4&gt;Identify (and confirm they are indeed) constraints&lt;/h4&gt;
&lt;p&gt;Unfortunately Busy Team was busy. They wouldn't be able to make setting up an environment for Eager Team a priority in the next few months. I had that impression, and so did Eager Team Lead. They were, after all, Busy Team. But I wanted to make sure that the busyness of Busy Team was a constraint. I took on the action point to follow up with Boss Person about how we could both (1) check that Busy Team was indeed too busy, and (2) how to get this request on Busy Team's long list for the future.&lt;/p&gt;
&lt;p&gt;I also dispelled one of assumptions underlying Eager Team Lead's dream setup: it was important to test everything, in an automated way, in the ideal environment, or else testing wouldn't be valuable. I explained that it's &lt;a href="https://app.thestorygraph.com/books/8ba29269-1843-4ac1-be0c-226752b17937"&gt;impossible to test everything&lt;/a&gt;. Testing in an automated way would be more likely to reveal known unknowns than the unknown unknowns their team was interested in. And that it wasn't all-or-nothing - every little bit would help.&lt;/p&gt;
&lt;h4&gt;Choose achieveable pieces within constraints&lt;/h4&gt;
&lt;p&gt;Rather than killing the dream, I identified a valuable first step in the direction of the dream. Eager Team would write down, in English to start, 3-5 things that they want to test using both their software and Busy Team's. They'd show those to their product owner to make sure they were things customers cared about. From there, we could look at whether to build automation, and if so, where to run it. There was that test environment already. We had production, could we use feature flags? Could we keep the data only visible to our employees internally? &lt;/p&gt;
&lt;p&gt;I knew I'd hit a nerve when Eager Team Lead said "Oh, we can just start iterating over this!" Because of course, the software itself is not the only thing you can build in an iterative way. Your test automation can also mitigate risk, confirm assumptions, and provide value along the way. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;So how'd it go? I confirmed Busy Team's busyness, and got more details on how and when to add this request to their list. I'm following up with Eager Team next week to see where they are in identifying valuable scenarios, or if I should jump in there too. &lt;/p&gt;
&lt;p&gt;But wow, what a feeling to be able to lift the weight of "I need a thing I don't know how to build and don't think I can ever get" off someone's shoulders and replace it with "I know what to do next and it's achievable." &lt;/p&gt;
&lt;p&gt;Stay tuned for more quality leading to come.&lt;/p&gt;</description><category>automation</category><category>coaching</category><category>risk-based-testing</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2021/unblocking_your_test_strategy/</guid><pubDate>Thu, 21 Oct 2021 22:00:00 GMT</pubDate></item><item><title>Test Automation Day 2018</title><link>https://elizabethzagroba.com/posts/2020/2020-07-13_test_automation_day_2018/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;p&gt;I got a free ticket to Test Automation Day in 2018, just after I'd moved to Rotterdam. I was overwhelmed by the confluence of events: &lt;a href="https://twitter.com/techgirl1908"&gt;Angie Jones&lt;/a&gt; keynoting, &lt;a href="https://twitter.com/ard_kramer"&gt;Ard Kramer&lt;/a&gt; running the show, and meeting &lt;a href="https://twitter.com/amyjph"&gt;Amy Phillips&lt;/a&gt; in real life. (Neither of us were sure it was the first time we'd met because we'd been following each other on Twitter for so long!)&lt;/p&gt;
&lt;p&gt;My most shocking note from Angie's keynote is "clicker, no notes," because of course Angie had her talk down pat. In a talk that anticipated the current, urgent conversation in AI and machine learning, Angie recognized that we can't agree on what human ethics should look like. Figure out who you're advocating for, and tie the bugs back to that business value. You're not going to be able to define all the business requirements up front; expect the unexpected.&lt;/p&gt;
&lt;p&gt;Amy Phillips spoke about how tests in a DevOps environemnt allow you to get fast feedback. Like Agile, this style of working is not about minimizing the pain and struggle in developing software, but rather about bringing that pain forward. DevOps allows us to become aware of problems sooner, so we can act on them sooner. Running more tests is not necessarily better. Do not accept flaky tests. Free yourself from an overreliance on end-to-end tests and tests that cover non-critical paths to get your build time down. Rather than running tests on every commit, improve your monitoring. &lt;/p&gt;
&lt;p&gt;I've got some quotes from other talks and the panel that day: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"A tester is someone who believes things can be different." ~ Jerry Weinberg&lt;/li&gt;
&lt;li&gt;"The team was not mature enough to determine priorities."&lt;/li&gt;
&lt;li&gt;"Maintain the relationships you want to build."&lt;/li&gt;
&lt;li&gt;"Are you just doing it because you can?" (regarding UI automation)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I can't tell everybody how welcome and in the right place I felt by being able to jump in this day on short notice. &lt;/p&gt;</description><category>automation</category><category>conference</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2020/2020-07-13_test_automation_day_2018/</guid><pubDate>Sun, 12 Jul 2020 22:00:00 GMT</pubDate></item><item><title>This Too Shall Pass: Disposable Test Automation</title><link>https://elizabethzagroba.com/posts/2019/2019-03-29_this-too-shall-pass-disposable-test-automation/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;p name="00f1" id="00f1" class="graf graf--p graf-after--h3"&gt;A few different times, we wrote some Python code to help us test our products. And then we threw the code out.&lt;/p&gt;
&lt;p name="ad39" id="ad39" class="graf graf--p graf-after--p"&gt;We had the infrastructure in place to add tests to our continuous integration pipeline in Jenkins. It would have been as simple as merging the branch of our code into master. But it had served its purpose already.&lt;/p&gt;
&lt;h5 name="7e5f" id="7e5f" class="graf graf--h4 graf-after--p"&gt;Example 1: web feature integrating with desktop software&lt;/h5&gt;
&lt;p name="1da2" id="1da2" class="graf graf--p graf-after--h4"&gt;Our team owner a web-based product. It had lots of features, but the two we were concerned with for this were: it created an account and a project. These would be used in a desktop product built by different teams at our company. For this story, a flag would be set when you created a project in our product to allow for something new in the desktop software.&lt;/p&gt;
&lt;p name="9663" id="9663" class="graf graf--p graf-after--p"&gt;Our testing stack was built and maintained by our team alone. It was set up to look at the web UI and APIs, but not the desktop software. We had APIs to create projects and change this new project flag. We didn’t have an automated way to see exactly what would happen in the desktop software under these different circumstances.&lt;/p&gt;
&lt;p name="c2c2" id="c2c2" class="graf graf--p graf-after--p"&gt;We wrote tests to query the APIs to see that the settings we set were coming back as expected. Those went into the pipeline. We also wrote some Python code to create projects in each of the five different states. Then, we manually went into the desktop software, used each of the projects we created, and looked at what happened in the desktop software. The information we discovered was enough to determine that the work for our team and the work for the desktop software teams was complete.&lt;/p&gt;
&lt;p name="8f6c" id="8f6c" class="graf graf--p graf-after--p"&gt;We did not add these tests to the pipeline. The branch got removed from the project without getting merged into master once the story was completed.&lt;/p&gt;
&lt;h5 name="5b5e" id="5b5e" class="graf graf--h4 graf-after--p"&gt;Example 2: crude performance test&lt;/h5&gt;
&lt;p name="a60d" id="a60d" class="graf graf--p graf-after--h4"&gt;We wanted to simulate the load placed on our product by a different internal app. Unfortunately the owner of the internal app was unavailable in the short period of time we had to complete this task. To do this, we took existing feature tests we had running on our staging environments, parallelize them, and run them on a clone of our production environment.&lt;/p&gt;
&lt;p name="4cc3" id="4cc3" class="graf graf--p graf-after--p"&gt;Our production clone was available during the few days we were doing this test. It would not be available thereafter, considering the time and money we would have to invest in maintaining it. Our other staging environments had a different enough capacity that running a performance test there would not be meaningful. Our production environment would give us the information we needed once we released this build because the internal app ran there. We maintained a branch for a few days while we were writing and using the performance test, but without an environment to run it on, we threw it out.&lt;/p&gt;
&lt;h5 name="eea5" id="eea5" class="graf graf--h4 graf-after--p"&gt;Example 3: audit trail Excel export&lt;/h5&gt;
&lt;p name="fc7f" id="fc7f" class="graf graf--p graf-after--h4"&gt;We added an audit trail to our profile information for GDPR compliance. Our system could display the information in the UI and export it to Excel. We added tests to our pipeline for the UI bit. The exporting to Excel bit we didn’t. We wrote a test that ended by providing us a username and password. Manually, we’d login, go to the page with the Excel export, and confirm that the data in the file matched the changes the test had made.&lt;/p&gt;
&lt;p name="c098" id="c098" class="graf graf--p graf-after--p"&gt;The Excel exporter wasn’t a piece of code our team maintained. If this test failed, it would have likely been in that functionality, since we also had a UI test for the data integrity. We weren’t changing anything about the Excel export. The audit trail report was an important enough feature that we knew we’d smoke test it manually with every release, so we didn’t add this code to the repository.&lt;/p&gt;

&lt;p&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2019/windows.png"&gt;&lt;/p&gt;
&lt;h5 name="a30f" id="a30f" class="graf graf--h4 graf-after--figure"&gt;What we asked ourselves when throwing out our automation&lt;/h5&gt;
&lt;ul class="postList"&gt;&lt;li name="a1f8" id="a1f8" class="graf graf--li graf-after--h4"&gt;What would we be asserting at the end of the test?&lt;/li&gt;&lt;li name="5de9" id="5de9" class="graf graf--li graf-after--li"&gt;If those asserts succeeded, would they give us false confidence that the feature was covered when we couldn’t account for the consequences?&lt;/li&gt;&lt;li name="f15d" id="f15d" class="graf graf--li graf-after--li"&gt;If these asserts failed, would that give us information about what to fix in our product?&lt;/li&gt;&lt;li name="90cc" id="90cc" class="graf graf--li graf-after--li"&gt;Would checking the code into the automation repository expose sensitive data about production?&lt;/li&gt;&lt;li name="2a56" id="2a56" class="graf graf--li graf-after--li graf--trailing"&gt;Would running these tests against our staging environments give us the information we needed?&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally published on &lt;a href="https://medium.com/@ezagroba/this-too-shall-pass-disposable-test-automation-6d0dadeff53"&gt;Medium&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</description><category>automation</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2019/2019-03-29_this-too-shall-pass-disposable-test-automation/</guid><pubDate>Thu, 28 Mar 2019 23:00:00 GMT</pubDate></item></channel></rss>