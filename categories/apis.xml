<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Elizabeth Zagroba: Software Tester (Posts about apis)</title><link>https://elizabethzagroba.com/</link><description></description><atom:link href="https://elizabethzagroba.com/categories/apis.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>¬© 2020 &lt;a href="mailto:me@elizabethzagroba.com"&gt;Elizabeth Zagroba&lt;/a&gt; Mozilla Public License 2.0</copyright><lastBuildDate>Sat, 30 May 2020 12:14:33 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Trying Out Open API Editors</title><link>https://elizabethzagroba.com/posts/2020/2020-05-30_trying_out_open_api_editors/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;div&gt;&lt;p&gt;I was editing an Open API with multiple layers of inheritance recently. I &lt;a href="https://elizabethzagroba.com/posts/2020/2020-04-27_errors_you_might_encounter_while_editing_an_open_api_specification/"&gt;kept  uncovering errors&lt;/a&gt; long after I created them because of the way they display in &lt;a href="https://editor.swagger.io"&gt;editor.swagger.io&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=s9u3mXQZbXI"&gt;This great talk from Lorna Jane Mitchell about Open APIs&lt;/a&gt; made me realize how many other tools I could use to edit these specs. There's a whole list at &lt;a href="https://openapi.tools/"&gt;openapi.tools&lt;/a&gt;. During my crafting days, I resolved to try some new editors. I decided to see what it was like to edit the existing complicated spec, and write a spec we were missing for a very simple API (two GET calls).&lt;/p&gt;
&lt;h3&gt;TL;DR&lt;/h3&gt;
&lt;p&gt;I'm going to use the &lt;a href="https://marketplace.visualstudio.com/items?itemName=42Crunch.vscode-openapi"&gt;Visual Studio Code Open API plugin&lt;/a&gt; to write and navigate through our specs. We're rendering our specs with editor.swagger.io, so I'm going to keep running it through there to confirm they appear as expected for our stakeholders.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Editors&lt;/h3&gt;
&lt;h4&gt;&lt;a href="https://stoplight.io/studio/"&gt;Spotlight Studio&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Lorna mentioned this one in her talk. It's got a web editor, but I downloaded the Mac client. It's a GUI interface, so rather than writing YAML, it's more like filling out a form. It turns out I would rather write YAML than fill out a form! Good to know.&lt;/p&gt;
&lt;p&gt;The way it organized hierarchy did not suit my mental model for what I was trying to accomplish. I thought about writing a new spec for two GET calls more in a hierarchy (Things both API calls shared. like security &amp;gt; endpoint for the call &amp;gt; parameters). Spotlight Studio grouped adding any new thing into one menu: API, endpoint, parameter, whatever. &lt;/p&gt;
&lt;p&gt;Spotlight Studio has a git integration feature, where you can switch branches within the application. I'd connected it to my remote repo, so it couldn't see the local branch I'd created from my Terminal. When I wanted to save what I had so far (no auto-save??), I found save buried deep inside a menu without a keyboard shortcut to save it. I wasn't interested in changing my workflow to accomodate the tool. &lt;/p&gt;
&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2020/save-are-you-kidding.png" style="display:block; margin-left: auto; margin-right: auto;" title="Cmd + S it's not that hard"&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;Cmd + S it's not that hard&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;In looking at my existing, complicated API with inheritance, I didn't find a way to see everything in the same view. You had to click through to see inherited sections. Viewing descriptions required a mouse hover. &lt;/p&gt;
&lt;p&gt;The final straw for Spotlight Studio was the error panel. Although thoughfully displayed to be informative without alarming, the line numbers didn't reflect where the issue was. &lt;/p&gt;
&lt;p&gt;Overall: The GUI was getting in my way rather than helping me. Pass.&lt;/p&gt;
&lt;h4&gt;&lt;a href="https://senya.io/"&gt;Senya&lt;/a&gt; for IntelliJ and &lt;a href="https://github.com/RepreZen/KaiZen-OpenAPI-Editor"&gt;Kaizen&lt;/a&gt; for Eclipse&lt;/h4&gt;
&lt;p&gt;I couldn't get either of these installed on my Mac! The instructions were essentially "Install from the marketplace, restart the IDE, and it should just work!" My machine enjoys sending me on fruitless adventures in debugging, but I chose to give up on these tools rather than trying to figure it out.&lt;/p&gt;
&lt;h4&gt;&lt;a href="https://swagger.io/tools/swaggerhub/"&gt;Swagger Hub&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;SwaggerHub came recommended by my colleague &lt;a href="https://twitter.com/reinouts"&gt;Reinout&lt;/a&gt;, so I signed up for a free trial to give it a shot. I'm still not completely sure if this is within the security guidelines our company has for creating accounts and sharing data with third parties, so I deleted the data I'd put in at the end of my session.&lt;/p&gt;
&lt;p&gt;It's a lot like &lt;a href="https://editor.swagger.io"&gt;editor.swagger.io&lt;/a&gt;, but with more bells and whistles.  It does have a separate error panel, which seems like it would be what I want for my big complicated API. But when I was writing my new API in it, the error panel would pop open to remind me about missing fields whenever it decided to auto-save. Not cool. &lt;/p&gt;
&lt;p&gt;Two and a half hours after confirming my email address to use the product, an account manager reached out to me to find out if I had time for a quick phone call. No, I did not, I was in the middle of trying to ignore your pop-ups while writing my damn API spec! Their Twitter person didn't understand my complaint about the errors that appeared in the panel. The one I tweeted about was trying to tell me that request parameters get labelled individually with &lt;code&gt;required: true&lt;/code&gt; or &lt;code&gt;required: false&lt;/code&gt;, while you can throw all the required response parameters in a list. &lt;/p&gt;
&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2020/twitter-swagger-hub.png" style="display:block; margin-left: auto; margin-right: auto;" title="Memes will not save you"&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;Memes will not save you&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Overall: If I had a license, I'd use SwaggerHub to look at existing APIs, but not to write new ones. I didn't look into using it to run a mock server, but I bet that'd be useful.&lt;/p&gt;
&lt;h4&gt;&lt;a href="https://github.com/OAIE/oaie-sketch"&gt;OAIE Sketch&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Have you ever used &lt;a href="https://sequencediagram.org/"&gt;sequencediagram.org&lt;/a&gt; to create a UML diagram and thought "What if this looked more 90's?" Well, you're in luck! OAIE Sketch will make you nostalgic for Windows 95. After cloning the github repo and open the .html file locally (whatever works I guess?), you'll see something like this. &lt;/p&gt;
&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2020/isnt-she-lovely.png" style="display:block; margin-left: auto; margin-right: auto;" title="üòçüòçüòç"&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;üòçüòçüòç&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I liked the way it was built for you to either update the YAML or the visualization, then decide when to push changes to the other side. But I couldn't figure out how to paste in a spec I had somewhere else and get the visualization to update. &lt;/p&gt;
&lt;p&gt;Overall: Might be a good way to think about shared outputs if it updated?&lt;/p&gt;
&lt;h4&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=42Crunch.vscode-openapi"&gt;Visual Studio Code Open API plugin&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This put me back where I started: the plugin for Visual Studio Code. It's got syntax highlighting. (It made me realize that my export from SwaggerHub added &lt;code&gt;style&lt;/code&gt; and &lt;code&gt;explode&lt;/code&gt; fields to my request parameters! &lt;a href="https://swagger.io/docs/specification/serialization/"&gt;I guess I'll save figuring out if I should keep those for another day.&lt;/a&gt;) It's got a schema, so I can navigate around the spec based on how the things are connected without having to remember line numbers. It's got error messaging that is clear enough without being invasive: red squigglies appear on affected lines and red trangles appear next to the line number on the left. They're small enough to ignore if you're in the middle of writing, but easy enough to find and notice without going on for too long. I'm sticking with this.&lt;/p&gt;&lt;/div&gt;</description><category>api-specs</category><category>apis</category><category>open-api</category><category>swagger</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2020/2020-05-30_trying_out_open_api_editors/</guid><pubDate>Fri, 29 May 2020 22:00:00 GMT</pubDate></item><item><title>Errors You Might Encounter While Editing an Open API Specification</title><link>https://elizabethzagroba.com/posts/2020/2020-04-27_errors_you_might_encounter_while_editing_an_open_api_specification/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;div&gt;&lt;p&gt;One of the tasks for my team last week was updating an existing GET API call in our specification with some new fields. The &lt;a href="https://swagger.io/specification/"&gt;Open API Specification&lt;/a&gt;, formerly known as Swagger, allows you to provide the details for building in API in a compact, informative way. When you've got the authentication set up correctly, you can use the examples to actually call the API right from the spec!&lt;/p&gt;
&lt;p&gt;My team builds with a framework that has the power to auto-generate API specs in this format. We've chosen to write them ourselves rather than have them auto-generated so we can be more specific in what kinds of errors and error messaging people will encounter for different calls. For example, a 404 Not Found might make sense on a GET call for a specific resource, but not for a search call.&lt;/p&gt;
&lt;p&gt;When you open &lt;a href="http://editor.swagger.io/"&gt;http://editor.swagger.io/&lt;/a&gt;, you should see a two-pane view of the editor on the left and the rendering on the right. If you've opened this URL before, your browser session will remember and display your most recent changes. If it's the first time you've opened it, the example specification of the Swagger Petstore should appear like this:&lt;/p&gt;
&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2020/petstore-example-spec.png" style="display:block; margin-left: auto; margin-right: auto;" title="Petstore example spec"&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;Petstore example spec&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I hope that in describing the errors I encountered, you can keep an eye on them as you're editing rather than having to go back through the specification at the end to figure out what went wrong. &lt;/p&gt;
&lt;h3&gt;Errors I encountered&lt;/h3&gt;
&lt;h4&gt;Red errors in the box at the top and next to line numbers in editor&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2020/swagger-red-error-at-top.png"&gt;&lt;/p&gt;
&lt;p&gt;Indentation errors and using reserved characters (I found square brackets, dashes, colons at least fall into this category) in unexpected ways will likely give you an error in a red box between the navigation and the title of the spec. &lt;/p&gt;
&lt;p&gt;If you're lucky, the error corresponds to the line it mentions, you find a red X on that line, and you'll be able to figure out what went wrong there. &lt;/p&gt;
&lt;p&gt;If you're less lucky, the line mentioned in the red box will refer to the beginning of the next code block that's unparsable because of the syntax error, or the first place where the reserved character you've used incorrectly is actually used correctly. &lt;/p&gt;
&lt;p&gt;The hardest part about these errors is that you may not notice them. If you're scrolled down the page far enough, you won't see the error box or the red X as you're creating the error. &lt;/p&gt;
&lt;h4&gt;Spinning without loading&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2020/swagger-spinner-failed-reference.png"&gt;&lt;/p&gt;
&lt;p&gt;If you're getting a spinner where a part of the specification should be loading, you've got a issue with the reference to a schema. &lt;a href="https://swagger.io/docs/specification/data-models/"&gt;Schemas&lt;/a&gt; allow you to chunk out and reuse part of the spec, with a reference to them in another place. &lt;/p&gt;
&lt;p&gt;I kept getting the spinner when I referred to a schema that didn't exist, either because I'd updated the name (but not the reference to it) or because I'd screwed up whether it was singular or plural. Fixing the error isn't always enough to make this particular error disappear. Reloading the page will make it re-evaluate what you've got. &lt;/p&gt;
&lt;h4&gt;üò± could not render this component, see the console.&lt;/h4&gt;
&lt;p&gt;What a fun and exciting mistake you've made in the specification, to cause this very comforting and reassuring error message. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2020/swagger-scream.png"&gt;&lt;/p&gt;
&lt;p&gt;Like the endless spinning error, this one means something very specific: you've designated something as an array, but you haven't explained what kinds of items appear in the array. &lt;a href="https://swagger.io/docs/specification/data-models/data-types/#array"&gt;Adding a description or reference in the items section&lt;/a&gt; should do the trick. &lt;/p&gt;
&lt;h3&gt;Editing without the Open API editor&lt;/h3&gt;
&lt;p&gt;It's possible the Open API web editor was not the best tool for this job. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2020/swagger-vs-code.png"&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://marketplace.visualstudio.com/items?itemName=42Crunch.vscode-openapi"&gt;Visual Studio Code Open API plugin&lt;/a&gt; did make the red errors obvious enough that you could see them from anywhere in the document. It also gave me the collapsed version of the longer spec in alphabetical order. This allowed me to navigate around without remembering the line numbers of where I dumped the schema separately from the overall spec. Unfortunately the extension didn't catch when I referred to a spec that didn't exist, but I expect seeing the list of schemas on the side would help discover this mistake. The extension also didn't notice if I didn't define the objects in an array.  &lt;/p&gt;
&lt;p&gt;There's also an &lt;a href="https://github.com/swagger-api/swagger-ui"&gt;Open API spec tool for offline use&lt;/a&gt;, but the instructions went beyond the interest I had for this blog post. Try it out yourself, and maybe I will the next time I've got to edit these specs. &lt;/p&gt;&lt;/div&gt;</description><category>api-specs</category><category>apis</category><category>open-api</category><category>swagger</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2020/2020-04-27_errors_you_might_encounter_while_editing_an_open_api_specification/</guid><pubDate>Sun, 26 Apr 2020 22:00:00 GMT</pubDate></item></channel></rss>