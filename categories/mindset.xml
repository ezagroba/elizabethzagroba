<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Elizabeth Zagroba: Software Tester (Posts about mindset)</title><link>https://elizabethzagroba.com/</link><description></description><atom:link href="https://elizabethzagroba.com/categories/mindset.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Â© 2022 &lt;a href="mailto:me@elizabethzagroba.com"&gt;Elizabeth Zagroba&lt;/a&gt; Mozilla Public License 2.0</copyright><lastBuildDate>Sun, 13 Feb 2022 18:49:27 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Not Every Detail Matters</title><link>https://elizabethzagroba.com/posts/2022/02_12_not_every_detail_matters/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;p&gt;I was looking at a user story for one of the teams I support. The story was about improving a very particular page. Our users do see it. But only for 5-10 minutes per week, if they've started their work early. We deploy this product weekly just before working hours. Deploying currently involves taking the whole product down. Customers can sign up for noticifications so they're reminded about this downtime window. &lt;/p&gt;
&lt;p&gt;The story was to improve the look of a page. People might see it and be confused if the stars aligned and:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They started work early.&lt;/li&gt;
&lt;li&gt;They hadn't signed up for the notification.&lt;/li&gt;
&lt;li&gt;They hadn't seen the web app with just a logo on it before.&lt;/li&gt;
&lt;li&gt;They didn't try it again in a few minutes. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So I asked the ticket writer, "This doesn't impact customers much (5-10 minutes per week). Is fixing this worth the effort?"&lt;/p&gt;
&lt;p&gt;They wrote back "I believe in 'Every detail matters.' This particular detail should take very little effort to realize, so my answer on this question is Yes."&lt;/p&gt;
&lt;p&gt;It's possible they're right to pick this ticket up. It was a small enough effort that we might as well do it. If they're wrong, they're the one feeling the pain of explaining the ticket to the team, verifying the fix, deciding what to put in the release notes, etc. It's a safe-to-fail experiment for me as a quality coach. &lt;/p&gt;
&lt;p&gt;But I didn't have the same mindset. I don't believe that we should fix everything we find in our app that violates my expectations. I don't think it's possible to identify one correct set of expectations and priorities that our users will share. I don't think the things that we've already fixed will stay fixed. I don't think it's possible to cover every issue with an automated test. &lt;/p&gt;
&lt;p&gt;I think we need to let go. We need to decide what's important, and focus on that. The details of the downtime page -- the new design, and the time the team spent updating it, and the effort I'd spend having the conversation about it -- none of them mattered too much to me. We need to notice details, and also know when to turn our brains off to being bothered by them. We need to think about the risks of our tests could uncover; our goal isn't 100% test coverage. In short:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Not every detail matters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are limited by our attention, energy, health, meetings on our schedule, time left on this earth. Software is complex enough that it's very unlikely we'll be able to solve every issue we find. The more time we spend solving the unimportant ones, the less time we have left to look for the important ones. Or decide what is important. Or understand our users better to be able to more effectively evaluate the relative importance of such issues. &lt;/p&gt;
&lt;p&gt;Jerry Weinberg cheekily noted the impossibility of this endeavor in his book accurately titled &lt;a href="https://app.thestorygraph.com/books/8ba29269-1843-4ac1-be0c-226752b17937"&gt;&lt;em&gt;Perfect Software and Other Illusions About Testing&lt;/em&gt;&lt;/a&gt;. The Black Box Software Testing Course on Test Design emphasized the need for testers to balance risk vs. coverage. Its focus on &lt;a href="https://www.developsense.com/blog/2010/05/why-we-do-scenario-testing/"&gt;scenario testing&lt;/a&gt; insisted we tie our testing to a user's journey through the software that was:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;coherent&lt;/li&gt;
&lt;li&gt;credible&lt;/li&gt;
&lt;li&gt;motivating&lt;/li&gt;
&lt;li&gt;complex&lt;/li&gt;
&lt;li&gt;easy to evaluate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I know this is the right approach. It will leave time to build new features and learn new skills. It's what will make it possible for us to feel fulfilled and motivated in our work. &lt;/p&gt;
&lt;p&gt;Now I just need to figure out how to scale this mindset. &lt;/p&gt;</description><category>coaching</category><category>mindset</category><category>risk-based-testing</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2022/02_12_not_every_detail_matters/</guid><pubDate>Fri, 11 Feb 2022 23:00:00 GMT</pubDate></item><item><title>Try Asking Different Questions</title><link>https://elizabethzagroba.com/posts/2021/try_asking_different_questions/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;figure&gt;&lt;img src="https://elizabethzagroba.com/images/posts/2021/paths.jpeg"&gt;&lt;/figure&gt; &lt;p&gt;I'll never know everything, but I love asking questions to get to know more. Obviously, the same question applied in different contexts will yield different results. A couple questions that worked exactly as I'd wanted with engineering teams really fell flat with UX and product. And a couple &lt;a href="https://elizabethzagroba.com/posts/2021/delivering_information_vs_delivering_meta_information/"&gt;meta-level&lt;/a&gt; questions allowed openings I wouldn't have imagined. &lt;/p&gt;
&lt;h3&gt;When I asked the wrong question&lt;/h3&gt;
&lt;h4&gt;Joining standups&lt;/h4&gt;
&lt;p&gt;Part of the charter for my role is to help improve processes and communication around the department. I'd attended each of the engineering team daily standup meetings, and I wanted to do the same for our designers. My intention was something everyone would agree to, but how I asked made it difficult for the designer to see that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"Do designers all meet once a day? I've joined all the other standups; may I join yours?""&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This might have given an impression that I was trying to inflict help or take over, rather than listen and see if my expertise was needed. Even following up with more details about wanting not to duplicate their work didn't seem to clarify my intention. &lt;/p&gt;
&lt;p&gt;Ultimately, speaking to another colleague and starting with my intention helped me understand what space I could be included in. There was a weekly meeting the engineering and product managers attended, where deeper design sessions were planned for that week. I would have never known to ask:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"Can I attend your weekly meeting with the managers?" &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;because I didn't know there was a weekly meeting. Sharing my intention might have gotten me there sooner.&lt;/p&gt;
&lt;h4&gt;End-to-end flow&lt;/h4&gt;
&lt;p&gt;I'd made a big, complicated diagram of how our users moved through our connected products. I'd imagined it could trigger discussions about all sorts of things, but the two things I wanted it to give the most perspective on were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"Are we testing the end-to-end flow?"&lt;/li&gt;
&lt;li&gt;"Are we capturing metrics on the end-to-end flow?"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Describing the specific actions a user could take and how the products were interconnected showed that, for the development teams, it was hard to know what the ends were. I showed the diagram to most of the development teams and asked the question:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"What could users do that I haven't captured?"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;They each thought of things inside the little bubble of their work. But asking the same question to a product owner yielded completely different results: more questions, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"Who are our users? Where do I see them here?"&lt;/li&gt;
&lt;li&gt;"Can we separate out one flow for one use case for one user?"&lt;/li&gt;
&lt;li&gt;"How are people onboarded? Where do our users start?"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Those last two were completely left of my diagram, since they were outside the scope of what our development teams would build or test for a particular user story. But indeed, the product owners were right that onboarding was part of the end-to-end flow, and thus should be included in how we're looking at the user's journey. &lt;/p&gt;
&lt;p&gt;After a few more discussions, I identified an even better question for the product owners: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"How are you thinking about the whole journey a user takes?" &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;When I asked the right question&lt;/h3&gt;
&lt;h4&gt;Is this the right agenda?&lt;/h4&gt;
&lt;p&gt;I started a meeting with a group of about 12 people with the question:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"Is this the right agenda?" &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I wanted to make sure the needs that I could see from my position matched what was most important to them. There were five items on the agenda. When we got to the third one, someone determined that there was another way we could approach it, and we changed the agenda right there. Offering the opportunity at the beginning allowed for the team members to take ownership of their time. &lt;/p&gt;
&lt;h4&gt;What fell through the cracks?&lt;/h4&gt;
&lt;p&gt;Retrospectives I've attended and facilitated have often had a "What went wrong?" kind of section. I asked a different question in a session about test strategy, hoping to uncover something slightly different: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"What fell through the cracks?" &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Leaving enough silence let people ponder their work in the recent weeks. People named a few product bugs logged to start. After even more silence, some process bugs came to light as well. It was interesting to see how a slight change in the phrasing of the question uncovered things the retrospectives hadn't. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;What questions do you tend to ask to the same people in the same way? What might you discover if you change the way you're asking the question? Can you leave more room for thought and contemplation in your conversations?&lt;/p&gt;</description><category>coaching</category><category>communication</category><category>leadership</category><category>mindset</category><guid>https://elizabethzagroba.com/posts/2021/try_asking_different_questions/</guid><pubDate>Thu, 30 Dec 2021 23:00:00 GMT</pubDate></item><item><title>That "I Did It!" Feeling</title><link>https://elizabethzagroba.com/posts/2021/that_i_did_it_feeling/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;p&gt;I moved into a different role at work this week. I handed off my former team to the new team lead with a final 1-on-1 (and coincidentally performance review) for each team member. Each of them has a different variety of skills, motivators driving them, and awareness of either. This blog post focuses on just one team member. &lt;/p&gt;
&lt;h3&gt;"I did it!"&lt;/h3&gt;
&lt;p&gt;One team member is really driven by that "I did it!" feeling. They're early in their career. Both the product and the company are new to them. They spend a lot of their time pairing, asking for help, or floudering while wondering if they should be pairing or asking for help. Every 1-on-1, they'd report feeling that they hadn't learned or accomplished anything. They weren't getting that "I did it!" feeling.&lt;/p&gt;
&lt;p&gt;But they were doing a great job. They were making progress in all the different technologies our team uses (Mendix, Docker, OpenAPI, pytest, gitlab pipelines, etc.), learning as they went. They were able to accept feedback to course-correct when necessary. They knew they were learning a lot, but this alone wasn't motivating enough for them.&lt;/p&gt;
&lt;h3&gt;Forces within our control&lt;/h3&gt;
&lt;p&gt;As a team lead, part of my job was to create focus for my team. There was a cloud of possibilities and priorities the people around and above us struggled to make clear. I wanted to create an environment where my team members could still get that "I did it!" feeling anyway. This Liz and Mollie comic captures it nicely. &lt;/p&gt;
&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="A great manager holds umbrella to protect team from ridiculous requests, unclear priorities, massive uncertainty, unneccessary meetings, last-minute chaos; and foster clear expectations, defined roles, work-life balance, stable achieveable goals" src="https://elizabethzagroba.com/images/posts/2021/liz-and-mollie-umbrella.jpg" style="display:block; margin-left: auto; margin-right: auto;" title="@lizandmollie"&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;@lizandmollie&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Amid this uncertainty, my team member requested  clear steps for what they should be doing next and how to get promoted. I started by sending them the job description they hadn't seen for his own job. This helped set clear expectations and define their role. I spent time in our 1-on-1's finding out more about what was on their mind or dragging their attention away from work. &lt;/p&gt;
&lt;p&gt;I took the time to reinforce the importance of a work-life balance. We started every refinement meeting with a review of upcoming time off, complete with peer pressure from me to take more of it. This allowed us to only refine the amount of work we could accomplish in the upcoming period, and set expectations for what wouldn't be done. This helped scope and clarify each team member's job. &lt;/p&gt;
&lt;p&gt;I tried to give all my team members the "I did it!" feeling by talking about what we accomplished at the smallest scale in standup, a slightly larger scale in retro, and on the largest scale in the meeting with the whole unit. But that wasn't helping this particular team member. &lt;/p&gt;
&lt;p&gt;The thing that finally gave them that "I did it!" feeling was: a Trello board for their own personal career development, with To Do, Doing, and Done columns. &lt;/p&gt;
&lt;h4&gt;To Do&lt;/h4&gt;
&lt;p&gt;We identified a clear, actionable step to take for a few technologies, job description bullet points, and conversations we'd already been having in our 1-on-1's. Some items would be accomplished during the course of our regular work on user stories. I set a clear expectation about the other items: they were for work time - downtime while waiting for a response, crafting days, etc. They were not for personal time.&lt;/p&gt;
&lt;h4&gt;Doing&lt;/h4&gt;
&lt;p&gt;I explained that it's better to limit the number of items in this column at a time. Deciding what to leave aside allows you to focus on what's in front of you. My team member want to be an expert in all our of different technologies at once. I reset this expectation: get a little better, one at a time.&lt;/p&gt;
&lt;h3&gt;Done&lt;/h3&gt;
&lt;p&gt;I gave them homework to fill in the Done column. They took time to list things they had learned and accomplished in the previous months. Scrolling through the Done list got them pretty close to that "I did it!" feeling. Taking a moment to reflect during our 1-on-1's helped give them that feeling. But they weren't getting that feeling right away. They needed to celebrate their accomplishments as they were happening, to keep up the motivation and momentum. &lt;/p&gt;
&lt;p&gt;I did what was possibly my best management move for this person: I threw confetti.&lt;/p&gt;
&lt;p&gt;Trello has a feature where if you add the confetti ball emoji to the title of a column, moving an item to that column throws a little confetti around the item. It's very cute, and it finally gave my team member that "I did it!" feeling. &lt;/p&gt;
&lt;h3&gt;Setting expectations around the feeling&lt;/h3&gt;
&lt;p&gt;In the handoff to the new team lead, I explained this need my team member had, the ways I'd tried to meet it, and the confetti ball that finally worked. I pointed out that the need for the "I did it!" feeling can be found in other ways. The important thing for the team lead is not a particular action, but checking in with the team member about the feeling. I wanted to leave them space to take a different approach, so I used the "Mary had a little lamb" heuristic to explain what a different approach should include. &lt;/p&gt;
&lt;h4&gt;&lt;em&gt;I&lt;/em&gt; did it!&lt;/h4&gt;
&lt;p&gt;The team member wanted to point to something they did. Without pairing, without asking a bunch of questions, they wanted to point to something and know that they were able to accomplish it themselves. &lt;/p&gt;
&lt;h4&gt;I &lt;em&gt;did&lt;/em&gt; it!&lt;/h4&gt;
&lt;p&gt;The thing had to be done. While some skills and knowledge transfer could be months or years in the making, they needed something to come to a close. &lt;/p&gt;
&lt;h4&gt;I did &lt;em&gt;it&lt;/em&gt;!&lt;/h4&gt;
&lt;p&gt;The new team lead and the team member get to decide together what's on the list, what it is. Growth and comfort in skills may not be immediately visible to the invidual in the day-to-day grind. Setting aside time for individual reflection or recognition at the 1-on-1 would help. &lt;/p&gt;
&lt;h4&gt;I did it &lt;em&gt;!&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;This is the confetti ball piece of the puzzle. The celebration. It may feel silly, or gimicky, but it finally got this person that satisfaction they were looking for out of their job. &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Reflection&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;When managing, do you dig into what a person needs to have clear expectations, defined roles, work-life balance, and stable achieveable goals?&lt;/li&gt;
&lt;li&gt;When a team member asks you for an outcome, do you think about why they're asking you for that? &lt;/li&gt;
&lt;li&gt;When you do handoffs, do you describe the actions you took or the needs they were serving? &lt;/li&gt;
&lt;/ul&gt;</description><category>handoff</category><category>leadership</category><category>mindset</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2021/that_i_did_it_feeling/</guid><pubDate>Fri, 08 Oct 2021 22:00:00 GMT</pubDate></item><item><title>Give Them the Fish, Then Teach Them to Fish</title><link>https://elizabethzagroba.com/posts/2021/give_them_the_fish_then_teach_them_to_fish/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;p&gt;A colleague came to me with a request the other day. I didn't handle it quite how I wanted to. The request went something like this:&lt;/p&gt;
&lt;p&gt;"I remember you were on the team for Big Scary product a couple years ago. Do you know if I can delete this List of Stuff from Big Scary product, and if I can automate that?"&lt;/p&gt;
&lt;p&gt;I did not know. It was two years ago. Big Scary product had gotten Bigger and Scarier in the meantime. &lt;/p&gt;
&lt;p&gt;But I knew where my team linked to our API specs from our customer-facing documentation. I applied the same principle to discover where Big Scary product API specs were. I looked at those specs and found the List of Stuff in a response body for an API call, but noticed that my colleague wouldn't have the ID the request required. So I looked at the API specs from a Bigger Scarier product. Combining a call from there would get the ID Big Scary product needed.&lt;/p&gt;
&lt;p&gt;I was short on time, so I answered the question directly. I said it was possible, and possible to automate, and provided the links to the specs for both products. My colleague thanked me, and left the conversation able to solve their problem quickly. &lt;/p&gt;
&lt;p&gt;I gave them the fish. What they learned from that interaction was: Elizabeth knows where to find stuff. I can come to her when I don't know how to find stuff and she will find it for me. That was the wrong lesson. &lt;/p&gt;
&lt;h3&gt;Give Them the Fish, Then Teach Them to Fish&lt;/h3&gt;
&lt;p&gt;A better lesson would have been: I know where to look for things. Elizabeth will give me the tools to know where to look, and empower me to do so. Now that I've got the access and seen it done once before, I can take a few more steps before I reach out Elizabeth the next time.&lt;/p&gt;
&lt;p&gt;Here's what I could have done to get to get this colleague there:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Explain where all the API specs live: I could have explained my thought process for finding the API specs, showed how I navigate using the headers and &lt;code&gt;Ctrl + F&lt;/code&gt; on the page, and compare the requests and responses to what's needed.&lt;/li&gt;
&lt;li&gt;Update them about who's on the team for Big Scary product now: I could have listed a few team members names who I knew were working on Big Scary product, or pointed my colleague to the Slack channel for the whole team.&lt;/li&gt;
&lt;li&gt;Introduce colleague to a member of the team for Big Scary product: Since this colleague was a tester, I could have started a direct message with them and the tester on the team for Big Scary product, copying the question from the DM I first received. &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;What If I Only Teach Them to Fish?&lt;/h3&gt;
&lt;p&gt;What would have happened if I'd skipped what I'd done, and withheld the links to the API specs? &lt;/p&gt;
&lt;p&gt;I wouldn't have been able to guarantee that my colleague was in the learning zone. From what I knew about their situation, they were accumulating a lot of data that they wanted to delete. I didn't know what other pressures were coming from the team, but the need to automate it suggested it was a bigger problem than just a few extra entries in a database. &lt;/p&gt;
&lt;p&gt;Giving my colleague the fish, and &lt;em&gt;then&lt;/em&gt; teaching them to fish, relieves any of that pressure to deliver, and helps open them up to learning and growing. &lt;/p&gt;
&lt;h3&gt;Tell Them What You're Doing&lt;/h3&gt;
&lt;p&gt;Some colleagues are distracted, or dense, or not able to take away &lt;a href="https://elizabethzagroba.com/posts/2021/delivering_information_vs_delivering_meta_information/"&gt;meta-information&lt;/a&gt; from a conversation along with the information. They may stop listening after they have the answer. &lt;/p&gt;
&lt;p&gt;Combat this by sharing your motives. Remind them that you too are busy. Explain that your goal is to empower them. Encourage them to reach out to the team working on Big Scary product, so that those team members can also get good at knowing where to look and answering colleagues' questions. Tell them you're happy to help them again, but you'll expect more details of what they tried first. Then hold them to that. &lt;/p&gt;
&lt;p&gt;The best lesson is: I want to take a few more steps next time I have a problem, because I know I can, and Elizabeth expects more from me. &lt;/p&gt;</description><category>critical-thinking</category><category>leadership</category><category>mindset</category><category>teaching</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2021/give_them_the_fish_then_teach_them_to_fish/</guid><pubDate>Sat, 07 Aug 2021 22:00:00 GMT</pubDate></item><item><title>Complete the Main Quest First</title><link>https://elizabethzagroba.com/posts/2021/complete_the_main_quest_first/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;p&gt;Recently, I made an outline for a tester (who was still onboarding) for what kinds of things to test on a new API endpoint we added. They explored, wrote a bunch of automated tests to capture their work, and came back with a list of interesting and good catches in the error responses. My first question in our debrief was: did you try a successful response? They hadn't. I sent them back to tackle that too. &lt;/p&gt;
&lt;p&gt;Because a successful response is the first thing our product owner is going to ask about. That's what we'd want to show off at the review meeting internally to demonstrate the new API endpoint. That's the first the customer is going to try. They're going to copy the request from our OpenAPI specification, paste it in Postman (or the tool of their choice, but our customers so far have been using Postman), and see if their credentials will get them the response that matches the specification. These stakeholders share a common concern, and that's the risk we should be migitating with testing. First. &lt;/p&gt;
&lt;h3&gt;Complete the main quest first.&lt;/h3&gt;
&lt;p&gt;Complete the main quest first. Come back to the side quests. &lt;/p&gt;
&lt;p&gt;A customer had asked for this API endpoint to be added. If we'd tested the happy path first, we would have had the option of releasing the API for the customer to use. The risk of discovering a successful request wouldn't yield a successful response was relatively low in this case, since our developers tend to try one happy path themselves.&lt;/p&gt;
&lt;p&gt;But what if the main quest had required a lot of setup, explanations to build knowledge and context for the onboarding tester, or yielded an issue? I'd done a risk-based analysis of what all to complete as part of our definition of done for this story. But I hadn't shared my approach to completing the main quest first, so the tester did what testers do, and went on a hunt to find weird stuff. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2021/iceland.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Note down and follow-up on werid stuff; do not get distracted by it&lt;/h3&gt;
&lt;p&gt;Software will break in all sorts of ways. The more time and curiosity you have to dig into it, the more you'll discover. But are those the most important things? &lt;/p&gt;
&lt;p&gt;In this API, the tester discovered that if you paste 10,000 characters into a field that's meant for a UUID, you get a 400 response. But did they try a regular old UUID first? What if they get a 400 response no matter what they put in that field, because the field name in the specification doesn't match what's in the code? Is trying 10,000 characters the first and biggest risk they have to face when presenting this API to a customer?&lt;/p&gt;
&lt;p&gt;I'm not saying don't try 10,000 characters. &lt;a href="https://twitter.com/ezagroba/status/1234822805709053953"&gt;I love that shit&lt;/a&gt;. But decide if it's a risk you care about first. &lt;a href="https://elizabethzagroba.com/posts/2020/2020-05-24_if_a_test_falls_in_a_forest/"&gt;If you don't care about the outcome, don't test it&lt;/a&gt;. Don't make busy-work for yourself just to fill the time. &lt;/p&gt;
&lt;h3&gt;Make side quests a concious choice&lt;/h3&gt;
&lt;p&gt;Before you start throwing 10,000 characters at your API, talk to your team. Your developer can probably tell you if they never built something to deal with that situation. Your product owner can tell you they'd rather have it to the customer sooner. Your data analyst can tell you if there's already longer stuff than that in the database, or if you should be trying Japanese instead. &lt;/p&gt;
&lt;p&gt;Make side quests a deliberate choice. Share them to increase their value or figure out who on the team is best-suited to execute them. &lt;/p&gt;
&lt;h3&gt;Recognize when the quest is a journey, not a destination&lt;/h3&gt;
&lt;p&gt;Throwing 10,000 characters at an API may be a way to start a discussion about the speed at which responses are returned. It might be a way of showing &lt;a href="http://coffeeipsum.com/"&gt;your favorite random text generator&lt;/a&gt; to your fellow tester. It might be an exercise at an ensemble testing session, where everyone can practice pausing before executing an idea to describe the expected behavior first. &lt;/p&gt;
&lt;p&gt;Quests can be valuable in ways that are not directly related to the finishing the quest. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: I got asked recently if I use the word charter much with non-testers. I don't. Try reading this again but replacing every mention of "quest" with "charter".&lt;/em&gt;&lt;/p&gt;</description><category>charters</category><category>critical-thinking</category><category>exploratory-testing</category><category>mindset</category><category>reporting</category><category>risk-based-testing</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2021/complete_the_main_quest_first/</guid><pubDate>Sat, 03 Jul 2021 22:00:00 GMT</pubDate></item><item><title>Praise the Messenger</title><link>https://elizabethzagroba.com/posts/2021/praise_the_messenger/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;p&gt;I hear no a lot. No, that's not in scope for this story. No, it's not worth fixing that now. No, that's not risky enough for you to spend time testing. Hearing no on a good day sparks my creativity and pushes me into more valuable directions. On a bad day, it makes me wonder why I should keep going. &lt;/p&gt;
&lt;p&gt;Saying no in a good way takes practice. I've honed this skill with wisdom from some of the best. Elisabeth Hendrickson tweeted &lt;a href="https://twitter.com/testobsessed/status/1361844997276930049"&gt;a list of some of the different ways she has of saying no&lt;/a&gt;. It reminded me that the &lt;a href="https://twitter.com/ezagroba/status/1376971216653856770"&gt;sassy replies&lt;/a&gt; I send to recruiters and speaking engagements in which I have no interest or connection. If you're looking for a style that builds bridges rather than burns them down, I'd recommend Elisabeth's Hendrickson's examples, not mine. &lt;/p&gt;
&lt;p&gt;At Let's Test in Sweden in 2016, Fiona Charles gave a workshop on Learning to Say No. We practiced different ways to say no, complete with supporting arguments and steadfast determination tailored to the real-life situations participants brought to the workshop. (In a demonstration of having embraced the message of the workshop, we disbanded halfway through the allotted time. I spent the rest of the afternoon on a memorable bike ride along the Swedish coast.) The strongest revelation from the group was: we have more power than we think we do. There may be consequences to saying no, refusing a particular task, or turning down an opportunity, but it's often within our power to do so. Saying no effectively makes room you to decide how to spend your time.&lt;/p&gt;
&lt;p&gt;At Agile Testing Days in 2018, Liz Keogh gave a keynote on &lt;a href="https://www.youtube.com/watch?v=KvKFlMfEqxM"&gt;how to tell people they failed (and make them feel great)&lt;/a&gt; that culminated in a surprising conclusion: don't. Don't tell people they failed. Use positive reinforcement to encourage the behaviors you want to see, and the others will fall away. &lt;/p&gt;
&lt;p&gt;We had a tester leave the company recently. They'd set goals with their manager that directly opposed the test strategy I helped them shape. Bugs they reported were shot down, postponed until future stories, or grouped together as issues to be fixed eventually someday. They were facing a lot of "no," and as far as I could see from a different team, not a lot of yes. How long would you last in this situation?&lt;/p&gt;
&lt;p&gt;I also have a tester reporting to me at the moment. They've been catching tricky things, find bugs, and preventing problems. I want them to keep doing what they're doing. I get that a developer's first reaction when they hear about a bug might not be "Oh wow, thank you so much for this pile of questions and work!" I have to give them that positive reinforcement so they keep reporting and digging into issues, so I call it out in their 1-on-1. They thank me, and says it keeps them going. &lt;/p&gt;
&lt;p&gt;Don't shoot the messenger. Praise the messenger. &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Tired: Don't shoot the messenger.&lt;br&gt;&lt;br&gt;Wired: Encourage and support the messenger, so they are motivated to keep bringing you messages.&lt;/p&gt;â Elizabeth Zagroba (@ezagroba) &lt;a href="https://twitter.com/ezagroba/status/1403356865694683137?ref_src=twsrc%5Etfw"&gt;June 11, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;Who are you saying no to frequently? Is your no driving them away, or encouraging them? Do you need to say no? &lt;/p&gt;
&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2021/sign.jpg" style="display:block; margin-left: auto; margin-right: auto;" title="If you were waiting for a sign - this is it."&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;If you were waiting for a sign - this is it.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;</description><category>coaching</category><category>communication</category><category>leadership</category><category>mindset</category><category>reporting</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2021/praise_the_messenger/</guid><pubDate>Sat, 26 Jun 2021 22:00:00 GMT</pubDate></item><item><title>Delivering Information vs. Delivering Meta-Information</title><link>https://elizabethzagroba.com/posts/2021/delivering_information_vs_delivering_meta_information/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;figure&gt;&lt;img src="https://elizabethzagroba.com/images/posts/2021/victor-garcia-unsplash.jpeg"&gt;&lt;/figure&gt; &lt;p&gt;One of the first testing skills I built was &lt;a href="https://elizabethzagroba.com/posts/2014/2014-02-24_writing-clear-and-effective-bug-reports/"&gt;bug reporting&lt;/a&gt;. I practiced narrowing down the steps to reproduce. I told my developers what was happening now and what should happen instead. I learned to include where the issue was occurring, so my developers would stop closing my bugs with the &lt;code&gt;Works for me&lt;/code&gt; resolution in Trac. &lt;/p&gt;
&lt;p&gt;In 2013, &lt;a href="https://twitter.com/PaulHolland_TWN"&gt;Paul Holland&lt;/a&gt; taught me to tell the story of my testing. That is, meta-information about my testing. Sure, I still reported the outcomes: these things didn't work, these things did. But I also reported:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;how I tested the product&lt;/li&gt;
&lt;li&gt;how good that testing was&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;How long did it take me to test? What was difficult about my testing, made it difficult to get started, or slowed it down? What wasn't I able to test? The reason we tell those stories is to help uncover product risks, process risks, and get help from those around us to solve the issues. &lt;/p&gt;
&lt;p&gt;This is meta-information about my testing. It's what I'm seeing as I'm doing it, one level removed from the actual testing itself. (Look up &lt;code&gt;testopies&lt;/code&gt; [testing + autopsy] for more on gathering meta-level information about your testing.) &lt;/p&gt;
&lt;p&gt;Building the skills around meta-information are important for doing any job well. These skills include:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;identifying when you're communicating at the information level, or the meta-level&lt;/li&gt;
&lt;li&gt;switching between and keep track of whether you're communicating at the information level or meta-level&lt;/li&gt;
&lt;li&gt;naming the different levels, and bringing the people you're communicating with on this level-switching journey&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These recent examples stick in my mind.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Addresing the question vs. addressing the miscommunication&lt;/h4&gt;
&lt;p&gt;I was interviewing a candidate for a Software Development Manager position. For about a half hour, every question proceeded more or less like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I'd ask a question.&lt;/li&gt;
&lt;li&gt;The candidate would speak for a minute or a few, without answering the question.&lt;/li&gt;
&lt;li&gt;I'd rephrase the question, be more specific, or add more details to help the candidate understand the question&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://elizabethzagroba.com/posts/2021/delivering_information_vs_delivering_meta_information/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;The candidate would speak again, again not answering the question.&lt;/li&gt;
&lt;li&gt;I'd try once or twice more, before moving on to the next question. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I realized early on that this was happening. I consider it an essential skill to be able to answer a question directly, or identify when you're having trouble doing that, as a Software Development Manager. I decided I'd reject the candidate, but realized I'd still have to get through the rest of this hour with them.&lt;/p&gt;
&lt;p&gt;My colleague, my co-interviewer, took a different approach. He called out the miscommication problem to the candidate! He said "Elizabeth is asking you questions, and you're not answering them. Did you notice that? Why is that?" It was direct in a way that made me uncomfortable, and that I would have trouble doing with someone I just met. But he moved the conversation to where it needed to be: the meta-level. The candidate struggled to answer this question as well.&lt;/p&gt;
&lt;p&gt;I jumped in to ease the awkwardness. I offered up my theory: the candidate's responses weren't answers, they were the candidate agreeing with the premise of the question. My colleague completely agreed, thanked me for contribution, but politely redirected the burden of this problem onto the candidate. The candidate continued to struggle without acknowledging the issue or the awkwardness for the rest of the interview. It was a clear decision for both me and my colleague: we would not be hiring this person.&lt;/p&gt;
&lt;h4&gt;Difficulty scheduling a meeting vs. telling them that&lt;/h4&gt;
&lt;p&gt;I was asking for more details on the planning of a project in standup. My developer described how hard it was to find time with a particular developer on another team. They said the project was going to take weeks to scope instead of the days they thought it could take, if only they could find time with this person. The project seemed important, already had a deadline (or really, sadline&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="https://elizabethzagroba.com/posts/2021/delivering_information_vs_delivering_meta_information/#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;), and waiting until the next free spot on this person's calendar wasn't working. &lt;/p&gt;
&lt;p&gt;I asked my developer "Have you given his this feedback directly?" I suspected that only the information had been communicated: the following meeting would have to wait a week. My hunch was correct. I suggested my developer try giving this person the meta-information: about how hard they were to schedule, how this was cutting into the time we had to work on the project once it was scoped, and how that threatened the deadline. Imagine how differently this person could react and rearrange what they were doing, or share their relative priorities so we could adjust our expectations, when given this meta-information. This was last week, so I don't know yet how this story ends!&lt;/p&gt;
&lt;h4&gt;Adding testing details to the story vs. why I'm asking for them&lt;/h4&gt;
&lt;p&gt;There was a user story about being able to send metrics from our application to another application. I was picking up the testing on the story. My developer said they'd confirmed in the other application that our metrics were sent. They'd only sent a success, so I was planning on using the same setup as they did to look in the other application, but see what a failure looked like instead. &lt;/p&gt;
&lt;p&gt;But that's not what I told my developer. What I said to them was: "Add enough details to the ticket so I can test it." It turned out, we had different ideas about what &lt;code&gt;enough&lt;/code&gt; meant. First they added a URL. I followed the URL and it went to a blank page with a header. I said the same thing again, "Add enough details to the ticket so I can test it." They wrote down the first button they had to click on. I asked a third time. They added one more detail, which still didn't tell me enough. But I got tired of asking. I tried all the options in the application, Googled to figure out what SQL query I needed, executed it, triggered a variety of different failures, and confirmed that they were received. &lt;/p&gt;
&lt;p&gt;Later, I explained to my developer the difference between my expectations and what they wrote. They explained how their expectations were also violated: they had to reach out to the team from the other product, figure out what to do, poke around in the product, and that the details they left me were all they received to be able to eventually figure it out. To them, just the URL going to a blank screen was &lt;code&gt;enough&lt;/code&gt;&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="https://elizabethzagroba.com/posts/2021/delivering_information_vs_delivering_meta_information/#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt;. &lt;/p&gt;
&lt;p&gt;I realized then that I had left out a crucial piece of meta-information: the reason I was asking for the details. I wanted to skip that poking around time. I had ten other tasks this day, and expected this to only take 20 minutes instead of the few hours it ended up taking. I was hoping to benefit from the poking around work my developer had already done. I was expecting a lot of context, and my developer was expecting to only need to share a little bit of context.&lt;/p&gt;
&lt;p&gt;Once I shared this with them, they understood where the gap was between my expectations and theirs. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The suggestion about scheduling difficulties, that was an easy conversation to have. The other two were quite difficult for me. They took patient, active listening. I had to keep asking myself if I'd been clear enough with my expectations. They definitely made me sweat. &lt;/p&gt;
&lt;p&gt;Moving between information communication and meta-level communication is a skill. It takes time, failure, reflection, and practice to do it. Doing it well is a leadership skill. &lt;a href="https://app.thestorygraph.com/books/b15fe452-5b8e-49f5-9e0b-90da490b944c"&gt;&lt;em&gt;Crucial Conversations&lt;/em&gt;&lt;/a&gt; helped me identify when it's worth working on the relationship with a person and investing in these conversations. You don't have to be managing people (as I am currently) to be building or using this skill. &lt;/p&gt;
&lt;p&gt;What meta-level conversations are you avoiding? Are there people where you find you're only able to communicate on an information level? Have you tried communicating with them on a meta-level? What would happen if you told them that's what you were trying?&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;In high-context cultures like the United States and the Netherlands, the deliverer assumes the burden of the miscommunication, not the receiver. There's more about this in &lt;a href="https://app.thestorygraph.com/books/f0d396c1-fcd9-4beb-9538-4d11e04e3e1c"&gt;&lt;em&gt;The Culture Map&lt;/em&gt;&lt;/a&gt;.Â &lt;a class="footnote-backref" href="https://elizabethzagroba.com/posts/2021/delivering_information_vs_delivering_meta_information/#fnref:1" title="Jump back to footnote 1 in the text"&gt;â©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;A deadline is when somebody dies. Most things we call deadlines at work are just sadlines, in that people are alive but just sad when they're missed. Read more about it in &lt;a href="https://lizkeogh.com/2017/08/31/reflecting-reality/"&gt;Liz Keogh's blog post&lt;/a&gt;.Â &lt;a class="footnote-backref" href="https://elizabethzagroba.com/posts/2021/delivering_information_vs_delivering_meta_information/#fnref:2" title="Jump back to footnote 2 in the text"&gt;â©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;My colleague is coming from a low-context culture. I'm coming from a high-context culture. You can read more examples of this in &lt;a href="https://app.thestorygraph.com/books/f0d396c1-fcd9-4beb-9538-4d11e04e3e1c"&gt;&lt;em&gt;The Culture Map&lt;/em&gt;&lt;/a&gt;, but it's the kind of non-fiction book that could have been a blog post, so just read the rest of this blog post instead?Â &lt;a class="footnote-backref" href="https://elizabethzagroba.com/posts/2021/delivering_information_vs_delivering_meta_information/#fnref:3" title="Jump back to footnote 3 in the text"&gt;â©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description><category>communication</category><category>leadership</category><category>mindset</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2021/delivering_information_vs_delivering_meta_information/</guid><pubDate>Sat, 19 Jun 2021 22:00:00 GMT</pubDate></item><item><title>The Mental Load of One Meeting</title><link>https://elizabethzagroba.com/posts/2021/the_mental_load_of_one_meeting/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;figure&gt;&lt;img src="https://elizabethzagroba.com/images/posts/2021/outlook-calendar-week.png"&gt;&lt;/figure&gt; &lt;p&gt;I facilitated a meeting today. It was scheduled for 45 minutes on my agenda, for me and some other tech and team leads in my unit. We covered what we needed to move forward planning an epic with a set of relatively straightforward stories, both in execution and work distribution among the teams. &lt;/p&gt;
&lt;p&gt;For some of the people attending today, they showed up without preparing, and didn't remember what the topic was. I filled them in. Because this is what the meeting preparation looked like from my side: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I was in a planning meeting two weeks ago with a variety of people from the unit. I picked up the implication that that follow-up (combination solo thinking/document review followed by meeting) was needed soon with a few tech and team leads. I checked the out of office schedule (that I created and keep updated as people mention when they'll be out) and noticed that two weeks was an achievable time span for "soon". I mentioned this while we were still in that planning meeting. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Within the next 48 hours, two people from the planning meeting asked when I'd scheduled the follow-up. I explained that I was giving the other leads a chance to schedule it first.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When I scheduled the follow-up, I made the title of the Outlook invitation "review the comments you've already added to the document" so the purpose and expectations were both clear and impossible to miss. I added the document to review to the body of the invitation. I let the two inquiring minds know that this occurred. I found a couple of 45-minute blocks when all four people present at the planning meeting, plus the one person that had been forgotten, were available simultaneously. I chose the one on Tuesday, giving the person who was out for a week Monday to catch up.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I added a Slackbot reminder for Monday afternoon for the person who's out the previous week. They're on my team and typically have trouble saying no when someone tries to pull their focus. &lt;a href="https://elizabethzagroba.com/posts/2021/the_long_haul/"&gt;We've found that Slackbots help&lt;/a&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The meeting time arrives. The Slackbot reminder person and I have reviewed the document. The others haven't. I check in and ask whether we should hold this meeting after they're available to do so. Silence. I move on, facilitating the discussion, taking notes, and keeping us on track.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;I am not the only person capable of scheduling a meeting. I am not the person best equipped to review this document. It is not my responsibility to come up with systems for my peers to remember to do their work. I can let this fail, just not follow-up, and I do with smaller, safer-to-fail experiments. But it doesn't solve the problem. &lt;/p&gt;
&lt;p&gt;I can't do a better job of explaining &lt;a href="https://english.emmaclit.com/2017/05/20/you-shouldve-asked/"&gt;the burden of carrying the mental load than Emma does in her comic&lt;/a&gt;. But to summarize: a lot of work is the work of noticing what work needs doing. It's the difference between "Let me know if you need help" and finding a way to actually help. It's the difference between having 45 minutes blocked on your calendar, and &lt;a href="https://j19sch.github.io/slides/atd2020-making-meetings-work.html#/"&gt;everything else that had to happen to make it successful&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What I wonder now is: how much is this skill of carrying the mental load noticed? How much is it valued? How do we interview for this skill? How do I train my fellow team members to have it? How do I teach the ownership of a team and a project? How do I get people to ask each other about the next step in picking up the work instead of coming to me to be the dispatcher? How do I make myself, instead of irreplacable, completely replaceable? &lt;/p&gt;</description><category>humans</category><category>leadership</category><category>mindset</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2021/the_mental_load_of_one_meeting/</guid><pubDate>Mon, 17 May 2021 22:00:00 GMT</pubDate></item><item><title>The Long Haul</title><link>https://elizabethzagroba.com/posts/2021/the_long_haul/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;p&gt;I've been both the lead of my team and a tester on that team for a year now. Getting answers, adapting to change, and identifying solutions have completely different time horizons in each of these roles. &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Tester experiments&lt;/h4&gt;
&lt;p&gt;Testing experiments can run quickly. A testing experiment might look like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Call an API&lt;/li&gt;
&lt;li&gt;Inspect the output&lt;/li&gt;
&lt;li&gt;Compare that to the specification&lt;/li&gt;
&lt;li&gt;Question whether either or both need changing&lt;/li&gt;
&lt;li&gt;Talk to a developer about the changes&lt;/li&gt;
&lt;li&gt;Update the specification and/or tests&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All of that happens within minutes or hours, or days if schedules are extremely incompatible and asynchronous communication is failing. I can be confident in the experiment's outcome. I can weigh the relative merits of caring vs. not caring about a particular error response code or required field, and leave my work at work. The next time I see a particular error response, I know what to look for and where changes might be needed. A failing test is evidence that something used to work in a particular way. &lt;/p&gt;
&lt;h4&gt;Team lead experiments&lt;/h4&gt;
&lt;p&gt;Team lead experiments take longer. A team lead experiment might look something more like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Team members complain that it's hard to get their ideas in during refinement.&lt;/li&gt;
&lt;li&gt;I mention this to the talking-dominant team member at a 1-on-1.&lt;/li&gt;
&lt;li&gt;Talking-dominant team member dominates following refinement.&lt;/li&gt;
&lt;li&gt;I remind talking-dominant team member in Slack about our previous conversation.&lt;/li&gt;
&lt;li&gt;Talking-dominant team member spills over their allotted time during big unit meeting.&lt;/li&gt;
&lt;li&gt;I bring both of these instances in our 1-on-1, sharing the consequences (they're the single point of failure, other team members aren't heard) of their actions.&lt;/li&gt;
&lt;li&gt;Talking-dominant team member does it again.&lt;/li&gt;
&lt;li&gt;I ask team member what I can do to help them change their behavior, given that we are both adults in control of our own behavior. They agree that change is their responsibility. We agree that setting their microphone on mute at the start of the meeting would help.&lt;/li&gt;
&lt;li&gt;Talking-dominant team member dominates some of the following refinement, until I remind them to mute, after which other team members have time to think and contribute too.&lt;/li&gt;
&lt;li&gt;I ask talking-dominant team member to set up a Slackbot to send them a reminder to mute their microphone each week before the meeting.&lt;/li&gt;
&lt;li&gt;Other people are able to contribute at the following refinement. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This took place over months. We're not to a point where we have a solution that works every time. I went in with a different hypothesis each time, not knowing when I'd hit on the right one:&lt;/p&gt;
&lt;p&gt;2. I think the talking-dominant team member isn't aware of their behavior.&lt;br&gt;
4. I think the team member has forgotten our first conversation.&lt;br&gt;
6. I think the team member doesn't understand the impact of their behavior.&lt;br&gt;
8. I think the team member hasn't found a tool or a trigger to change their habit.&lt;br&gt;
10. I think the team member needs both a tool and a trigger to change their habit.&lt;/p&gt;
&lt;p&gt;Any of the first four experiments taken by itself looks like a failure. The talking-dominant team member prevents other team members from contributing effectively. It takes me time as a leader to come up with a different hypothesis, try something else, and discover where to go from there. And this was a relatively straightforward issue to assess. Imagine how long it might take to find an effective response to a problem with more variables and more consequences.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I'm also thinking not just about the experiments themselves, but how they might come across to the wider team. For the testing experiment, I could present my results in standup the next day as "I tested it, everything's good" but it's more valuable for everyone if I &lt;a href="https://www.ministryoftesting.com/dojo/lessons/defining-story-completion-as-a-software-tester"&gt;tell a bit more of the story&lt;/a&gt;. In the team lead experiment, I can imagine my team member telling my boss "Elizabeth told me to be quiet" or me telling my boss "The talking-dominant team member is giving room for others to contribute." Telling a slightly longer story of the journey displays my value as a team lead in a better light. &lt;/p&gt;
&lt;p&gt;What experiments are you running right now? Is something that looks or feels like a failure getting you closer to a solution? How long is your time horizon?&lt;/p&gt;</description><category>career</category><category>critical-thinking</category><category>humans</category><category>leadership</category><category>mindset</category><category>teaching</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2021/the_long_haul/</guid><pubDate>Fri, 07 May 2021 22:00:00 GMT</pubDate></item><item><title>Start With Belief</title><link>https://elizabethzagroba.com/posts/2020/2020-06-07_start_with_belief/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;p&gt;Imagine a scenario where you find a software bug. You go to another colleague. They perform the exact same reproduction steps you did. But the bug doesn't happen on their machine. What now? &lt;/p&gt;
&lt;h4&gt;Works on my machine&lt;/h4&gt;
&lt;p&gt;Your colleague may not believe you found a bug, or they may not be sure if you did. They may blame you for doing something you shouldn't have. They may insist that most users have a machine more like theirs than yours, and it doesn't matter if it doesn't work on your machine. They may think it's too much trouble to track down what's happening on your machine, and leave the burden to you to figure it out. They could have a fixed mindset, and think that you, your machine, the software you're running never change. (&lt;a href="https://www.brainpickings.org/2014/01/29/carol-dweck-mindset/"&gt;Read more about fixed vs. growth mindsets in this brilliant Brain Pickings article.&lt;/a&gt;)&lt;/p&gt;
&lt;h4&gt;Does not work on every machine&lt;/h4&gt;
&lt;p&gt;Instead, they could have started with belief. They could commend you for uncovering something they themselves could not. They could be curious about how your machine and software are different from what they have running, and look into how many other users this is affecting. They could pair with you to come up with ideas about how to stop the issue from happening. If they have more access to the underlying systems, they could look into the code and configuration settings. They could have a growth mindset, and think that your machine, the software you're running, and most of all you, can change. &lt;/p&gt;
&lt;h4&gt;Start with belief&lt;/h4&gt;
&lt;p&gt;Now, imagine a different scenario. Imagine someone describes being mistreated by the police. They were doing something that is fully within their rights, and the cops said they weren't allowed to. &lt;/p&gt;
&lt;blockquote&gt;I believe you.&lt;/blockquote&gt;

&lt;p&gt;Start with belief. Do not think that because you've had different interactions with the police, that the police must not treat people in the way you're hearing. Do not think that your individual circumstances, particularly the color of your skin, means that you'll be fine. (&lt;a href="https://www.youtube.com/watch?v=7k0971Hy5eo"&gt;Think more about how racism is fascism applied to a particular category.&lt;/a&gt;) Take the time to shut up, listen, and discover how you can help. Believe that things can change. It starts with belief.&lt;/p&gt;
&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2020/black_lives_matter.jpg" style="display:block; margin-left: auto; margin-right: auto;" title="Joe Brusky/flickr"&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;Joe Brusky/flickr&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;</description><category>debugging</category><category>mindset</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2020/2020-06-07_start_with_belief/</guid><pubDate>Sat, 06 Jun 2020 22:00:00 GMT</pubDate></item></channel></rss>