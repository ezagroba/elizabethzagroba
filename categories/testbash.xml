<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Elizabeth Zagroba: Software Tester (Posts about testbash)</title><link>https://elizabethzagroba.com/</link><description></description><atom:link href="https://elizabethzagroba.com/categories/testbash.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Â© 2022 &lt;a href="mailto:me@elizabethzagroba.com"&gt;Elizabeth Zagroba&lt;/a&gt; Mozilla Public License 2.0</copyright><lastBuildDate>Sun, 13 Feb 2022 18:49:27 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>TestBash Manchester 2019, The Last One</title><link>https://elizabethzagroba.com/posts/2021/test_bash_manchester_2019/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;figure&gt;&lt;img src="https://elizabethzagroba.com/images/posts/2021/growthvsfixed.jpeg"&gt;&lt;/figure&gt; &lt;p&gt;I didn't know in September of 2019 that TestBash Manchester was the last TestBash I'd be attending for a while. I've revisited my notes from the workshop Joep Schuurkes and I ran about test reporting several times since then: for a video series, an &lt;a href="https://www.ministryoftesting.com/dojo/series/testing-ask-me-anything"&gt;Ask Me Anything&lt;/a&gt;, a &lt;a href="https://club.ministryoftesting.com/t/ask-me-anything-test-reporting/46827"&gt;forum thread&lt;/a&gt;, a &lt;a href="https://www.ministryoftesting.com/events/essentials-an-introduction-to-reporting-your-testing"&gt;99-minute workshop&lt;/a&gt;, and a &lt;a href="https://elizabethzagroba.com/posts/2021/map_out_your_stakeholders/"&gt;blog post&lt;/a&gt;. I'm just revisiting my notes now from the talks I was able to attend in the couple days after our workshop.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;My notes from Pierre Vincent's talk on observability read like a wishlist of features I'd already been asking for in the app I was testing: unit testing, centralized logging, trace ids for integration debugging, etc. The app was also in a private beta at the time, so data collected from production would be filled with more anomalies than patterns. I'm still discovering how much more influence I have in my new role as Quality Lead to present the impact and influence the improvement of testability features.&lt;/p&gt;
&lt;p&gt;Dan Smart and Yong He spoke about failure. The quote "Hey failors, how's the failing?" captures the essence of their talk: expect failure, and celebrate it, together. I get psyched anytime distinguishes between a fixed and a growth mindset as they did, which I still find best described in &lt;a href="https://www.themarginalian.org/2014/01/29/carol-dweck-mindset/"&gt;this Marginalian (formerly Brain Pickings) piece&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;I see in my notes from Conor Fitzgerald's talk on Kanban that kan = visual and ban = card. In the two years I spent running a Kanban team in the meantime, I can't remember how many times a week (a day? a minute of standup?) I asked "should we visualize that on the board?" Two of my big legacies on my former team were reinforced by Conor's talk: 1) eliminating of context-switching, and 2) not waiting until the retro to make changes.&lt;/p&gt;
&lt;p&gt;"What does it mean to be responsible for quality?" asks Past Elizabeth to Present Elizabeth from the notes on Gary Fleming's continuous testing talk. It doesn't have a straightforward answer, and exploring this is part of what my job gets to be now. Some of his examples (separating deployment from release, example mapping) are what I get to inspire my whole department to consider as part of their strategy. &lt;/p&gt;
&lt;p&gt;Saskia Coplans's talk on security testing really stuck with me. Her ability to make the unnamable company she consulted for a joke every time she mentioned it was a level of comedy I can only dream of aspiring to in a talk. Familiarity with the STRIDE model and the OWASP Top 10 gives me a leg up in thinking about how to identify and mitigate risk in our software. &lt;/p&gt;
&lt;p&gt;Areti Panou's talk about a deployment pipeline resonates more deeply now, after two years of running and maintaining a pipeline, than it did at the time, when a pipeline was just a glimmer in the eye of a teammate. I held an expectation setting and reaffirmation workshop about one pipeline in my department last week. Areti's expectations that a pipeline should have a clear purpose, failure criteria, and fix deadlines could help fix the bystander effect I've experienced myself. &lt;/p&gt;
&lt;p&gt;The incomparable and unstoppable Lisi Hocke gave a talk about becoming more code-confident that still influences how I approach goals and objectives. Specifically: it's ok to re-evaluate if goals should still apply, and to establish pause or exit criteria to know when to give up. While I can be strong in saying no to what others expect, giving up on something I expect of myself can still be a struggle. &lt;/p&gt;
&lt;p&gt;Bill Matthews's talk on technical risks with AI prompted me to add a "write about these times when you tested a machine learning application" card to the backlog for this blog. I wonder if I'll get around to writing that, since it would be hard to explain it better than Bill did that day. He talked about how training data reinforces stereotypes, and how understanding the domain is crucial to determining what's a random failure vs. what's a systematic failure. &lt;/p&gt;
&lt;p&gt;Louise Gibbs gave a talk on starting her automation journey with a record and playback tool. That's also what got me excited about automation originally, and I'm etnerally grateful to have had the right people steer me towards tests at a lower application level before UI auomation became the only tool in my toolbelt. &lt;/p&gt;
&lt;p&gt;Suman Bala's introduction to Charles Proxy was a memorable one. She'd hooked up her phone to the projected screen without turning her notifications off, so we got to see all the tweets streaming in in real time! If you're just diving into Charles Proxy, the &lt;a href="https://www.ministryoftesting.com/dojo/lessons/breaking-boundaries-using-charles-suman-bala"&gt;recording of this talk&lt;/a&gt; is a great place to start. &lt;/p&gt;
&lt;p&gt;Dominic Kua's talk on bash commands, Wim Selles's talk on Appium, and Henrik Stene's talks on consumer-driven contracts definitely fell into the "these people really know their tool" category. If they were tools I was using, I'd certainly consult their tips and advice. &lt;/p&gt;
&lt;p&gt;Emily Bache's talk shared the ideas from the State of DevOps reports and ultimately the Accelerate book. As a team lead and co-host for a testing ensemble, I was able to help empower people across teams and help build a culture of psychological safety. In my new role as Quality Lead, I'm just starting to collect the DORA metrics to help me decide where I should focus my efforts within the department. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;What a memorable group of people, location, and journey it was to TestBash Manchester 2019. I hope the &lt;a href="https://www.ministryoftesting.com/news/testbash-brighton-2022-cancellation-and-testbash-uk"&gt;upcoming TestBash UK&lt;/a&gt; is in the cards for me this coming year, and not only because I still dream about &lt;a href="https://www.mowglistreetfood.com/"&gt;this Indian food&lt;/a&gt; I had on the way in and out of Manchester.&lt;/p&gt;</description><category>conference</category><category>testbash</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2021/test_bash_manchester_2019/</guid><pubDate>Tue, 09 Nov 2021 23:00:00 GMT</pubDate></item><item><title>TestBash NYC 2015: A Push in the Right Direction</title><link>https://elizabethzagroba.com/posts/2021/testbash_nyc_2015/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;figure&gt;&lt;img src="https://elizabethzagroba.com/images/posts/2021/testbash-nyc.jpg"&gt;&lt;/figure&gt; &lt;p&gt;In 2015 when TestBash came to the United States for the first time, it was to New York. I was living in the city, but I was stuck at a job that wouldn't pay for a ticket. "Ask Rosie if you can volunteer," my mentor/sponsor/benefactor Martin Hynie suggested. Rosie, who I knew only as the lady who'd mailed me Ministry of Testing stickers from England for...no reason at all, obviously let me in.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;People ask "can we do it?" instead of asking "should we do it?"&lt;/p&gt;
&lt;p&gt;~&lt;cite&gt;Keith Klain&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I got to crash the speakers dinner. I got to go to Selena Delesie's workshop about leadership and change. At the end of the day, she praised my active participation and thanked me for being in her workshop. I was already confident in my testing skills, but she helped me see myself as a potential leader. In a follow-up coaching session I had with Selena about negotiating a higher salary, she asked me why I wanted more money. I'd recently moved into an apartment by myself, and couldn't think of what I would do with more money. It's something I think about with every job change, every growth in title and responsibility. Realizing I didn't want or need more money was a crucial step on the path to life-changing relocation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The common denominator in all your dysfunctional relationships is you.&lt;/p&gt;
&lt;p&gt;~&lt;cite&gt;Keith Klain&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;During a break between talks the following day, I snuck on stage wearing "the" Ministry of Testing tutu. During another, I wrote a bunch of notes to give a 99-second talk about leaving a closing comment on a story (which I completely forgot about, &lt;a href="https://www.ministryoftesting.com/dojo/lessons/defining-story-completion-as-a-software-tester"&gt;before later writing on this topic for the Dojo&lt;/a&gt;). While waiting on stage behind dozens of people waiting to give their 99-second talks, I improvised one about moonwalking instead.&lt;/p&gt;
&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2021/99-second-talk.jpg" style="display:block; margin-left: auto; margin-right: auto;" title="The 99-second talk I didn't give"&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;The 99-second talk I didn't give&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I met Helena Jeret-MÃ¤e, Maaret PyhÃ¤jÃ¤rvi, Dan Ashby, who along with the conference friendships I was just beginning to foster, gave me a vision of what my career could be, and where it could go at a time when I knew I needed something different. Helena saw my talk at Let's Test the following spring, and gave me valuable critical feedback that helped shaped future talks. Maaret introduced me to strong-style pairing, which changed the way I worked with my colleagues to this day. Dan had me on his podcast, reinforcing for me the success of my talk at the following year's TestBash USA. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Write down when you receive a compliment. Maybe it's true. &lt;/p&gt;
&lt;p&gt;~&lt;cite&gt;Helena Jeret-MÃ¤e&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Why am I revisiting my notes from this conference six years later? I might be feeling a bit nostalgic for the seeing-people-in-person events a year into pandemic-induced isolation. I'm also in the middle of reading "Becoming a Technical Leader" by Jerry Weinberg. One of the questions asks you to read an autobiography of someone you admire. It turns out none of the people I shared TestBash NYC with have published autobiographies...yet. &lt;/p&gt;</description><category>career</category><category>conference</category><category>testbash</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2021/testbash_nyc_2015/</guid><pubDate>Fri, 26 Feb 2021 23:00:00 GMT</pubDate></item><item><title>TestBash Netherlands 2019</title><link>https://elizabethzagroba.com/posts/2020/2020-07-14_testbash_netherlands_2019/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;p&gt;In reviewing my notes from the TestBash Netherlands that occurred in May of 2019, two big, related themes jump out at me: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;keep exploratory testing&lt;/li&gt;
&lt;li&gt;learn by sharing&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Andy Brown gave a talk about human factors in highly automated systems. As flying airplanes becomes more automated, pilots know less about how to switch to manual overrides in a time of crisis. You might not have more than a few hours a year of practice for when things go down. Continuing to share stories from the past and learn from them is one way out.&lt;/p&gt;
&lt;p&gt;For &lt;a href="https://twitter.com/Godtesen"&gt;Gitte Ottosen&lt;/a&gt;, who gave us a tester's perspective on Agile, learning never ends. Understanding the customer journey and tying your work back to the business value are essential for making informed decisions about what to test, and which subset of those things to automate. Teaching, knowledge-sharing, coaching, and pairing can get the whole team involved in advancing quality, even if they're not all strong exploratory testers. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/JitGo"&gt;Jit Gosai&lt;/a&gt; spoke about continuous testing. Practice test-driven development, story mapping, and three amigos meetings before the code is written. Improve automation test suites, use exploratory and mob testing, and incorporate feedback from the customer. When you're exploratory testing, you're not just confirming that the software functions as expected, you're testing the goal of your whole organization. Jit found that getting everybody on the team exploratory testing caught more bugs than automated tests. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/MaritvanDijk77"&gt;Marit van Dijk&lt;/a&gt; hit the nail on the head with her talk: keep exploratory testing. Maintaining a consistent state of test data across mutliple teams is difficult. Rather than spend your time setting up control mechanisms for those systems, explore the systems themselves. Bugs are found not in the things we can control or know about, but in the space between systems. Pairing a developer with a tester was a lot faster than testing solo, because nobody had to go back and reproduce bugs. Spread the risk across systems by hooking them up one at a time.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/VeraGeBa"&gt;Vera Gehlen-Baum&lt;/a&gt; and &lt;a href="https://twitter.com/isleoftesting"&gt;Beren Van Daele&lt;/a&gt; spoke about incorporating your learning into your backlog. Identify what you want to learn, and write actionable acceptance criteria for your learning. This should include sharing what you've learned individually or with the team; it doesn't have to be confined to same sprint as the work for the team. Linking personal goals to business goals will ensure that people see they're improving.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/j19sch"&gt;Joep Schuurkes&lt;/a&gt; talked us through what he was thinking as he was live-coding, which is learning and sharing at the most granular level. Separate concerns when you automate: keep what the code is supposed to accomplish separate from how it's accomplishing it. He expanded the CRUD heuristic that helps me decide what to automate, and added an extra DERR to make it CRUDDERR to ensure you can also debug, explore, run, and report on your code. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/Annosofie"&gt;Anne Colder&lt;/a&gt; and &lt;a href="https://twitter.com/VinWijNL"&gt;Vincent Wijnen&lt;/a&gt; gave an experience report about their mentor-mentee relationship. Mentoring is different from teaching. Ask questions about your mentee's experience, and expect different questions from them than you'd receive from your more experienced colleagues. Mentoring stimulates reflection on both sides. &lt;/p&gt;
&lt;p&gt;Drew Pontikis spoke about the illusion of control. Challenge your own thinking by listening to new voices. Recognize when you can affect change in a situation.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/QualityFrog"&gt;Ben Simo&lt;/a&gt; gave the last talk of the day about the art of scientific investigation. Design your next experiment based on your previous ones, and adapt as you go along. &lt;/p&gt;
&lt;p&gt;There was a whole slew of 99-second talks, but the only memorable and explicable thing I wrote down from them was something Ilena said: "Understand your team doesn't function the way that you do." &lt;/p&gt;
&lt;p&gt;The day prior to the day of talks, I helped facilitate and debrief a workshop that Joep Schuurkes developed around building an API testing framework. It was the first time we'd given it together, so that whole day was a 'learn by sharing' experience for me.&lt;/p&gt;</description><category>conference</category><category>testbash</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2020/2020-07-14_testbash_netherlands_2019/</guid><pubDate>Mon, 13 Jul 2020 22:00:00 GMT</pubDate></item><item><title>If a test falls in a forest...</title><link>https://elizabethzagroba.com/posts/2020/2020-05-24_if_a_test_falls_in_a_forest/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;p&gt;The saying goes "If a tree falls in a forest and no one is around to hear it, does it make a sound?" I have similar question that shapes the way I think about software testing: If a test is performed but no one takes action on the results, should I have performed it? I think not. &lt;/p&gt;
&lt;p&gt;If the answer to "Who cares?" is "No one," don't perform that test. If you're not going to take action on the results of your testing in the coming hours, days, or weeks, don't perform that test. The world around you will change in the meantime, and the old results will not be as valuable.&lt;/p&gt;
&lt;p&gt;One of the &lt;a href="https://www.agilealliance.org/agile101/12-principles-behind-the-agile-manifesto/"&gt;12 Agile Principles&lt;/a&gt; is simplicity, or maximizing the work not done. Testing on an agile team provides information to help decide what work should picked up in the coming iteration(s). But without meaningful collaboration or feedback, testing is a pile of work for no reason. Work is not meant to produce waste. Save your time and your sanity by thoughtfully analyzing what should not be done, and coming to an agreement with your team about it.&lt;/p&gt;
&lt;p&gt;My team gets scared about the quality of our product and skeptical about how I'm using my time when I describe what I'm not testing, or which automated tests I'm not going to run. "But isn't testing your job?" says the look on their faces. "But then what are you going to do?" is what they manage to say. Rather than capitulating for appearances, to just "look busy," I take this as a challenge to make my exploratory testing and other work I'm doing for the team more visible. &lt;/p&gt;
&lt;h4&gt;Risk-based testing&lt;/h4&gt;
&lt;p&gt;In her &lt;a href="https://www.ministryoftesting.com/dojo/series/testbash-home/lessons/reverse-engineer-your-way-to-adopting-a-risk-based-testing-approach-nishi-grover-garg"&gt;TestBash Home talk&lt;/a&gt;, &lt;a href="https://twitter.com/testwithnishi"&gt;Nishi Grover Garg&lt;/a&gt; asked us to think about estimating impact and likelihood (with possible home intruders as an example). I'd have trouble pinning down our no-estimates team on concrete numbers for undesireable software behavior. &lt;/p&gt;
&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2020/nishi-impact-likelihood.png" style="display:block; margin-left: auto; margin-right: auto;" title="Slide from Nishi's TestBash Home talk"&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;Slide from Nishi's TestBash Home talk&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;But it does reflect the conversations &lt;a href="http://quality-intelligence.com/documents/DesignBehindthePlan.pdf"&gt;Fiona Charles's test strategy workshop&lt;/a&gt; encouraged me to spark on my team. We do talk about "Yes, this would be a problem, but customers can use this work-around." Or "Yes, we could dive in and investigate whether than could ever happen, but is that more important than picking up the next story?" Being able to identify risks and have thoughtful conversations about their threat to stakeholders allows us to make informed decisions about how we should be spending our time. In testing, we don't always want the most information, we want to discover the best information about the product as efficiently as we can. &lt;/p&gt;
&lt;h4&gt;Examples from my current project&lt;/h4&gt;
&lt;h5&gt;Cross-browser testing&lt;/h5&gt;
&lt;p&gt;We were preparing our web application for a big marketing presentation. The presenter had Firefox as the default browser on their PC. We had a script of the actions they'd perform on stage, and which pages the audience would see. I happened to find bugs on pages we weren't showing, or in the way the scroll bars behaved in Chrome rather than Firefox on my Mac. &lt;/p&gt;
&lt;p&gt;I did not add these issues as bugs in our tracking system, or dig into them further. I knew that they did not pose a risk for the presentation, and a new design would be coming along before customers would potentially use those pages in Chrome on a Mac.s &lt;/p&gt;
&lt;h5&gt;The pipeline&lt;/h5&gt;
&lt;p&gt;We have a pipeline. It runs the tests we've automated at the API and the browser levels against the build in our test environment. I hoped it would inspire the team to think about what the next step could be: getting the tests to run against before merging into our main line, setting up an environment where we're not dependent on the (shared) test environment, looking at the results to see where our application or tests need to change. &lt;/p&gt;
&lt;p&gt;But we don't look at the results. We don't have alerts, we don't open the page during standup, we don't use them as a reference when we're debugging, we don't have a habit of looking at the results. If we do happen to look at the results, we don't take action on it. Building the stability of our feedback loop is not seen as high-priority a task as building new features. &lt;/p&gt;
&lt;p&gt;We don't need to run this pipeline. It's using up AWS resources. Looking at the long line of red X's on the results page only provides alert fatigue. We would be better served by not running these tests. &lt;/p&gt;
&lt;h5&gt;Minimum viable deadline&lt;/h5&gt;
&lt;p&gt;We promised to deliver a feature to a dependent team by a sadline. (A sadline is a deadline without consequences.) In the week before the sadline, three stories were left. On the first story, I found a mistake the developer declared "superficial" when he was lamenting our lack of &lt;a href="https://katrinatester.blogspot.com/2016/12/the-testing-pendulum-finding-balance-in.html"&gt;deep testing&lt;/a&gt;. He decided to review the automated tests I'd written for the second story. He found a couple of use-cases that would require a very particular set of circumstances to occur. I wanted to encourage the behavior of reviewing the tests and thinking about what they're doing more deeply, so I spent the last hour and a half before a holiday weekend automating these two cases. &lt;/p&gt;
&lt;p&gt;I'd drafted some basic automated tests for the third story, but the last feature went relatively unexplored. I should have used my scant time to test the third story more thoroughly instead. The complicated tests for the second story could have waited until next week. While we would be curious about the results, it would not have stopped our delivery of the feature. I should not have written them. &lt;/p&gt;
&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2020/far-side-tree-falling.jpg" style="display:block; margin-left: auto; margin-right: auto;" title="Far Side cartoon"&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;Far Side cartoon&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;You may be scared to say no to testing things that don't matter, where the performance will not reveal any risks or cause any follow-up actions to take place. It may be tempting to spend a bunch of time testing all the things you can think of, and only reporting on the tests that yield meaningful results. &lt;/p&gt;
&lt;p&gt;But life is not about keeping busy. Make your time at work meaningful by executing meaningful work and declining to do things that aren't important right now.&lt;/p&gt;</description><category>exploratory-testing</category><category>risk-based-testing</category><category>testbash</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2020/2020-05-24_if_a_test_falls_in_a_forest/</guid><pubDate>Sat, 23 May 2020 22:00:00 GMT</pubDate></item><item><title>TestBash Home (Spring 2020)</title><link>https://elizabethzagroba.com/posts/2020/2020-05-03_testbash-home/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;p&gt;Typing to the people you usually see in person can have the same energy as tweeting at them from across a big room. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.ministryoftesting.com/events/testbash-home-2020"&gt;TestBash Home&lt;/a&gt;, put on by the &lt;a href="https://www.ministryoftesting.com/"&gt;Ministry of Testing&lt;/a&gt;, was a 24-hour around-the-world tour of talks, panels, and coaching from the best of the best. I &lt;del&gt;missed&lt;/del&gt; purposely and prudently skipped a big chunk of the schedule to get a good night's sleep and properly absorb what I could attend.&lt;/p&gt;
&lt;p&gt;I was definitely overloaded with places to chat (Slack, the video streaming app Crowdcast, Twitter, or &lt;a href="https://tbhome.herokuapp.com/"&gt;the app built for the occasion&lt;/a&gt;) simultaneously with the video stream, the same way I would be at an in-person conference. I got that same "I want to hang out more but I'm so tired" feeling I get in real life. Though as Gwen correctly noted, this is real life now. &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Cost-Benefit of Automated Tests&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://twitter.com/jrosaproenca"&gt;JoÃ£o ProenÃ§a&lt;/a&gt; and &lt;a href="https://twitter.com/mgreiler"&gt;Michaela Greiler&lt;/a&gt; weighed the costs and benefits of continually updating and running automated tests. Coming from two different angles (cognitive biases vs. Ph.D.-level number-crunching), they shared a similar quadrant model to make better decisions about your automation.&lt;/p&gt;
&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2020/joao-quadrants.jpg" style="display:block; margin-left: auto; margin-right: auto;" title="JoÃ£o's model on my actual TV screen"&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;JoÃ£o's model on my actual TV screen&lt;/span&gt;&lt;/span&gt;
&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2020/michaela-quadrants.png" style="display:block; margin-left: auto; margin-right: auto;" title="Michaela's model"&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;Michaela's model&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;JoÃ£o took a stronger "if it's not providing value, do something about it" approach, whether that's editing the test or deleting it altogether. He asked us to consider: If you were asked to write the same test from scratch today, would you do it the same way? When you need fast feedback, what's the opportunity cost of fixing, or even just running, a particular test? JoÃ£o reminded us to ask "what is being tested?" and decide if that still matters before jumping in to fix a failing test. &lt;/p&gt;
&lt;p&gt;Michaela brought a perspective from a much larger software company (Microsoft) than I've worked at before. Her approach left open another option for the fate of tests with questionable value: only run them at certain stages. Only run the tests now where the cost of running them at a later stage is too high. Running tests at the wrong stage can increase false alarms and diagnosis time. Running tests that exercise unchanged code should be avoided. &lt;/p&gt;
&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2020/michaela-quadrants.png" style="display:block; margin-left: auto; margin-right: auto;" title="Michaela's stages"&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;Michaela's stages&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Learning &amp;amp; Teaching&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://twitter.com/witchofthetest"&gt;Veerle Verhagen&lt;/a&gt;'s 99-second talk got me rethinking some learning experiences I've had. &lt;/p&gt;
&lt;p&gt;It boiled down to this: learning is easy and teaching is hard. Try everything you've had trouble learning again, but with a better teacher this time. Whoa.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Evil User Stories&lt;/h3&gt;
&lt;p&gt;Every security talk I've heard tells you to look at the &lt;a href="https://owasp.org/www-project-top-ten/"&gt;OWASP Top 10&lt;/a&gt; and make a threat model. &lt;a href="https://twitter.com/Anne_Oikarinen"&gt;Anne Oikarinen&lt;/a&gt; told us what to do next: make an evil user story. If I were a person who made a mistake, shouldn't have access at all, or received more access to the system than anticipated, what would happen? How could we mitigate those risks? &lt;/p&gt;
&lt;p&gt;If your team doesn't know where to start with web security, Anne suggested adding static code analysis tools and exploratory testing to your practice. If you've got outside penetration testers exploring your software, add logging around the issues they trigger so you know better what's happening next time. &lt;/p&gt;
&lt;p&gt;I use the &lt;a href="https://github.com/minimaxir/big-list-of-naughty-strings/blob/master/blns.txt"&gt;big list of naughty strings&lt;/a&gt; to test for security vulnerabilities I don't always completely understand. Anne also recommended &lt;a href="https://www.hacker101.com/"&gt;Hacker 101&lt;/a&gt;, a free class about web security. &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Live Coaching&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://twitter.com/workroomprds"&gt;James Lyndsay&lt;/a&gt;'s coaching session reminded me how valuable gathering information and stepping back to ask "what will I learn by performing this test?" are when you're stuck. I've got to go back to my notes from a workshop I took with him a couple years ago to reinforce some of these lessons for myself.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Continuous Delivery Survival Guide&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://twitter.com/amyjph"&gt;Amy Phillips&lt;/a&gt; might be the first person I met where neither of us could remember if we'd met in person before, or if we just knew each other from Twitter. Her talk about surviving continuous delivery from 2017 lives on an essential onboarding guide for testers today.&lt;/p&gt;
&lt;p&gt;Amy wants you to have enough context about your new team and their values before you jump into ideas about what you could change. People probably won't come to you to hand things over for the testing phase, so you have to figure out for yourself where you fit into their process. Amy recommended what I think of as "digital archaeology": reading through all the team artifacts to get a sense of their culture. Even if you don't get write access, looking at the customer support tickets, team backlog, and git commits can show you how the team actually works, rather than how they tell you they should work.&lt;/p&gt;
&lt;p&gt;Amy really made me laugh when she described learning about the different development environments. Ask what the developers use. Ask what sales uses. Ask how many environments there are, how they're different, and what people's expectations are around them.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can ask questions without knowing what a good answer is.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Even without knowing how to implement something, you can ask questions about it to trigger developers' wheels to start turning. Looking at the structure of the code and what's been changed may give you ideas about what hasn't been covered.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Burnout&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://twitter.com/maryamumar"&gt;Maryam Umar&lt;/a&gt; spoke about being burned out from juggling too many priorities, combined with unmedicated anxiety. Maryam called out how difficult it can be to start from scratch and build a support network when you relocate. &lt;/p&gt;
&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2020/failure-garden.jpg" style="display:block; margin-left: auto; margin-right: auto;" title="Seemed appropriate to watch this one from the garden"&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;Seemed appropriate to watch this one from the garden&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I worried a lot about building a support network before I relocated, but not much since. I'm so glad I've been able to recognize the "this is too much" feeling for myself. Saying no to big but overwhelming opportunities has left space in my life for things I know I want, and greener pastures I couldn't have imagined. &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Leadership&lt;/h3&gt;
&lt;p&gt;This leadership panel made me want to have &lt;a href="https://twitter.com/nicolasedgwick"&gt;Nicola Sedgwick&lt;/a&gt;, &lt;a href="https://twitter.com/testchick"&gt;Alessandra Moreira&lt;/a&gt;, and &lt;a href="https://twitter.com/SheyMouse"&gt;Shey Compton&lt;/a&gt; in my corner as I transition to a manager position. Obviously (to me at this point in my career and after various other trainings I've participated in) leaders do not have to be people managers, and vice versa. People need to give you permission to lead them. Leaders have a vision they can communicate up and down the chain of command. &lt;/p&gt;
&lt;p&gt;The best way to be a leader is to lead by example. Sponsor other people at your organization who you see can be better leaders. Having the technical chops will allow people to believe in your value. It's easy for testers to underestimate our ability to influence behavior, but bug advocacy is a lot about that. &lt;/p&gt;
&lt;p&gt;Nicola's framework for sharing feedback is something I'm defintely going to try in a 1-on-1 meeting this week: share an observation, recount the accompanying behavior, and describe the impact. &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Morale&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://twitter.com/jennydoesthings"&gt;Jenny Bramble&lt;/a&gt; spoke about bad and good metrics, specifically that morale was the only good one. Morale encompasses psychological safety, emotional health, contentment, pride, deilght, and core values. It's hard to measure, but that also means it's hard to game. &lt;/p&gt;
&lt;p&gt;If your team isn't one where people can have negative emotions, disagree, or talk about mistakes or risks, you're doing it wrong. Genuinely asking people how it's going and taking action on the results is the best thing you can do to improve morale. &lt;/p&gt;
&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2020/survey-questions.png" style="display:block; margin-left: auto; margin-right: auto;" title="Possible survey questions to help measure morale"&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;Possible survey questions to help measure morale&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I look forward to Jenny's proposed next talk about the oral history of bugs on teams. &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Titles&lt;/h3&gt;
&lt;p&gt;I'd seen this talk from &lt;a href="https://twitter.com/vds4"&gt;Martin Hynie&lt;/a&gt; on the Ministry of Testing Dojo, and worked with Martin in the past. So I was expecting to be reminded that testing isn't a straightforward observe -&amp;gt; evaluate -&amp;gt; report operation. I'd seen him take on challenges  outside the perceived role of tester, and I'd done so myself. I knew that it's easier to create a good artifact if you start by creating an imperfect one and ask people to correct it, rather than starting from scratch. &lt;/p&gt;
&lt;p&gt;My biggest takeaway was in the Q&amp;amp;A: Someone's association and past experiences of people with my job title are more meaningful than the job title itself in setting up my working relationship with them.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Optimism&lt;/h3&gt;
&lt;p&gt;My favorite 99-second talk from the second set was &lt;a href="https://twitter.com/jen_kitson"&gt;Jen Kitson&lt;/a&gt;'s about optimism. While we discover and often have to report a lot of bad news as testers, optimism is essential to testing. We notice things, report bugs, and pushing for fixes because we can imagine a world that can be better. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I'm so glad I got to attend TestBash Home. I would listen to &lt;a href="https://twitter.com/TesterFromLeic"&gt;Vernon Richards&lt;/a&gt; talk about sports balls I don't understand. &lt;a href="https://twitter.com/gwendiagram"&gt;Gwen Diagram&lt;/a&gt; gives me life and energy in a way that I cannot fully explain. There were people I got to see or chat with that I haven't encountered for months, or years, and it felt good. It felt like home. &lt;/p&gt;</description><category>conference</category><category>testbash</category><category>testbinge</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2020/2020-05-03_testbash-home/</guid><pubDate>Sat, 02 May 2020 22:00:00 GMT</pubDate></item><item><title>Remembering TestBash Brighton 2018</title><link>https://elizabethzagroba.com/posts/2020/2020-04-19_remembering_testbash_brighton-2018/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;p&gt;TestBash Brighton was one of 10,000 things I had to do in the weeks just before I left my whole life (family, friends, job, apartment, belongings) and moved across the ocean into the unknown. It was the first place I'd gotten to share that big news in person, with people who would become larger parts of my life once I moved. Visiting the city where I'd studied during university and first thought "I could leave the United States" brought things full circle for me. &lt;/p&gt;
&lt;p&gt;I paired on presenting a brand-new workshop and talk, with two different people. This would have been a lot, even without all the uncertaincies and distractions swirling in my life those days. After hustling to adjust the schedule of and present our morning workshop, I distinctly remember choosing to skip the afternoon one I'd planned on attending in order to fill out immigration and relocation paperwork. I'm shocked to find I was able to focus enough on some other peoples' talks to take coherent notes about them.&lt;/p&gt;
&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2020/pavilion.jpg" style="display:block; margin-left: auto; margin-right: auto;" title="Royal Pavilion in downtown Brighton"&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;Royal Pavilion in downtown Brighton&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://twitter.com/anusha_n"&gt;Anusha Nirmalananthan&lt;/a&gt;'s talk about sharing a chronic illness sticks with me today. One of the things I love to jump into is troubleshooting. I hear about a problem, and I'm already thinking of ways to solve it, and asking about what you've tried already. Anusha reminded us that listening and not saying anything can be more helpful and powerful than all the patronizing "Have you tried...?" questions in the world.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://twitter.com/ewebber"&gt;Emily Weber&lt;/a&gt; spoke about communities of practice, which have always been billed as "guilds" in places where I've worked. Emily encouraged us to connect with people around our organizations in our discipline in a supportive, voluntary group without a hierarchy or an end date. While the occasional guild meeting I've attended has turned into a groan-fest, dedicating time and energy to fostering change (to code, to job descriptions, to your team's way of working, etc.) gives me that "I did something today" feeling. I'm grateful to be able to make time to learn with my colleagues, and build a support network for when I need advice from outside the bubble of my team. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I loved &lt;a href="https://twitter.com/Rosicadia"&gt;Rosie Hamilton&lt;/a&gt;'s talk about logic in testing because it drove me back to the basics. How do we decide what is true? How do I describe my thought process? When the availability of relevant cases prevents effective inductive reasoning (determining a heuristic), we have to move to abductive reasoning (determining the likeliest explanation from the available information). Realizing when you're doing this and what other information might be available to you elevates your testing.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2020/logic.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Looking back at my notes from &lt;a href="https://twitter.com/AWGHodder"&gt;Aaron Hodder&lt;/a&gt;'s talk on structured exploratory testing make me realize how much freedom I can have in my testing when working with an inattentive team. His suggestions about making for easier reporting, fewer rabbit holes, and predictability of a time-table suggest that someone is really breathing down your neck about the status, progress, and depth of your work. The biggest advantage I've had in sharing my testing charters with my team is that I find out which ones aren't valuable before I spend time executing them. Actively choosing not to test something when we don't care about the outcome or the risk it poses is very effective work.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://twitter.com/alanpage"&gt;Alan Page&lt;/a&gt; spoke about the modern testing principles he'd been shaping on his podcast for a while. My notes boil it down to: testers should do less testing and more coaching. This has certainly served me on teams producing too much for me to personally go as deep as I'd like in testing, but it also pays off when I'm out of the office or unavailable at the office. Working on a team that knows how to test means I get to look at higher-quality code, with more interesting bugs. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://twitter.com/northern_tester"&gt;Ash Winter&lt;/a&gt; gave a talk immediately after mine, so perhaps I did not gather everything from it. But I did save these tid-bits: a pipeline is built to prove that something shouldn't go out. A pipeline can provide a massive amount of information, but without a strategy, too much data doesn't help humans make better decisions. Small things you can do to make huge improvements: deploy regularly, and learn source control.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Reflecting on the open space, the social events, and the atmosphere at TestBash Brighton 2018 makes me wish for the experience we all missed at the now-cancelled event in 2020. Jumping into the unknown seemed so doable when I knew there'd be so many people to share with and learn from on this side of the Atlantic. I don't know when I'll see you all again, but I look forward to that possibility. &lt;/p&gt;
&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2020/stamner.jpg" style="display:block; margin-left: auto; margin-right: auto;" title="Can't go to Britain without a proper tea"&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;Can't go to Britain without a proper tea&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;</description><category>conference</category><category>testbash</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2020/2020-04-19_remembering_testbash_brighton-2018/</guid><pubDate>Sat, 18 Apr 2020 22:00:00 GMT</pubDate></item></channel></rss>