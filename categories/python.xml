<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Elizabeth Zagroba: Organizational Anarchist (Posts about python)</title><link>https://elizabethzagroba.com/</link><description></description><atom:link href="https://elizabethzagroba.com/categories/python.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>© 2022 &lt;a href="mailto:me@elizabethzagroba.com"&gt;Elizabeth Zagroba&lt;/a&gt; Mozilla Public License 2.0</copyright><lastBuildDate>Sun, 28 Aug 2022 14:47:48 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>From API Challenges to a Playwright Cookbook</title><link>https://elizabethzagroba.com/posts/2022/08_28_from_api_challenges_to_a_playwright_cookbook/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;figure&gt;&lt;img src="https://elizabethzagroba.com/images/posts/2022/playwright.png"&gt;&lt;/figure&gt; &lt;p&gt;Soon after &lt;a href="https://twitter.com/maaretp"&gt;Maaret Pyhäjärvi&lt;/a&gt; and &lt;a href="https://twitter.com/alex_schl"&gt;Alex Schladebeck&lt;/a&gt; began their endeavor to practice testing APIs using the &lt;a href="https://www.eviltester.com/page/tools/apichallenges/"&gt;API Challeges&lt;/a&gt; from &lt;a href="https://twitter.com/eviltester"&gt;Alan Richardson (aka The Evil Tester)&lt;/a&gt;, they looped me into their periodic practice sessions. Why? To make Past Elizabeth jealous, presumably. &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Continuing on the api challenges from &lt;a href="https://twitter.com/eviltester?ref_src=twsrc%5Etfw"&gt;@eviltester&lt;/a&gt; with &lt;a href="https://twitter.com/alex_schl?ref_src=twsrc%5Etfw"&gt;@alex_schl&lt;/a&gt; and &lt;a href="https://twitter.com/ezagroba?ref_src=twsrc%5Etfw"&gt;@ezagroba&lt;/a&gt; after weeks of being otherwise engaged, always happy to have see where we left off with a test. Simple thing for our future selves in group learning activity. &lt;a href="https://t.co/D99nC2PDVX"&gt;pic.twitter.com/D99nC2PDVX&lt;/a&gt;&lt;/p&gt;— Maaret Pyhäjärvi (@maaretp) &lt;a href="https://twitter.com/maaretp/status/1468883485205147652?ref_src=twsrc%5Etfw"&gt;December 9, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;h2&gt;API Testing Challenges&lt;/h2&gt;
&lt;p&gt;We gathered for an hour every few weeks to work through the challenges. The tools we were using (&lt;a href="https://docs.pytest.org/en/7.1.x/"&gt;pytest&lt;/a&gt;, the &lt;a href="https://pypi.org/project/requests/"&gt;Python requests library&lt;/a&gt;, and &lt;a href="https://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt;) were like home for Maaret and me. I'd been writing in a framework with these tools for my job for a few years already. &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Today in API testing adventures with &lt;a href="https://twitter.com/maaretp?ref_src=twsrc%5Etfw"&gt;@maaretp&lt;/a&gt; : We're profiting greatly from &lt;a href="https://twitter.com/ezagroba?ref_src=twsrc%5Etfw"&gt;@ezagroba&lt;/a&gt; 's python syntax expertise, and we're learning to doubt our oracles ;)&lt;/p&gt;— Alex Schladebeck (she/her) (@alex_schl) &lt;a href="https://twitter.com/alex_schl/status/1447894251384233984?ref_src=twsrc%5Etfw"&gt;October 12, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;I wasn't the only one. These tools were free to use and available for a number of years already. What the three of us combined couldn't figure out by trial-and-error, reading the error message, reading the darn description of what we were supposed to do again, or relying on patterns from previous exercises, we were able to Google. With one notable exception of course, as we are testers after all: &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Today's API testing challenges with &lt;a href="https://twitter.com/ezagroba?ref_src=twsrc%5Etfw"&gt;@ezagroba&lt;/a&gt; and &lt;a href="https://twitter.com/maaretp?ref_src=twsrc%5Etfw"&gt;@maaretp&lt;/a&gt; : the python requests library does not support TRACE...&lt;/p&gt;— Alex Schladebeck (she/her) (@alex_schl) &lt;a href="https://twitter.com/alex_schl/status/1468892681715822593?ref_src=twsrc%5Etfw"&gt;December 9, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;It may not &lt;em&gt;seem&lt;/em&gt; like you'd need three people to do the work that one person could do. But I assure you, having extra pairs of eyes to catch a typo, remember whether we were expecting it to pass or fail this time, see immediately that it's a whitespace issue making PyCharm angry, crack a joke, or help decide whether to keep going in the same direction makes the work go more smoothly. &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Observation from today's API testing session with &lt;a href="https://twitter.com/ezagroba?ref_src=twsrc%5Etfw"&gt;@ezagroba&lt;/a&gt; and &lt;a href="https://twitter.com/maaretp?ref_src=twsrc%5Etfw"&gt;@maaretp&lt;/a&gt; - it takes multiple people to remember all the details. A very succint way of summarising why we need to collaborate &lt;/p&gt;— Alex Schladebeck (she/her) (@alex_schl) &lt;a href="https://twitter.com/alex_schl/status/1478297685039976449?ref_src=twsrc%5Etfw"&gt;January 4, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;More than once, we'd end a session a few minutes early because we were stuck and lost, only to come back a couple weeks later with fresh eyes, able to understand where we were stuck and what to do about it. After several months meeting infrequently, we got through all of the API Testing Challenges! &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;We survived! Success! All of the &lt;a href="https://twitter.com/eviltester?ref_src=twsrc%5Etfw"&gt;@eviltester&lt;/a&gt;'s API Test Challenges complete! I love working with this team &lt;a href="https://twitter.com/ezagroba?ref_src=twsrc%5Etfw"&gt;@ezagroba&lt;/a&gt; &lt;a href="https://twitter.com/maaretp?ref_src=twsrc%5Etfw"&gt;@maaretp&lt;/a&gt; &lt;a href="https://t.co/xGKQOkW3gb"&gt;pic.twitter.com/xGKQOkW3gb&lt;/a&gt;&lt;/p&gt;— Alex Schladebeck (she/her) (@alex_schl) &lt;a href="https://twitter.com/alex_schl/status/1488520727649206288?ref_src=twsrc%5Etfw"&gt;February 1, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;Then we were like...now what? We like learning together, but we'd achieved our goal. &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Now we're talking about our next learning goals: mine are 'learning anything with awesome people' &lt;a href="https://twitter.com/maaretp?ref_src=twsrc%5Etfw"&gt;@maaretp&lt;/a&gt; &lt;a href="https://twitter.com/ezagroba?ref_src=twsrc%5Etfw"&gt;@ezagroba&lt;/a&gt;&lt;/p&gt;— Alex Schladebeck (she/her) (@alex_schl) &lt;a href="https://twitter.com/alex_schl/status/1488521161923252224?ref_src=twsrc%5Etfw"&gt;February 1, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;h2&gt;Starting out with Playwright&lt;/h2&gt;
&lt;p&gt;After a bit of brainstorming, we landed on a skill Alex and I were both still building: UI automation. Naturally, Maaret was way ahead of us, and pointed us towards Playwright framework and &lt;a href="http://selenium.thinkcode.se/"&gt;a practice site&lt;/a&gt; from &lt;a href="https://twitter.com/thomassundberg"&gt;Thomas Sundberg&lt;/a&gt; of all the greatest hits: radio buttons, drop-downs, alerts, you name it. &lt;/p&gt;
&lt;p&gt;Our experience with UIs, DOMs, automation, Selenium, exploration helped us, but didn't prevent every pickle we got ourselves into with Playwright. Though &lt;a href="https://playwright.dev/python/docs/intro"&gt;their documentation&lt;/a&gt; will tell you a lot of what you need to know (if you've correctly selected Python instead of Java or Node.js at the top), our desperation kept exceeding our patience. We escalated to the Playwright champion &lt;a href="https://twitter.com/AutomationPanda/"&gt;Andrew Knight&lt;/a&gt; and the Playwright community Slack channel.  &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;I'm not sure about that. Can anyone from &lt;a href="https://twitter.com/playwrightweb?ref_src=twsrc%5Etfw"&gt;@playwrightweb&lt;/a&gt; help answer?&lt;/p&gt;— Pandy Knight (@AutomationPanda) &lt;a href="https://twitter.com/AutomationPanda/status/1511346210434654219?ref_src=twsrc%5Etfw"&gt;April 5, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;Several times, it wasn't only the code that needed changing, but our perception of how Playwright wanted to interact with the website. These are a few I remember: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;an API response from a browser context can't be collected from a page context&lt;/li&gt;
&lt;li&gt;setting different contexts for a page and an alert on that page&lt;/li&gt;
&lt;li&gt;having that alert knowledge not help us when we also had to fill in a prompt&lt;/li&gt;
&lt;li&gt;expecting something in the DOM to tell us when an item in drop-down was checked&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;&lt;a href="https://twitter.com/maaretp?ref_src=twsrc%5Etfw"&gt;@maaretp&lt;/a&gt; &lt;a href="https://twitter.com/alex_schl?ref_src=twsrc%5Etfw"&gt;@alex_schl&lt;/a&gt; A kind gentleman in the Playwright Slack pointed us here: &lt;a href="https://t.co/e12v4nhth5"&gt;https://t.co/e12v4nhth5&lt;/a&gt;&lt;br&gt;&lt;br&gt;It returns the value `milk` but not the visible text `Milk` of what's selected. Perhaps that's good enough!&lt;/p&gt;— Elizabeth Zagroba (@ezagroba) &lt;a href="https://twitter.com/ezagroba/status/1528999806928048130?ref_src=twsrc%5Etfw"&gt;May 24, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;For the first three, wrapping our heads around a different way of thinking got us through the problem. For the last on, we lowered our expectations about what we could check. (Pun intended.) &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Learning more on &lt;a href="https://twitter.com/hashtag/playwright?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#playwright&lt;/a&gt; with &lt;a href="https://twitter.com/ezagroba?ref_src=twsrc%5Etfw"&gt;@ezagroba&lt;/a&gt; and &lt;a href="https://twitter.com/alex_schl?ref_src=twsrc%5Etfw"&gt;@alex_schl&lt;/a&gt; and coming to realisation we are modelling the world wrong and thus having harder time discovering info on the API documentation. We need to remodel our worlds.&lt;/p&gt;— Maaret Pyhäjärvi (@maaretp) &lt;a href="https://twitter.com/maaretp/status/1537423632632266752?ref_src=twsrc%5Etfw"&gt;June 16, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;h2&gt;Playwright Cookbook&lt;/h2&gt;
&lt;p&gt;We've tested what we can and should test on our first practice site. In upgrading to a more challenging one, we realized that we'd benefit from the knowledge our past selves gained. And that you could too. &lt;/p&gt;
&lt;p&gt;We've published our progress on github as the &lt;a href="https://github.com/ezagroba/playwright-cookbook"&gt;Playwright Cookbook&lt;/a&gt;. It's a Python repository of what we found that worked for different UI situations. It's one step beyond the Python documentation on the Playwright website, it lets you compare an actual page to a test where we were able to select the element. &lt;/p&gt;
&lt;h2&gt;Fun was had by all&lt;/h2&gt;
&lt;p&gt;Trying to quickly get something done with a new UI automation tool had been my white whale, something I knew was annoying enough that I wouldn't know how to get unstuck. Working in an ensemble meant either (1) the knowledge we needed was in the room and just had to be shared, or (2) two brilliant, successful ladies known for their testing prowess also didn't have a clue what was happening. Either way, it made things better and achievable. &lt;/p&gt;
&lt;p&gt;I am notoriously opposed to fun. But this has been fun. &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;"You only get to do fun exploratory testing after you have first automated it. That is the rule." Making fun of us exploring continuously when playing with &lt;a href="https://twitter.com/hashtag/Playwright?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Playwright&lt;/a&gt; with &lt;a href="https://twitter.com/alex_schl?ref_src=twsrc%5Etfw"&gt;@alex_schl&lt;/a&gt; &lt;a href="https://twitter.com/ezagroba?ref_src=twsrc%5Etfw"&gt;@ezagroba&lt;/a&gt;&lt;/p&gt;— Maaret Pyhäjärvi (@maaretp) &lt;a href="https://twitter.com/maaretp/status/1542443256977424391?ref_src=twsrc%5Etfw"&gt;June 30, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;The added fun and energy in learning hands-on things together creates an environment where we want to show up and learn. Social software testing for learning, FTW!&lt;/p&gt;— Maaret Pyhäjärvi (@maaretp) &lt;a href="https://twitter.com/maaretp/status/1542451911676272640?ref_src=twsrc%5Etfw"&gt;June 30, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;h2&gt;What's next&lt;/h2&gt;
&lt;p&gt;What is next for us? We know we want to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;keep learning together&lt;/li&gt;
&lt;li&gt;add more recipes for &lt;a href="https://the-internet.herokuapp.com/"&gt;our next testing target&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Have we reflected on what's valuable and not valuable to test on an API? Will we share more about this beyond this blog post? A conference talk or workshop? A Twitch stream?? Only time will tell. For now, enjoy the github repo. :)&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Perhaps instead of proposing to show up in conferences to do our learning sessions, we should start a twitch stream on our learning sessions &lt;a href="https://twitter.com/alex_schl?ref_src=twsrc%5Etfw"&gt;@alex_schl&lt;/a&gt; &lt;a href="https://twitter.com/ezagroba?ref_src=twsrc%5Etfw"&gt;@ezagroba&lt;/a&gt; :D&lt;/p&gt;— Maaret Pyhäjärvi (@maaretp) &lt;a href="https://twitter.com/maaretp/status/1542471658220527617?ref_src=twsrc%5Etfw"&gt;June 30, 2022&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;hr&gt;
&lt;p&gt;Editor's Note: The emojis have been edited out of these tweets because I still haven't bothered to track down why upgrading the version of my static site generator caused emojis to cause entire pages not to render. :bug: :magnet: &lt;/p&gt;</description><category>automation</category><category>playwright</category><category>python</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2022/08_28_from_api_challenges_to_a_playwright_cookbook/</guid><pubDate>Sat, 27 Aug 2022 22:00:00 GMT</pubDate></item><item><title>The Power of Separating Setup and Teardown From Your Tests</title><link>https://elizabethzagroba.com/posts/2022/07_30_the_power_of_separating_setup_and_teardown_from_your_tests/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;p&gt;This week, I was trying to find an explanation for my colleagues about when it's better to separate the setup and teardown of your tests from the test code itself. I was hoping that pytest's own documentation would have a recommendation, since our test code for this particular repository is written in Python with pytest as a test runner. Pytest does explain &lt;a href="https://docs.pytest.org/en/7.1.x/how-to/fixtures.html"&gt;many features of fixtures&lt;/a&gt;, and &lt;a href="https://docs.pytest.org/en/7.1.x/how-to/fixtures.html"&gt;what different test output can look like&lt;/a&gt;, but not the power of combining them. That's what I'd like to explain here. &lt;/p&gt;
&lt;h3&gt;An example&lt;/h3&gt;
&lt;p&gt;I can't show you the code I was looking at from work, so here is a relatively trivial and useless example I was able to contrive in an hour. (Sidebar: I once tested an address field that truncated the leading zeroes of post codes, so though this test may be trivial, testing that the post code made it to the database intact can provide value.)&lt;/p&gt;
&lt;p&gt;There's an API called Zippopotamus that can either:
1. take a city and state, and return you details about matching places; or
2. take a post code, and return you details about matching places.&lt;/p&gt;
&lt;p&gt;I've got two tests below, both trying to accomplish the same thing: see if all the post codes returned for the city of Waterville in the state of Maine also include Waterville in their results. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Setup: get list of post codes for Waterville, Maine&lt;/li&gt;
&lt;li&gt;Test: for each post code, check that &lt;code&gt;Waterville&lt;/code&gt; is in the list of matching places&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="n"&gt;zippopotamus_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"https://api.zippopotam.us/us"&lt;/span&gt;


&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post_codes&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;zippopotamus_url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;/me/waterville'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
    &lt;span class="n"&gt;places&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s1"&gt;'places'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;post_codes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'post code'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;places&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;post_codes&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestZippopotamus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_setup_included_waterville_maine_included_in_each_post_code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;zippopotamus_url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;/me/waterville'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
        &lt;span class="n"&gt;places&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s1"&gt;'places'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;post_codes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'post code'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;places&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;post_code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;post_codes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;zippopotamus_url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;post_code&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
            &lt;span class="n"&gt;places&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s1"&gt;'places'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'place name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'Waterville'&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;places&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_setup_separated_waterville_maine_included_in_each_post_code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;post_codes&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;post_code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;post_codes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;zippopotamus_url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;post_code&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
            &lt;span class="n"&gt;places&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s1"&gt;'places'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'place name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'Waterville'&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;places&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The first test shows the setup included in the test. The second test has the setup separated from the test. It appears in the fixture called &lt;code&gt;post_codes&lt;/code&gt;. &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt; ez@EZ-mini blog-examples % &lt;span class="nv"&gt;pytest&lt;/span&gt;                     
&lt;span class="o"&gt;==========================&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; session &lt;span class="nv"&gt;starts&lt;/span&gt; &lt;span class="o"&gt;===========================&lt;/span&gt;
platform darwin -- Python &lt;span class="m"&gt;3&lt;/span&gt;.10.1, pytest-7.1.2, pluggy-1.0.0
rootdir: /Users/ez/blog-examples
collected &lt;span class="m"&gt;2&lt;/span&gt; items                                                        

test_error_vs_failure_pytest.py ..                                 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;%&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;===========================&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; passed &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;.46s &lt;span class="o"&gt;============================&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;When you run these tests, they both pass. One test is a little longer, which you may find easier to follow than navigating around in the code, or harder to follow because there's code that's more about data collection than what we want to test. I find it yucky (a technical term) to have more than one thing called &lt;code&gt;request&lt;/code&gt; or &lt;code&gt;response&lt;/code&gt; in a single test, but these are all personal preferences. &lt;/p&gt;
&lt;p&gt;Now imagine instead of &lt;code&gt;waterville&lt;/code&gt; in the API requests, I've gone on auto-pilot and typed &lt;code&gt;whatever&lt;/code&gt; in the setup for the tests. Here's what pytest gives us as the output. &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt; ez@EZ-mini blog-examples % &lt;span class="nv"&gt;pytest&lt;/span&gt;
&lt;span class="o"&gt;==========================&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; session &lt;span class="nv"&gt;starts&lt;/span&gt; &lt;span class="o"&gt;===========================&lt;/span&gt;
platform darwin -- Python &lt;span class="m"&gt;3&lt;/span&gt;.10.1, pytest-7.1.2, pluggy-1.0.0
rootdir: /Users/ez/blog-examples
collected &lt;span class="m"&gt;2&lt;/span&gt; items                                                        

test_error_vs_failure_pytest.py FE                                 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;%&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;=================================&lt;/span&gt; &lt;span class="nv"&gt;ERRORS&lt;/span&gt; &lt;span class="o"&gt;=================================&lt;/span&gt;
_ ERROR at setup of TestZippopotamus.test_setup_separated_waterville_maine_included_in_each_post_code _

    @pytest.fixture&lt;span class="o"&gt;()&lt;/span&gt;
    def post_codes&lt;span class="o"&gt;()&lt;/span&gt;:
        &lt;span class="nv"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; requests.get&lt;span class="o"&gt;(&lt;/span&gt;f&lt;span class="s1"&gt;'{zippopotamus_url}/me/whatever'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;       assert response.status_code &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt;
E       assert &lt;span class="nv"&gt;404&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt;
E        +  where &lt;span class="nv"&gt;404&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &amp;lt;Response &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;404&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&amp;gt;.status_code

test_error_vs_failure_pytest.py:10: &lt;span class="nv"&gt;AssertionError&lt;/span&gt;
&lt;span class="o"&gt;================================&lt;/span&gt; &lt;span class="nv"&gt;FAILURES&lt;/span&gt; &lt;span class="o"&gt;================================&lt;/span&gt;
_ TestZippopotamus.test_setup_included_waterville_maine_included_in_each_post_code _

&lt;span class="nv"&gt;self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &amp;lt;test_error_vs_failure_pytest.TestZippopotamus object at 0x101f4c160&amp;gt;

    def test_setup_included_waterville_maine_included_in_each_post_code&lt;span class="o"&gt;(&lt;/span&gt;self&lt;span class="o"&gt;)&lt;/span&gt;:
        &lt;span class="nv"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; requests.get&lt;span class="o"&gt;(&lt;/span&gt;f&lt;span class="s1"&gt;'{zippopotamus_url}/me/whatever'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;       assert response.status_code &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt;
E       assert &lt;span class="nv"&gt;404&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt;
E        +  where &lt;span class="nv"&gt;404&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &amp;lt;Response &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;404&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&amp;gt;.status_code

test_error_vs_failure_pytest.py:20: &lt;span class="nv"&gt;AssertionError&lt;/span&gt;
&lt;span class="o"&gt;========================&lt;/span&gt; short &lt;span class="nb"&gt;test&lt;/span&gt; summary &lt;span class="nv"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=========================&lt;/span&gt;
FAILED test_error_vs_failure_pytest.py::TestZippopotamus::test_setup_included_waterville_maine_included_in_each_post_code
ERROR test_error_vs_failure_pytest.py::TestZippopotamus::test_setup_separated_waterville_maine_included_in_each_post_code
&lt;span class="o"&gt;=======================&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; failed, &lt;span class="m"&gt;1&lt;/span&gt; error &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.71s &lt;span class="o"&gt;=======================&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Neither test passes. They both get mad at the same spot, where they're checking that they got the post codes for "Whatever, Maine" and found that, oh wait no, they haven't been able to do that. &lt;/p&gt;
&lt;p&gt;But one test fails and one test errors: The test with the setup included fails. The test with the setup in the fixture errors. This difference is why I prefer to separate my setup (and teardown, which behaves the same way) from my test code. &lt;/p&gt;
&lt;h3&gt;The power of separating setup and teardown from your tests&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;More of the test code is about what's being tested, instead of being about how you get to the right place.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pytest will give you an error when code fails in the setup or teardown, and a failure when the code inside the test fails.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you're reusing setup or teardown, you'll only have to fix an issue in the code in one spot.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you're running a bunch of tests with shared setup or teardown in a pipeline, it'll be easier to diagnose when something outside what you're trying to test has gone awry. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Reasons to keep the setup and teardown with your tests&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You are early enough in the development process that the setup and teardown don't need to be used anywhere else yet. You can extract them when they do, but for now, it's a little faster to read with everything in one place.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you don't have your IDE setup correctly, PyCharm may not let you Ctrl + click through the code to follow the fixture code. (&lt;a href="https://www.jetbrains.com/help/pycharm/testing-frameworks.html#a036958d"&gt;Here's how to setup PyCharm to recognize pytest fixtures.&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you don't trust someone reading or debugging the test (other colleagues, future you, or possibly even other colleagues after you've moved to a different team) to be able to follow the code through to the fixtures. Or no one else is looking at the code!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;What have I missed?&lt;/h3&gt;
&lt;p&gt;What other reasons are there? What do you tend to do for your team when your code is shared? What do you tend to do for yourself when you only have your future self to help out? How would you have written this Python code differently? Which articles do you point to when you're explaining a separation of concerns? &lt;/p&gt;</description><category>pytest</category><category>python</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2022/07_30_the_power_of_separating_setup_and_teardown_from_your_tests/</guid><pubDate>Fri, 29 Jul 2022 22:00:00 GMT</pubDate></item><item><title>From Crafting Project to Critical Infrastructure</title><link>https://elizabethzagroba.com/posts/2022/06_12_from_crafting_project_to_critical_infrastructure/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;figure&gt;&lt;img src="https://elizabethzagroba.com/images/posts/2022/megaphone.jpg"&gt;&lt;/figure&gt; &lt;h3&gt;Just for me&lt;/h3&gt;
&lt;p&gt;Three years ago, I had a shit laptop. My company makes a Windows desktop software product that allows you to build your own applications. Mac users working the software could open it on their Windows virtual machine in Parallels. When I did that, my company's software crashed, Parallels crashed, and then my whole Mac crashed. My job was to create app builds, run them, and test them. Due to my shit laptop, I couldn't do that locally. &lt;/p&gt;
&lt;p&gt;Luckily, our app was also hosted in our public cloud. Through the cloud UI, you could make a build, see which build was on which of your environments, and deploying a new build. But the UI was...not an ideal workflow for me. It was slow to load, required several steps of clicking and waiting for a minute or two - just long enough to get distracted thinking about something else. A deploy process that might optimally take ~8 minutes took ~15 minutes as my mind wandered and the UI didn't update immediately. &lt;/p&gt;
&lt;p&gt;I needed a one-step process to deploy, with updates frequent enough to hold my attention. I decided to abandon the UI for the API. &lt;/p&gt;
&lt;p&gt;I wrote a Python script that took command-line input and printed output to the console as the steps of the process progressed. I used my two crafting days that month to break down the problem, setup the whole repository, and get the code to a state where it built and deployed an app to an environment. &lt;/p&gt;
&lt;p&gt;A code review from Joep Schuurkes moved the code from a long list of functions to different classes corresponding to the API endpoints I was calling. I think the commands were limited to &lt;code&gt;--build&lt;/code&gt; and &lt;code&gt;--deploy&lt;/code&gt;. To make sure the refactor was successful, I'd scroll up in my Terminal history and run those two commands again. Crafting days on subsequent months brought a bit more error-handling to account for mistypes on my side or failures/timeouts from the APIs. &lt;/p&gt;
&lt;p&gt;At this point, it was a solid tool that saved me about a half-hour per day. I presented it to the developers on my team, offering them access to the repository so they too could benefit from this time-savings. &lt;/p&gt;
&lt;p&gt;They were deeply unimpressed. They didn't have shit laptops, they had Windows laptops, they didn't have to run Parallels, they weren't constantly switching between branches and needing actual builds of the application to test. To them, this script was relatively useless. That was fine by me! The time and frustration the script saved me was more than worth the effort to build it. I used it several times a day myself, and got to use it as an example in the "Whole Team Approach to Continuous Delivery" workshop I paired with Lisa Crispin on. That was more than enough. &lt;/p&gt;
&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2022/cloud-deployment-script.png" style="display:block; margin-left: auto; margin-right: auto;" title="Slide from the workshop"&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;Slide from the workshop&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;Pipelines emerge&lt;/h3&gt;
&lt;p&gt;Six months later, a developer on my team got excited to set up a pipeline for our application. They wanted to run static code analysis on a build of our application, and run our functional tests against a deployed application running in a deployed environment. They copy + pasted my code as a starting point for the build and deploy, copy + pasted the static code analysis scans from another unit, and connected the two in a pipeline that provided value to the wider team. Developers weren't great at running tests on their feature branches on their machines; now we had a pipeline that would do it for them. &lt;/p&gt;
&lt;p&gt;Other teams saw our pipeline and discovered my deployment script in the process. Rather than copy + pasting the code as my teammate did, they pinned their pipelines to the most recent version of the code on the master branch. &lt;/p&gt;
&lt;p&gt;With more users and use cases, fellow colleagues were eager to also use their two crafting days per month to add the features they needed. I'd receive pull requests of things I didn't need for a context I didn't have, or feature requests I used my limited crafting time to fulfill. Without a style guide, a linter, tests, or a set scope, it was hard to turn away pull requests weeks or months in the making that people were eager to see included in the master branch. I merged it to keep everyone unblocked. As the code grew to serve every individual need, I lost  interest in supporting what had originally been my darling pet project. &lt;/p&gt;
&lt;h3&gt;Still Valuable?&lt;/h3&gt;
&lt;p&gt;Two years after the original two-day crafting project, my role shifted from serving one team and one application to thinking about quality for the seven engineering teams in my unit. No longer did I need to deploy the application to a hosted environment. At the same time, my old team shifted where the repository was located, and the APIs I'd been calling in my script wouldn't do a lot of what they used to. &lt;/p&gt;
&lt;p&gt;I got to explore what it meant to be the Quality Lead for my unit, and nobody I served needed this script. I left the list of improvements I'd brainstormed for it languishing at the bottom of my personal Trello board. I didn't get any requests from other departments to use or update it. &lt;/p&gt;
&lt;h3&gt;Still Valuable!&lt;/h3&gt;
&lt;p&gt;Nine months later, the spark got reignited! A fork of the deployment script got presented in another unit, complete with a UI on top of it. Someone on my old project discovered my script, and decided to add a feature to upload builds from the new repository location to make it useful again. They shared the code for a review after just a few hours of effort. &lt;/p&gt;
&lt;p&gt;I had a chance to think through what parts of the repository were resuable for this use-case, which parts would be better copy + pasted for better readability, and got the merge request to a place where it fit in with the existing code style before anyone's heart and soul had been poured into it. &lt;/p&gt;
&lt;p&gt;Now a bloated script eight different actions, I decided to start writing tests for it. I didn't need the tests to make sure the existing code worked; everyone using it in their pipelines was enough to prove that. Tests will allow for future refactoring of the code and updating the version of the API I'm calling.&lt;/p&gt;
&lt;p&gt;The first test I added confirmed that the new functionality did what the code submitter expected it to do, gave me a way to change individual parameters  faster. and gave me the confidence and excitement I'd been missing. &lt;/p&gt;
&lt;p&gt;I'm just getting going on tests for the rest of the existing code, but I'm looking forward to it!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Why do I tell you this story? Well, here's what I think when I look back at the evolution of this code base: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;write tests, even before you &lt;em&gt;really&lt;/em&gt; need them&lt;/li&gt;
&lt;li&gt;set up a linter and coding guidelines before you give anyone else access to your repo&lt;/li&gt;
&lt;li&gt;if you want to be precious about your code, tell people to fork instead of submitting merge requests&lt;/li&gt;
&lt;li&gt;if you want the code to be in its most findable place and shareable state, you'll have to invest the time to collaborate with people on their changes&lt;/li&gt;
&lt;li&gt;good things come to those who wait :)&lt;/li&gt;
&lt;/ul&gt;</description><category>apis</category><category>automation</category><category>code-review</category><category>python</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2022/06_12_from_crafting_project_to_critical_infrastructure/</guid><pubDate>Fri, 17 Jun 2022 22:00:00 GMT</pubDate></item></channel></rss>