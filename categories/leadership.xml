<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Elizabeth Zagroba: Software Tester (Posts about leadership)</title><link>https://elizabethzagroba.com/</link><description></description><atom:link href="https://elizabethzagroba.com/categories/leadership.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>© 2021 &lt;a href="mailto:me@elizabethzagroba.com"&gt;Elizabeth Zagroba&lt;/a&gt; Mozilla Public License 2.0</copyright><lastBuildDate>Sun, 27 Jun 2021 12:44:20 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Praise the Messenger</title><link>https://elizabethzagroba.com/posts/2021/praise_the_messenger/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;div&gt;&lt;p&gt;I hear no a lot. No, that's not in scope for this story. No, it's not worth fixing that now. No, that's not risky enough for you to spend time testing. Hearing no on a good day sparks my creativity and pushes me into more valuable directions. On a bad day, it makes me wonder why I should keep going. &lt;/p&gt;
&lt;p&gt;Saying no in a good way takes practice. I've honed this skill with wisdom from some of the best. Elisabeth Hendrickson tweeted &lt;a href="https://twitter.com/testobsessed/status/1361844997276930049"&gt;a list of some of the different ways she has of saying no&lt;/a&gt;. It reminded me that the &lt;a href="https://twitter.com/ezagroba/status/1376971216653856770"&gt;sassy replies&lt;/a&gt; I send to recruiters and speaking engagements in which I have no interest or connection. If you're looking for a style that builds bridges rather than burns them down, I'd recommend Elisabeth's Hendrickson's examples, not mine. &lt;/p&gt;
&lt;p&gt;At Let's Test in Sweden in 2016, Fiona Charles gave a workshop on Learning to Say No. We practiced different ways to say no, complete with supporting arguments and steadfast determination tailored to the real-life situations participants brought to the workshop. (In a demonstration of having embraced the message of the workshop, we disbanded halfway through the allotted time. I spent the rest of the afternoon on a memorable bike ride along the Swedish coast.) The strongest revelation from the group was: we have more power than we think we do. There may be consequences to saying no, refusing a particular task, or turning down an opportunity, but it's often within our power to do so. Saying no effectively makes room you to decide how to spend your time.&lt;/p&gt;
&lt;p&gt;At Agile Testing Days in 2018, Liz Keogh gave a keynote on &lt;a href="https://www.youtube.com/watch?v=KvKFlMfEqxM"&gt;how to tell people they failed (and make them feel great)&lt;/a&gt; that culminated in a surprising conclusion: don't. Don't tell people they failed. Use positive reinforcement to encourage the behaviors you want to see, and the others will fall away. &lt;/p&gt;
&lt;p&gt;We had a tester leave the company recently. They'd set goals with their manager that directly opposed the test strategy I helped them shape. Bugs they reported were shot down, postponed until future stories, or grouped together as issues to be fixed eventually someday. They were facing a lot of "no," and as far as I could see from a different team, not a lot of yes. How long would you last in this situation?&lt;/p&gt;
&lt;p&gt;I also have a tester reporting to me at the moment. They've been catching tricky things, find bugs, and preventing problems. I want them to keep doing what they're doing. I get that a developer's first reaction when they hear about a bug might not be "Oh wow, thank you so much for this pile of questions and work!" I have to give them that positive reinforcement so they keep reporting and digging into issues, so I call it out in their 1-on-1. They thank me, and says it keeps them going. &lt;/p&gt;
&lt;p&gt;Don't shoot the messenger. Praise the messenger. &lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Tired: Don't shoot the messenger.&lt;br&gt;&lt;br&gt;Wired: Encourage and support the messenger, so they are motivated to keep bringing you messages.&lt;/p&gt;— Elizabeth Zagroba (@ezagroba) &lt;a href="https://twitter.com/ezagroba/status/1403356865694683137?ref_src=twsrc%5Etfw"&gt;June 11, 2021&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;Who are you saying no to frequently? Is your no driving them away, or encouraging them? Do you need to say no? &lt;/p&gt;
&lt;p&gt;&lt;span class="img_container" style="display: inline-block;"&gt;&lt;img alt="" src="https://elizabethzagroba.com/images/posts/2021/sign.jpg" style="display:block; margin-left: auto; margin-right: auto;" title="If you were waiting for a sign - this is it."&gt;&lt;span class="img_caption" style="display: block; text-align: center;"&gt;If you were waiting for a sign - this is it.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;</description><category>coaching</category><category>communication</category><category>leadership</category><category>mindset</category><category>reporting</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2021/praise_the_messenger/</guid><pubDate>Sat, 26 Jun 2021 22:00:00 GMT</pubDate></item><item><title>Delivering Information vs. Delivering Meta-Information</title><link>https://elizabethzagroba.com/posts/2021/delivering_information_vs_delivering_meta_information/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;figure&gt;&lt;img src="https://elizabethzagroba.com/images/posts/2021/victor-garcia-unsplash.jpeg"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;One of the first testing skills I built was &lt;a href="https://elizabethzagroba.com/posts/2014/2014-02-24_writing-clear-and-effective-bug-reports/"&gt;bug reporting&lt;/a&gt;. I practiced narrowing down the steps to reproduce. I told my developers what was happening now and what should happen instead. I learned to include where the issue was occurring, so my developers would stop closing my bugs with the &lt;code&gt;Works for me&lt;/code&gt; resolution in Trac. &lt;/p&gt;
&lt;p&gt;In 2013, &lt;a href="https://twitter.com/PaulHolland_TWN"&gt;Paul Holland&lt;/a&gt; taught me to tell the story of my testing. That is, meta-information about my testing. Sure, I still reported the outcomes: these things didn't work, these things did. But I also reported:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;how I tested the product&lt;/li&gt;
&lt;li&gt;how good that testing was&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;How long did it take me to test? What was difficult about my testing, made it difficult to get started, or slowed it down? What wasn't I able to test? The reason we tell those stories is to help uncover product risks, process risks, and get help from those around us to solve the issues. &lt;/p&gt;
&lt;p&gt;This is meta-information about my testing. It's what I'm seeing as I'm doing it, one level removed from the actual testing itself. (Look up &lt;code&gt;testopies&lt;/code&gt; [testing + autopsy] for more on gathering meta-level information about your testing.) &lt;/p&gt;
&lt;p&gt;Building the skills around meta-information are important for doing any job well. These skills include:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;identifying when you're communicating at the information level, or the meta-level&lt;/li&gt;
&lt;li&gt;switching between and keep track of whether you're communicating at the information level or meta-level&lt;/li&gt;
&lt;li&gt;naming the different levels, and bringing the people you're communicating with on this level-switching journey&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These recent examples stick in my mind.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Addresing the question vs. addressing the miscommunication&lt;/h4&gt;
&lt;p&gt;I was interviewing a candidate for a Software Development Manager position. For about a half hour, every question proceeded more or less like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I'd ask a question.&lt;/li&gt;
&lt;li&gt;The candidate would speak for a minute or a few, without answering the question.&lt;/li&gt;
&lt;li&gt;I'd rephrase the question, be more specific, or add more details to help the candidate understand the question&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://elizabethzagroba.com/posts/2021/delivering_information_vs_delivering_meta_information/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;The candidate would speak again, again not answering the question.&lt;/li&gt;
&lt;li&gt;I'd try once or twice more, before moving on to the next question. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I realized early on that this was happening. I consider it an essential skill to be able to answer a question directly, or identify when you're having trouble doing that, as a Software Development Manager. I decided I'd reject the candidate, but realized I'd still have to get through the rest of this hour with them.&lt;/p&gt;
&lt;p&gt;My colleague, my co-interviewer, took a different approach. He called out the miscommication problem to the candidate! He said "Elizabeth is asking you questions, and you're not answering them. Did you notice that? Why is that?" It was direct in a way that made me uncomfortable, and that I would have trouble doing with someone I just met. But he moved the conversation to where it needed to be: the meta-level. The candidate struggled to answer this question as well.&lt;/p&gt;
&lt;p&gt;I jumped in to ease the awkwardness. I offered up my theory: the candidate's responses weren't answers, they were the candidate agreeing with the premise of the question. My colleague completely agreed, thanked me for contribution, but politely redirected the burden of this problem onto the candidate. The candidate continued to struggle without acknowledging the issue or the awkwardness for the rest of the interview. It was a clear decision for both me and my colleague: we would not be hiring this person.&lt;/p&gt;
&lt;h4&gt;Difficulty scheduling a meeting vs. telling them that&lt;/h4&gt;
&lt;p&gt;I was asking for more details on the planning of a project in standup. My developer described how hard it was to find time with a particular developer on another team. They said the project was going to take weeks to scope instead of the days they thought it could take, if only they could find time with this person. The project seemed important, already had a deadline (or really, sadline&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="https://elizabethzagroba.com/posts/2021/delivering_information_vs_delivering_meta_information/#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;), and waiting until the next free spot on this person's calendar wasn't working. &lt;/p&gt;
&lt;p&gt;I asked my developer "Have you given his this feedback directly?" I suspected that only the information had been communicated: the following meeting would have to wait a week. My hunch was correct. I suggested my developer try giving this person the meta-information: about how hard they were to schedule, how this was cutting into the time we had to work on the project once it was scoped, and how that threatened the deadline. Imagine how differently this person could react and rearrange what they were doing, or share their relative priorities so we could adjust our expectations, when given this meta-information. This was last week, so I don't know yet how this story ends!&lt;/p&gt;
&lt;h4&gt;Adding testing details to the story vs. why I'm asking for them&lt;/h4&gt;
&lt;p&gt;There was a user story about being able to send metrics from our application to another application. I was picking up the testing on the story. My developer said they'd confirmed in the other application that our metrics were sent. They'd only sent a success, so I was planning on using the same setup as they did to look in the other application, but see what a failure looked like instead. &lt;/p&gt;
&lt;p&gt;But that's not what I told my developer. What I said to them was: "Add enough details to the ticket so I can test it." It turned out, we had different ideas about what &lt;code&gt;enough&lt;/code&gt; meant. First they added a URL. I followed the URL and it went to a blank page with a header. I said the same thing again, "Add enough details to the ticket so I can test it." They wrote down the first button they had to click on. I asked a third time. They added one more detail, which still didn't tell me enough. But I got tired of asking. I tried all the options in the application, Googled to figure out what SQL query I needed, executed it, triggered a variety of different failures, and confirmed that they were received. &lt;/p&gt;
&lt;p&gt;Later, I explained to my developer the difference between my expectations and what they wrote. They explained how their expectations were also violated: they had to reach out to the team from the other product, figure out what to do, poke around in the product, and that the details they left me were all they received to be able to eventually figure it out. To them, just the URL going to a blank screen was &lt;code&gt;enough&lt;/code&gt;&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="https://elizabethzagroba.com/posts/2021/delivering_information_vs_delivering_meta_information/#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt;. &lt;/p&gt;
&lt;p&gt;I realized then that I had left out a crucial piece of meta-information: the reason I was asking for the details. I wanted to skip that poking around time. I had ten other tasks this day, and expected this to only take 20 minutes instead of the few hours it ended up taking. I was hoping to benefit from the poking around work my developer had already done. I was expecting a lot of context, and my developer was expecting to only need to share a little bit of context.&lt;/p&gt;
&lt;p&gt;Once I shared this with them, they understood where the gap was between my expectations and theirs. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The suggestion about scheduling difficulties, that was an easy conversation to have. The other two were quite difficult for me. They took patient, active listening. I had to keep asking myself if I'd been clear enough with my expectations. They definitely made me sweat. &lt;/p&gt;
&lt;p&gt;Moving between information communication and meta-level communication is a skill. It takes time, failure, reflection, and practice to do it. Doing it well is a leadership skill. &lt;a href="https://app.thestorygraph.com/books/b15fe452-5b8e-49f5-9e0b-90da490b944c"&gt;&lt;em&gt;Crucial Conversations&lt;/em&gt;&lt;/a&gt; helped me identify when it's worth working on the relationship with a person and investing in these conversations. You don't have to be managing people (as I am currently) to be building or using this skill. &lt;/p&gt;
&lt;p&gt;What meta-level conversations are you avoiding? Are there people where you find you're only able to communicate on an information level? Have you tried communicating with them on a meta-level? What would happen if you told them that's what you were trying?&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;In high-context cultures like the United States and the Netherlands, the deliverer assumes the burden of the miscommunication, not the receiver. There's more about this in &lt;a href="https://app.thestorygraph.com/books/f0d396c1-fcd9-4beb-9538-4d11e04e3e1c"&gt;&lt;em&gt;The Culture Map&lt;/em&gt;&lt;/a&gt;. &lt;a class="footnote-backref" href="https://elizabethzagroba.com/posts/2021/delivering_information_vs_delivering_meta_information/#fnref:1" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;A deadline is when somebody dies. Most things we call deadlines at work are just sadlines, in that people are alive but just sad when they're missed. Read more about it in &lt;a href="https://lizkeogh.com/2017/08/31/reflecting-reality/"&gt;Liz Keogh's blog post&lt;/a&gt;. &lt;a class="footnote-backref" href="https://elizabethzagroba.com/posts/2021/delivering_information_vs_delivering_meta_information/#fnref:2" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;My colleague is coming from a low-context culture. I'm coming from a high-context culture. You can read more examples of this in &lt;a href="https://app.thestorygraph.com/books/f0d396c1-fcd9-4beb-9538-4d11e04e3e1c"&gt;&lt;em&gt;The Culture Map&lt;/em&gt;&lt;/a&gt;, but it's the kind of non-fiction book that could have been a blog post, so just read the rest of this blog post instead? &lt;a class="footnote-backref" href="https://elizabethzagroba.com/posts/2021/delivering_information_vs_delivering_meta_information/#fnref:3" title="Jump back to footnote 3 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>communication</category><category>leadership</category><category>mindset</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2021/delivering_information_vs_delivering_meta_information/</guid><pubDate>Sat, 19 Jun 2021 22:00:00 GMT</pubDate></item><item><title>The Mental Load of One Meeting</title><link>https://elizabethzagroba.com/posts/2021/the_mental_load_of_one_meeting/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;figure&gt;&lt;img src="https://elizabethzagroba.com/images/posts/2021/outlook-calendar-week.png"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;I facilitated a meeting today. It was scheduled for 45 minutes on my agenda, for me and some other tech and team leads in my unit. We covered what we needed to move forward planning an epic with a set of relatively straightforward stories, both in execution and work distribution among the teams. &lt;/p&gt;
&lt;p&gt;For some of the people attending today, they showed up without preparing, and didn't remember what the topic was. I filled them in. Because this is what the meeting preparation looked like from my side: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I was in a planning meeting two weeks ago with a variety of people from the unit. I picked up the implication that that follow-up (combination solo thinking/document review followed by meeting) was needed soon with a few tech and team leads. I checked the out of office schedule (that I created and keep updated as people mention when they'll be out) and noticed that two weeks was an achievable time span for "soon". I mentioned this while we were still in that planning meeting. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Within the next 48 hours, two people from the planning meeting asked when I'd scheduled the follow-up. I explained that I was giving the other leads a chance to schedule it first.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When I scheduled the follow-up, I made the title of the Outlook invitation "review the comments you've already added to the document" so the purpose and expectations were both clear and impossible to miss. I added the document to review to the body of the invitation. I let the two inquiring minds know that this occurred. I found a couple of 45-minute blocks when all four people present at the planning meeting, plus the one person that had been forgotten, were available simultaneously. I chose the one on Tuesday, giving the person who was out for a week Monday to catch up.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I added a Slackbot reminder for Monday afternoon for the person who's out the previous week. They're on my team and typically have trouble saying no when someone tries to pull their focus. &lt;a href="https://elizabethzagroba.com/posts/2021/the_long_haul/"&gt;We've found that Slackbots help&lt;/a&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The meeting time arrives. The Slackbot reminder person and I have reviewed the document. The others haven't. I check in and ask whether we should hold this meeting after they're available to do so. Silence. I move on, facilitating the discussion, taking notes, and keeping us on track.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;I am not the only person capable of scheduling a meeting. I am not the person best equipped to review this document. It is not my responsibility to come up with systems for my peers to remember to do their work. I can let this fail, just not follow-up, and I do with smaller, safer-to-fail experiments. But it doesn't solve the problem. &lt;/p&gt;
&lt;p&gt;I can't do a better job of explaining &lt;a href="https://english.emmaclit.com/2017/05/20/you-shouldve-asked/"&gt;the burden of carrying the mental load than Emma does in her comic&lt;/a&gt;. But to summarize: a lot of work is the work of noticing what work needs doing. It's the difference between "Let me know if you need help" and finding a way to actually help. It's the difference between having 45 minutes blocked on your calendar, and &lt;a href="https://j19sch.github.io/slides/atd2020-making-meetings-work.html#/"&gt;everything else that had to happen to make it successful&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What I wonder now is: how much is this skill of carrying the mental load noticed? How much is it valued? How do we interview for this skill? How do I train my fellow team members to have it? How do I teach the ownership of a team and a project? How do I get people to ask each other about the next step in picking up the work instead of coming to me to be the dispatcher? How do I make myself, instead of irreplacable, completely replaceable? &lt;/p&gt;&lt;/div&gt;</description><category>humans</category><category>leadership</category><category>mindset</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2021/the_mental_load_of_one_meeting/</guid><pubDate>Mon, 17 May 2021 22:00:00 GMT</pubDate></item><item><title>The Long Haul</title><link>https://elizabethzagroba.com/posts/2021/the_long_haul/</link><dc:creator>Elizabeth Zagroba</dc:creator><description>&lt;div&gt;&lt;p&gt;I've been both the lead of my team and a tester on that team for a year now. Getting answers, adapting to change, and identifying solutions have completely different time horizons in each of these roles. &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Tester experiments&lt;/h4&gt;
&lt;p&gt;Testing experiments can run quickly. A testing experiment might look like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Call an API&lt;/li&gt;
&lt;li&gt;Inspect the output&lt;/li&gt;
&lt;li&gt;Compare that to the specification&lt;/li&gt;
&lt;li&gt;Question whether either or both need changing&lt;/li&gt;
&lt;li&gt;Talk to a developer about the changes&lt;/li&gt;
&lt;li&gt;Update the specification and/or tests&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All of that happens within minutes or hours, or days if schedules are extremely incompatible and asynchronous communication is failing. I can be confident in the experiment's outcome. I can weigh the relative merits of caring vs. not caring about a particular error response code or required field, and leave my work at work. The next time I see a particular error response, I know what to look for and where changes might be needed. A failing test is evidence that something used to work in a particular way. &lt;/p&gt;
&lt;h4&gt;Team lead experiments&lt;/h4&gt;
&lt;p&gt;Team lead experiments take longer. A team lead experiment might look something more like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Team members complain that it's hard to get their ideas in during refinement.&lt;/li&gt;
&lt;li&gt;I mention this to the talking-dominant team member at a 1-on-1.&lt;/li&gt;
&lt;li&gt;Talking-dominant team member dominates following refinement.&lt;/li&gt;
&lt;li&gt;I remind talking-dominant team member in Slack about our previous conversation.&lt;/li&gt;
&lt;li&gt;Talking-dominant team member spills over their allotted time during big unit meeting.&lt;/li&gt;
&lt;li&gt;I bring both of these instances in our 1-on-1, sharing the consequences (they're the single point of failure, other team members aren't heard) of their actions.&lt;/li&gt;
&lt;li&gt;Talking-dominant team member does it again.&lt;/li&gt;
&lt;li&gt;I ask team member what I can do to help them change their behavior, given that we are both adults in control of our own behavior. They agree that change is their responsibility. We agree that setting their microphone on mute at the start of the meeting would help.&lt;/li&gt;
&lt;li&gt;Talking-dominant team member dominates some of the following refinement, until I remind them to mute, after which other team members have time to think and contribute too.&lt;/li&gt;
&lt;li&gt;I ask talking-dominant team member to set up a Slackbot to send them a reminder to mute their microphone each week before the meeting.&lt;/li&gt;
&lt;li&gt;Other people are able to contribute at the following refinement. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This took place over months. We're not to a point where we have a solution that works every time. I went in with a different hypothesis each time, not knowing when I'd hit on the right one:&lt;/p&gt;
&lt;p&gt;2. I think the talking-dominant team member isn't aware of their behavior.&lt;br&gt;
4. I think the team member has forgotten our first conversation.&lt;br&gt;
6. I think the team member doesn't understand the impact of their behavior.&lt;br&gt;
8. I think the team member hasn't found a tool or a trigger to change their habit.&lt;br&gt;
10. I think the team member needs both a tool and a trigger to change their habit.&lt;/p&gt;
&lt;p&gt;Any of the first four experiments taken by itself looks like a failure. The talking-dominant team member prevents other team members from contributing effectively. It takes me time as a leader to come up with a different hypothesis, try something else, and discover where to go from there. And this was a relatively straightforward issue to assess. Imagine how long it might take to find an effective response to a problem with more variables and more consequences.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I'm also thinking not just about the experiments themselves, but how they might come across to the wider team. For the testing experiment, I could present my results in standup the next day as "I tested it, everything's good" but it's more valuable for everyone if I &lt;a href="https://www.ministryoftesting.com/dojo/lessons/defining-story-completion-as-a-software-tester"&gt;tell a bit more of the story&lt;/a&gt;. In the team lead experiment, I can imagine my team member telling my boss "Elizabeth told me to be quiet" or me telling my boss "The talking-dominant team member is giving room for others to contribute." Telling a slightly longer story of the journey displays my value as a team lead in a better light. &lt;/p&gt;
&lt;p&gt;What experiments are you running right now? Is something that looks or feels like a failure getting you closer to a solution? How long is your time horizon?&lt;/p&gt;&lt;/div&gt;</description><category>career</category><category>critical-thinking</category><category>humans</category><category>leadership</category><category>mindset</category><category>teaching</category><category>testing</category><guid>https://elizabethzagroba.com/posts/2021/the_long_haul/</guid><pubDate>Fri, 07 May 2021 22:00:00 GMT</pubDate></item></channel></rss>